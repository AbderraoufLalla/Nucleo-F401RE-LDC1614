
com_4.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ddc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08004f7c  08004f7c  00005f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800519c  0800519c  00007084  2**0
                  CONTENTS
  4 .ARM          00000008  0800519c  0800519c  0000619c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051a4  080051a4  00007084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051a4  080051a4  000061a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051a8  080051a8  000061a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  080051ac  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000084  08005230  00007084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08005230  000072d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a600  00000000  00000000  000070b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000173b  00000000  00000000  000116b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  00012df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000742  00000000  00000000  00013730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ec7  00000000  00000000  00013e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bffc  00000000  00000000  00029d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088f40  00000000  00000000  00035d35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bec75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d34  00000000  00000000  000becb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000c19ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004f64 	.word	0x08004f64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08004f64 	.word	0x08004f64

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96a 	b.w	8000da8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	460c      	mov	r4, r1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d14e      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000af8:	4694      	mov	ip, r2
 8000afa:	458c      	cmp	ip, r1
 8000afc:	4686      	mov	lr, r0
 8000afe:	fab2 f282 	clz	r2, r2
 8000b02:	d962      	bls.n	8000bca <__udivmoddi4+0xde>
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0320 	rsb	r3, r2, #32
 8000b0a:	4091      	lsls	r1, r2
 8000b0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b14:	4319      	orrs	r1, r3
 8000b16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1e:	fa1f f68c 	uxth.w	r6, ip
 8000b22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb04 f106 	mul.w	r1, r4, r6
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b42:	f080 8112 	bcs.w	8000d6a <__udivmoddi4+0x27e>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 810f 	bls.w	8000d6a <__udivmoddi4+0x27e>
 8000b4c:	3c02      	subs	r4, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a59      	subs	r1, r3, r1
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb00 f606 	mul.w	r6, r0, r6
 8000b66:	429e      	cmp	r6, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x94>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b72:	f080 80fc 	bcs.w	8000d6e <__udivmoddi4+0x282>
 8000b76:	429e      	cmp	r6, r3
 8000b78:	f240 80f9 	bls.w	8000d6e <__udivmoddi4+0x282>
 8000b7c:	4463      	add	r3, ip
 8000b7e:	3802      	subs	r0, #2
 8000b80:	1b9b      	subs	r3, r3, r6
 8000b82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b86:	2100      	movs	r1, #0
 8000b88:	b11d      	cbz	r5, 8000b92 <__udivmoddi4+0xa6>
 8000b8a:	40d3      	lsrs	r3, r2
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d905      	bls.n	8000ba6 <__udivmoddi4+0xba>
 8000b9a:	b10d      	cbz	r5, 8000ba0 <__udivmoddi4+0xb4>
 8000b9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	e7f5      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000ba6:	fab3 f183 	clz	r1, r3
 8000baa:	2900      	cmp	r1, #0
 8000bac:	d146      	bne.n	8000c3c <__udivmoddi4+0x150>
 8000bae:	42a3      	cmp	r3, r4
 8000bb0:	d302      	bcc.n	8000bb8 <__udivmoddi4+0xcc>
 8000bb2:	4290      	cmp	r0, r2
 8000bb4:	f0c0 80f0 	bcc.w	8000d98 <__udivmoddi4+0x2ac>
 8000bb8:	1a86      	subs	r6, r0, r2
 8000bba:	eb64 0303 	sbc.w	r3, r4, r3
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d0e6      	beq.n	8000b92 <__udivmoddi4+0xa6>
 8000bc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bc8:	e7e3      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	f040 8090 	bne.w	8000cf0 <__udivmoddi4+0x204>
 8000bd0:	eba1 040c 	sub.w	r4, r1, ip
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	fa1f f78c 	uxth.w	r7, ip
 8000bdc:	2101      	movs	r1, #1
 8000bde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000be2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000be6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bee:	fb07 f006 	mul.w	r0, r7, r6
 8000bf2:	4298      	cmp	r0, r3
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x11c>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x11a>
 8000c00:	4298      	cmp	r0, r3
 8000c02:	f200 80cd 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000c06:	4626      	mov	r6, r4
 8000c08:	1a1c      	subs	r4, r3, r0
 8000c0a:	fa1f f38e 	uxth.w	r3, lr
 8000c0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c12:	fb08 4410 	mls	r4, r8, r0, r4
 8000c16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1a:	fb00 f707 	mul.w	r7, r0, r7
 8000c1e:	429f      	cmp	r7, r3
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x148>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c2a:	d202      	bcs.n	8000c32 <__udivmoddi4+0x146>
 8000c2c:	429f      	cmp	r7, r3
 8000c2e:	f200 80b0 	bhi.w	8000d92 <__udivmoddi4+0x2a6>
 8000c32:	4620      	mov	r0, r4
 8000c34:	1bdb      	subs	r3, r3, r7
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	e7a5      	b.n	8000b88 <__udivmoddi4+0x9c>
 8000c3c:	f1c1 0620 	rsb	r6, r1, #32
 8000c40:	408b      	lsls	r3, r1
 8000c42:	fa22 f706 	lsr.w	r7, r2, r6
 8000c46:	431f      	orrs	r7, r3
 8000c48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c50:	ea43 030c 	orr.w	r3, r3, ip
 8000c54:	40f4      	lsrs	r4, r6
 8000c56:	fa00 f801 	lsl.w	r8, r0, r1
 8000c5a:	0c38      	lsrs	r0, r7, #16
 8000c5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c60:	fbb4 fef0 	udiv	lr, r4, r0
 8000c64:	fa1f fc87 	uxth.w	ip, r7
 8000c68:	fb00 441e 	mls	r4, r0, lr, r4
 8000c6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c70:	fb0e f90c 	mul.w	r9, lr, ip
 8000c74:	45a1      	cmp	r9, r4
 8000c76:	fa02 f201 	lsl.w	r2, r2, r1
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x1a6>
 8000c7c:	193c      	adds	r4, r7, r4
 8000c7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c82:	f080 8084 	bcs.w	8000d8e <__udivmoddi4+0x2a2>
 8000c86:	45a1      	cmp	r9, r4
 8000c88:	f240 8081 	bls.w	8000d8e <__udivmoddi4+0x2a2>
 8000c8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	eba4 0409 	sub.w	r4, r4, r9
 8000c96:	fa1f f983 	uxth.w	r9, r3
 8000c9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ca2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000caa:	45a4      	cmp	ip, r4
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x1d2>
 8000cae:	193c      	adds	r4, r7, r4
 8000cb0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cb4:	d267      	bcs.n	8000d86 <__udivmoddi4+0x29a>
 8000cb6:	45a4      	cmp	ip, r4
 8000cb8:	d965      	bls.n	8000d86 <__udivmoddi4+0x29a>
 8000cba:	3b02      	subs	r3, #2
 8000cbc:	443c      	add	r4, r7
 8000cbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cc6:	eba4 040c 	sub.w	r4, r4, ip
 8000cca:	429c      	cmp	r4, r3
 8000ccc:	46ce      	mov	lr, r9
 8000cce:	469c      	mov	ip, r3
 8000cd0:	d351      	bcc.n	8000d76 <__udivmoddi4+0x28a>
 8000cd2:	d04e      	beq.n	8000d72 <__udivmoddi4+0x286>
 8000cd4:	b155      	cbz	r5, 8000cec <__udivmoddi4+0x200>
 8000cd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cda:	eb64 040c 	sbc.w	r4, r4, ip
 8000cde:	fa04 f606 	lsl.w	r6, r4, r6
 8000ce2:	40cb      	lsrs	r3, r1
 8000ce4:	431e      	orrs	r6, r3
 8000ce6:	40cc      	lsrs	r4, r1
 8000ce8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	e750      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000d00:	4094      	lsls	r4, r2
 8000d02:	430c      	orrs	r4, r1
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d0c:	fa1f f78c 	uxth.w	r7, ip
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3110 	mls	r1, r8, r0, r3
 8000d18:	0c23      	lsrs	r3, r4, #16
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f107 	mul.w	r1, r0, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x24c>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d2e:	d22c      	bcs.n	8000d8a <__udivmoddi4+0x29e>
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d92a      	bls.n	8000d8a <__udivmoddi4+0x29e>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d40:	fb08 3311 	mls	r3, r8, r1, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb01 f307 	mul.w	r3, r1, r7
 8000d4c:	42a3      	cmp	r3, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x276>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d58:	d213      	bcs.n	8000d82 <__udivmoddi4+0x296>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d911      	bls.n	8000d82 <__udivmoddi4+0x296>
 8000d5e:	3902      	subs	r1, #2
 8000d60:	4464      	add	r4, ip
 8000d62:	1ae4      	subs	r4, r4, r3
 8000d64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d68:	e739      	b.n	8000bde <__udivmoddi4+0xf2>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	e6f0      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e706      	b.n	8000b80 <__udivmoddi4+0x94>
 8000d72:	45c8      	cmp	r8, r9
 8000d74:	d2ae      	bcs.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d7e:	3801      	subs	r0, #1
 8000d80:	e7a8      	b.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d82:	4631      	mov	r1, r6
 8000d84:	e7ed      	b.n	8000d62 <__udivmoddi4+0x276>
 8000d86:	4603      	mov	r3, r0
 8000d88:	e799      	b.n	8000cbe <__udivmoddi4+0x1d2>
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	e7d4      	b.n	8000d38 <__udivmoddi4+0x24c>
 8000d8e:	46d6      	mov	lr, sl
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1a6>
 8000d92:	4463      	add	r3, ip
 8000d94:	3802      	subs	r0, #2
 8000d96:	e74d      	b.n	8000c34 <__udivmoddi4+0x148>
 8000d98:	4606      	mov	r6, r0
 8000d9a:	4623      	mov	r3, r4
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	e70f      	b.n	8000bc0 <__udivmoddi4+0xd4>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	4463      	add	r3, ip
 8000da4:	e730      	b.n	8000c08 <__udivmoddi4+0x11c>
 8000da6:	bf00      	nop

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <LDC1614_ReadRegister>:
  * @retval int
  */


// Function to read a register from LDC1614
void LDC1614_ReadRegister(uint8_t reg, uint8_t* buffer, uint16_t size) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af04      	add	r7, sp, #16
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	71fb      	strb	r3, [r7, #7]
 8000db8:	4613      	mov	r3, r2
 8000dba:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hi2c1, LDC1614_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, buffer, size, HAL_MAX_DELAY);
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc4:	9302      	str	r3, [sp, #8]
 8000dc6:	88bb      	ldrh	r3, [r7, #4]
 8000dc8:	9301      	str	r3, [sp, #4]
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	2301      	movs	r3, #1
 8000dd0:	2154      	movs	r1, #84	@ 0x54
 8000dd2:	4803      	ldr	r0, [pc, #12]	@ (8000de0 <LDC1614_ReadRegister+0x34>)
 8000dd4:	f001 fd04 	bl	80027e0 <HAL_I2C_Mem_Read>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	200000a0 	.word	0x200000a0

08000de4 <LDC1614_WriteRegister>:

void LDC1614_WriteRegister(uint8_t reg, uint8_t* data, uint16_t size) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af04      	add	r7, sp, #16
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	71fb      	strb	r3, [r7, #7]
 8000df0:	4613      	mov	r3, r2
 8000df2:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Write(&hi2c1, LDC1614_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, size, HAL_MAX_DELAY);
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfc:	9302      	str	r3, [sp, #8]
 8000dfe:	88bb      	ldrh	r3, [r7, #4]
 8000e00:	9301      	str	r3, [sp, #4]
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	2301      	movs	r3, #1
 8000e08:	2154      	movs	r1, #84	@ 0x54
 8000e0a:	4803      	ldr	r0, [pc, #12]	@ (8000e18 <LDC1614_WriteRegister+0x34>)
 8000e0c:	f001 fbee 	bl	80025ec <HAL_I2C_Mem_Write>
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	200000a0 	.word	0x200000a0

08000e1c <hex_to_dec>:

// Function to transform hex to dec
int hex_to_dec(uint16_t hex) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	80fb      	strh	r3, [r7, #6]
	char hexString_CH0[5];
	snprintf(hexString_CH0, sizeof(hexString_CH0), "%04X", hex);
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	f107 000c 	add.w	r0, r7, #12
 8000e2c:	4a08      	ldr	r2, [pc, #32]	@ (8000e50 <hex_to_dec+0x34>)
 8000e2e:	2105      	movs	r1, #5
 8000e30:	f003 fbe4 	bl	80045fc <sniprintf>
	int integerValue = (int)strtol(hexString_CH0, NULL, 16);
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	2210      	movs	r2, #16
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f003 fbd3 	bl	80045e8 <strtol>
 8000e42:	6178      	str	r0, [r7, #20]
	return integerValue;
 8000e44:	697b      	ldr	r3, [r7, #20]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	08004f7c 	.word	0x08004f7c

08000e54 <calculate_raw_code>:

    // Write the updated register value (MSB unchanged, LSB updated)
    HAL_I2C_Mem_Write(&hi2c1, LDC1614_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, current_data, 2, HAL_MAX_DELAY);
}

uint32_t calculate_raw_code(uint16_t msb, uint16_t lsb) {
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	460a      	mov	r2, r1
 8000e5e:	80fb      	strh	r3, [r7, #6]
 8000e60:	4613      	mov	r3, r2
 8000e62:	80bb      	strh	r3, [r7, #4]
    // Ensure MSB is 12-bit and LSB is 16-bit
    if (msb >= (1 << 12)) {
 8000e64:	88fb      	ldrh	r3, [r7, #6]
 8000e66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e6a:	d301      	bcc.n	8000e70 <calculate_raw_code+0x1c>
        return 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	e005      	b.n	8000e7c <calculate_raw_code+0x28>
    }
    if (lsb >= (1 << 16)) {
        return 0;
    }
    uint32_t raw_code = msb * 65536 + lsb;
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	041a      	lsls	r2, r3, #16
 8000e74:	88bb      	ldrh	r3, [r7, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
    return raw_code;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <calculate_frequency_supply>:

int calculate_frequency_supply(float f_ref, float div) {
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e92:	edc7 0a00 	vstr	s1, [r7]
    float f_supply = f_ref / div * 1000;  // Ensure the division is treated as floating-point
 8000e96:	edd7 6a01 	vldr	s13, [r7, #4]
 8000e9a:	ed97 7a00 	vldr	s14, [r7]
 8000e9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ea2:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000ec8 <calculate_frequency_supply+0x40>
 8000ea6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eaa:	edc7 7a03 	vstr	s15, [r7, #12]
    return f_supply;
 8000eae:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eb6:	ee17 3a90 	vmov	r3, s15
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	447a0000 	.word	0x447a0000
 8000ecc:	00000000 	.word	0x00000000

08000ed0 <calculate_frequency_sensor>:

float calculate_frequency_sensor(float f_ref, float div, float raw_code) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	ed87 0a03 	vstr	s0, [r7, #12]
 8000eda:	edc7 0a02 	vstr	s1, [r7, #8]
 8000ede:	ed87 1a01 	vstr	s2, [r7, #4]
    float f_supply = f_ref / div;  // Ensure the division is treated as floating-point
 8000ee2:	edd7 6a03 	vldr	s13, [r7, #12]
 8000ee6:	ed97 7a02 	vldr	s14, [r7, #8]
 8000eea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eee:	edc7 7a07 	vstr	s15, [r7, #28]
    float delta_CH0 =  raw_code / 268435.456;
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff fb28 	bl	8000548 <__aeabi_f2d>
 8000ef8:	a30f      	add	r3, pc, #60	@ (adr r3, 8000f38 <calculate_frequency_sensor+0x68>)
 8000efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efe:	f7ff fca5 	bl	800084c <__aeabi_ddiv>
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	4610      	mov	r0, r2
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f7ff fd87 	bl	8000a1c <__aeabi_d2f>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	61bb      	str	r3, [r7, #24]

    float f_sensor = f_supply * delta_CH0;
 8000f12:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f16:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f1e:	edc7 7a05 	vstr	s15, [r7, #20]
    return f_sensor;
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	ee07 3a90 	vmov	s15, r3
}
 8000f28:	eeb0 0a67 	vmov.f32	s0, s15
 8000f2c:	3720      	adds	r7, #32
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	f3af 8000 	nop.w
 8000f38:	d2f1a9fc 	.word	0xd2f1a9fc
 8000f3c:	4110624d 	.word	0x4110624d

08000f40 <calculate_inductance>:

// Function to calculate inductance in microhenries
float calculate_inductance(float raw_code, int f_supply, float fin_divider) {
 8000f40:	b480      	push	{r7}
 8000f42:	b08b      	sub	sp, #44	@ 0x2c
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f4a:	60b8      	str	r0, [r7, #8]
 8000f4c:	edc7 0a01 	vstr	s1, [r7, #4]
    float delta = raw_code / 268435.456f;
 8000f50:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f54:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8000ff0 <calculate_inductance+0xb0>
 8000f58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f5c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float f_sensor = f_supply * delta / 1000.0f;
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	ee07 3a90 	vmov	s15, r3
 8000f66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f6a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000f6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f72:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8000ff4 <calculate_inductance+0xb4>
 8000f76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f7a:	edc7 7a08 	vstr	s15, [r7, #32]

    float a = 2 * 3.14f * f_sensor * 1000.0f;
 8000f7e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f82:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000ff8 <calculate_inductance+0xb8>
 8000f86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f8a:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000ff4 <calculate_inductance+0xb4>
 8000f8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f92:	edc7 7a07 	vstr	s15, [r7, #28]
    float b = a * a;  // Square 'a'
 8000f96:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f9a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000f9e:	edc7 7a06 	vstr	s15, [r7, #24]
    float c = b * 330.0f * 1e-12f;  // Representation of 10^-12
 8000fa2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fa6:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8000ffc <calculate_inductance+0xbc>
 8000faa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fae:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001000 <calculate_inductance+0xc0>
 8000fb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fb6:	edc7 7a05 	vstr	s15, [r7, #20]

    return (c != 0) ? (1 / c) * 1e9f : 0;  // Convert to microhenries
 8000fba:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fbe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc6:	d00a      	beq.n	8000fde <calculate_inductance+0x9e>
 8000fc8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000fcc:	ed97 7a05 	vldr	s14, [r7, #20]
 8000fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fd4:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001004 <calculate_inductance+0xc4>
 8000fd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fdc:	e001      	b.n	8000fe2 <calculate_inductance+0xa2>
 8000fde:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8001008 <calculate_inductance+0xc8>
}
 8000fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe6:	372c      	adds	r7, #44	@ 0x2c
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	4883126f 	.word	0x4883126f
 8000ff4:	447a0000 	.word	0x447a0000
 8000ff8:	40c8f5c3 	.word	0x40c8f5c3
 8000ffc:	43a50000 	.word	0x43a50000
 8001000:	2b8cbccc 	.word	0x2b8cbccc
 8001004:	4e6e6b28 	.word	0x4e6e6b28
 8001008:	00000000 	.word	0x00000000

0800100c <Transmit_Data>:

void Transmit_Data(uint16_t MSB_CH0, uint16_t LSB_CH0, uint16_t CH0_FIN_DIVIDER, uint16_t CH0_OFFSET,
                    uint16_t MSB_CH1, uint16_t LSB_CH1, uint16_t CH1_FIN_DIVIDER, uint16_t CH1_OFFSET,
                    uint16_t MSB_CH2, uint16_t LSB_CH2, uint16_t CH2_FIN_DIVIDER, uint16_t CH2_OFFSET,
                    uint16_t MSB_CH3, uint16_t LSB_CH3, uint16_t CH3_FIN_DIVIDER, uint16_t CH3_OFFSET) {
 800100c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800100e:	f2ad 4dac 	subw	sp, sp, #1196	@ 0x4ac
 8001012:	af12      	add	r7, sp, #72	@ 0x48
 8001014:	4605      	mov	r5, r0
 8001016:	460c      	mov	r4, r1
 8001018:	4610      	mov	r0, r2
 800101a:	4619      	mov	r1, r3
 800101c:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001020:	f2a3 4342 	subw	r3, r3, #1090	@ 0x442
 8001024:	462a      	mov	r2, r5
 8001026:	801a      	strh	r2, [r3, #0]
 8001028:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 800102c:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 8001030:	4622      	mov	r2, r4
 8001032:	801a      	strh	r2, [r3, #0]
 8001034:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001038:	f2a3 4346 	subw	r3, r3, #1094	@ 0x446
 800103c:	4602      	mov	r2, r0
 800103e:	801a      	strh	r2, [r3, #0]
 8001040:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001044:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8001048:	460a      	mov	r2, r1
 800104a:	801a      	strh	r2, [r3, #0]
    static uint32_t transmit_count = 0;  // Counter to keep track of transmitted data instances
    char msg[1000];  // Buffer to hold the transmitted message

    transmit_count++;  // Increment the counter each time data is transmitted
 800104c:	4be9      	ldr	r3, [pc, #932]	@ (80013f4 <Transmit_Data+0x3e8>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	3301      	adds	r3, #1
 8001052:	4ae8      	ldr	r2, [pc, #928]	@ (80013f4 <Transmit_Data+0x3e8>)
 8001054:	6013      	str	r3, [r2, #0]

    // Sensor calculation using 43.4 MHz // PS: the f_supply is in KHz
    float reference_frequency = 43.4;
 8001056:	4be8      	ldr	r3, [pc, #928]	@ (80013f8 <Transmit_Data+0x3ec>)
 8001058:	f207 425c 	addw	r2, r7, #1116	@ 0x45c
 800105c:	6013      	str	r3, [r2, #0]

    // Mask MSB values to 12 bits
    uint16_t MSB_CH0_masked = MSB_CH0 & 0x0FFF;
 800105e:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001062:	f2a3 4342 	subw	r3, r3, #1090	@ 0x442
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800106c:	f8a7 345a 	strh.w	r3, [r7, #1114]	@ 0x45a
    uint16_t MSB_CH1_masked = MSB_CH1 & 0x0FFF;
 8001070:	f8b7 3478 	ldrh.w	r3, [r7, #1144]	@ 0x478
 8001074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001078:	f8a7 3458 	strh.w	r3, [r7, #1112]	@ 0x458
    uint16_t MSB_CH2_masked = MSB_CH2 & 0x0FFF;
 800107c:	f8b7 3488 	ldrh.w	r3, [r7, #1160]	@ 0x488
 8001080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001084:	f8a7 3456 	strh.w	r3, [r7, #1110]	@ 0x456
    uint16_t MSB_CH3_masked = MSB_CH3 & 0x0FFF;
 8001088:	f8b7 3498 	ldrh.w	r3, [r7, #1176]	@ 0x498
 800108c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001090:	f8a7 3454 	strh.w	r3, [r7, #1108]	@ 0x454

    // Mask FIN divider to 8 bits
    uint16_t CH0_FIN_DIVIDER_masked = CH0_FIN_DIVIDER & 0x00FF;
 8001094:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001098:	f2a3 4346 	subw	r3, r3, #1094	@ 0x446
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	f8a7 3452 	strh.w	r3, [r7, #1106]	@ 0x452
    uint16_t CH1_FIN_DIVIDER_masked = CH1_FIN_DIVIDER & 0x00FF;
 80010a4:	f8b7 3480 	ldrh.w	r3, [r7, #1152]	@ 0x480
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	f8a7 3450 	strh.w	r3, [r7, #1104]	@ 0x450
    uint16_t CH2_FIN_DIVIDER_masked = CH2_FIN_DIVIDER & 0x00FF;
 80010ae:	f8b7 3490 	ldrh.w	r3, [r7, #1168]	@ 0x490
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	f8a7 344e 	strh.w	r3, [r7, #1102]	@ 0x44e
    uint16_t CH3_FIN_DIVIDER_masked = CH3_FIN_DIVIDER & 0x00FF;
 80010b8:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	@ 0x4a0
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	f8a7 344c 	strh.w	r3, [r7, #1100]	@ 0x44c

    uint32_t raw_code_CH0 = calculate_raw_code(MSB_CH0_masked, LSB_CH0);
 80010c2:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 80010c6:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 80010ca:	881a      	ldrh	r2, [r3, #0]
 80010cc:	f8b7 345a 	ldrh.w	r3, [r7, #1114]	@ 0x45a
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff febe 	bl	8000e54 <calculate_raw_code>
 80010d8:	f8c7 0448 	str.w	r0, [r7, #1096]	@ 0x448
    uint32_t raw_code_CH1 = calculate_raw_code(MSB_CH1_masked, LSB_CH1);
 80010dc:	f8b7 247c 	ldrh.w	r2, [r7, #1148]	@ 0x47c
 80010e0:	f8b7 3458 	ldrh.w	r3, [r7, #1112]	@ 0x458
 80010e4:	4611      	mov	r1, r2
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff feb4 	bl	8000e54 <calculate_raw_code>
 80010ec:	f8c7 0444 	str.w	r0, [r7, #1092]	@ 0x444
    uint32_t raw_code_CH2 = calculate_raw_code(MSB_CH2_masked, LSB_CH2);
 80010f0:	f8b7 248c 	ldrh.w	r2, [r7, #1164]	@ 0x48c
 80010f4:	f8b7 3456 	ldrh.w	r3, [r7, #1110]	@ 0x456
 80010f8:	4611      	mov	r1, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff feaa 	bl	8000e54 <calculate_raw_code>
 8001100:	f8c7 0440 	str.w	r0, [r7, #1088]	@ 0x440
    uint32_t raw_code_CH3 = calculate_raw_code(MSB_CH3_masked, LSB_CH3);
 8001104:	f8b7 249c 	ldrh.w	r2, [r7, #1180]	@ 0x49c
 8001108:	f8b7 3454 	ldrh.w	r3, [r7, #1108]	@ 0x454
 800110c:	4611      	mov	r1, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fea0 	bl	8000e54 <calculate_raw_code>
 8001114:	f8c7 043c 	str.w	r0, [r7, #1084]	@ 0x43c

    int f_supply_CH0 = calculate_frequency_supply(reference_frequency, CH0_FIN_DIVIDER_masked);
 8001118:	f8b7 3452 	ldrh.w	r3, [r7, #1106]	@ 0x452
 800111c:	ee07 3a90 	vmov	s15, r3
 8001120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001124:	eef0 0a67 	vmov.f32	s1, s15
 8001128:	f207 435c 	addw	r3, r7, #1116	@ 0x45c
 800112c:	ed93 0a00 	vldr	s0, [r3]
 8001130:	f7ff feaa 	bl	8000e88 <calculate_frequency_supply>
 8001134:	f8c7 0438 	str.w	r0, [r7, #1080]	@ 0x438
    int f_supply_CH1 = calculate_frequency_supply(reference_frequency, CH1_FIN_DIVIDER_masked);
 8001138:	f8b7 3450 	ldrh.w	r3, [r7, #1104]	@ 0x450
 800113c:	ee07 3a90 	vmov	s15, r3
 8001140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001144:	eef0 0a67 	vmov.f32	s1, s15
 8001148:	f207 435c 	addw	r3, r7, #1116	@ 0x45c
 800114c:	ed93 0a00 	vldr	s0, [r3]
 8001150:	f7ff fe9a 	bl	8000e88 <calculate_frequency_supply>
 8001154:	f8c7 0434 	str.w	r0, [r7, #1076]	@ 0x434
    int f_supply_CH2 = calculate_frequency_supply(reference_frequency, CH2_FIN_DIVIDER_masked);
 8001158:	f8b7 344e 	ldrh.w	r3, [r7, #1102]	@ 0x44e
 800115c:	ee07 3a90 	vmov	s15, r3
 8001160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001164:	eef0 0a67 	vmov.f32	s1, s15
 8001168:	f207 435c 	addw	r3, r7, #1116	@ 0x45c
 800116c:	ed93 0a00 	vldr	s0, [r3]
 8001170:	f7ff fe8a 	bl	8000e88 <calculate_frequency_supply>
 8001174:	f8c7 0430 	str.w	r0, [r7, #1072]	@ 0x430
    int f_supply_CH3 = calculate_frequency_supply(reference_frequency, CH3_FIN_DIVIDER_masked);
 8001178:	f8b7 344c 	ldrh.w	r3, [r7, #1100]	@ 0x44c
 800117c:	ee07 3a90 	vmov	s15, r3
 8001180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001184:	eef0 0a67 	vmov.f32	s1, s15
 8001188:	f207 435c 	addw	r3, r7, #1116	@ 0x45c
 800118c:	ed93 0a00 	vldr	s0, [r3]
 8001190:	f7ff fe7a 	bl	8000e88 <calculate_frequency_supply>
 8001194:	f8c7 042c 	str.w	r0, [r7, #1068]	@ 0x42c

    int f_sensor_CH0 = calculate_frequency_sensor(reference_frequency, CH0_FIN_DIVIDER_masked, raw_code_CH0);
 8001198:	f8b7 3452 	ldrh.w	r3, [r7, #1106]	@ 0x452
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011a4:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 80011a8:	ee07 3a10 	vmov	s14, r3
 80011ac:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80011b0:	eeb0 1a47 	vmov.f32	s2, s14
 80011b4:	eef0 0a67 	vmov.f32	s1, s15
 80011b8:	f207 435c 	addw	r3, r7, #1116	@ 0x45c
 80011bc:	ed93 0a00 	vldr	s0, [r3]
 80011c0:	f7ff fe86 	bl	8000ed0 <calculate_frequency_sensor>
 80011c4:	eef0 7a40 	vmov.f32	s15, s0
 80011c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011cc:	ee17 3a90 	vmov	r3, s15
 80011d0:	f8c7 3428 	str.w	r3, [r7, #1064]	@ 0x428
    int f_sensor_CH1 = calculate_frequency_sensor(reference_frequency, CH1_FIN_DIVIDER_masked, raw_code_CH1);
 80011d4:	f8b7 3450 	ldrh.w	r3, [r7, #1104]	@ 0x450
 80011d8:	ee07 3a90 	vmov	s15, r3
 80011dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011e0:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 80011e4:	ee07 3a10 	vmov	s14, r3
 80011e8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80011ec:	eeb0 1a47 	vmov.f32	s2, s14
 80011f0:	eef0 0a67 	vmov.f32	s1, s15
 80011f4:	f207 435c 	addw	r3, r7, #1116	@ 0x45c
 80011f8:	ed93 0a00 	vldr	s0, [r3]
 80011fc:	f7ff fe68 	bl	8000ed0 <calculate_frequency_sensor>
 8001200:	eef0 7a40 	vmov.f32	s15, s0
 8001204:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001208:	ee17 3a90 	vmov	r3, s15
 800120c:	f8c7 3424 	str.w	r3, [r7, #1060]	@ 0x424
    int f_sensor_CH2 = calculate_frequency_sensor(reference_frequency, CH2_FIN_DIVIDER_masked, raw_code_CH2);
 8001210:	f8b7 344e 	ldrh.w	r3, [r7, #1102]	@ 0x44e
 8001214:	ee07 3a90 	vmov	s15, r3
 8001218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800121c:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8001220:	ee07 3a10 	vmov	s14, r3
 8001224:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001228:	eeb0 1a47 	vmov.f32	s2, s14
 800122c:	eef0 0a67 	vmov.f32	s1, s15
 8001230:	f207 435c 	addw	r3, r7, #1116	@ 0x45c
 8001234:	ed93 0a00 	vldr	s0, [r3]
 8001238:	f7ff fe4a 	bl	8000ed0 <calculate_frequency_sensor>
 800123c:	eef0 7a40 	vmov.f32	s15, s0
 8001240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001244:	ee17 3a90 	vmov	r3, s15
 8001248:	f8c7 3420 	str.w	r3, [r7, #1056]	@ 0x420
    int f_sensor_CH3 = calculate_frequency_sensor(reference_frequency, CH3_FIN_DIVIDER_masked, raw_code_CH3);
 800124c:	f8b7 344c 	ldrh.w	r3, [r7, #1100]	@ 0x44c
 8001250:	ee07 3a90 	vmov	s15, r3
 8001254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001258:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 800125c:	ee07 3a10 	vmov	s14, r3
 8001260:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001264:	eeb0 1a47 	vmov.f32	s2, s14
 8001268:	eef0 0a67 	vmov.f32	s1, s15
 800126c:	f207 435c 	addw	r3, r7, #1116	@ 0x45c
 8001270:	ed93 0a00 	vldr	s0, [r3]
 8001274:	f7ff fe2c 	bl	8000ed0 <calculate_frequency_sensor>
 8001278:	eef0 7a40 	vmov.f32	s15, s0
 800127c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001280:	ee17 3a90 	vmov	r3, s15
 8001284:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
//    float a = 2 * 3.14f * f_sensor_CH0 * 1000;
//    float b = pow(a, 2);  // Correct way to square 'a'
//    float c = b * 330 * 1e-12;  // Correct representation of 10^-12
//    int L_CH0 = 1000000000 / c;  // Assuming 'c' is not zero

    int L_CH0 = calculate_inductance(raw_code_CH0, f_supply_CH0, CH0_FIN_DIVIDER_masked);
 8001288:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 800128c:	ee07 3a90 	vmov	s15, r3
 8001290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001294:	f8b7 3452 	ldrh.w	r3, [r7, #1106]	@ 0x452
 8001298:	ee07 3a10 	vmov	s14, r3
 800129c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80012a0:	eef0 0a47 	vmov.f32	s1, s14
 80012a4:	f8d7 0438 	ldr.w	r0, [r7, #1080]	@ 0x438
 80012a8:	eeb0 0a67 	vmov.f32	s0, s15
 80012ac:	f7ff fe48 	bl	8000f40 <calculate_inductance>
 80012b0:	eef0 7a40 	vmov.f32	s15, s0
 80012b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012b8:	ee17 3a90 	vmov	r3, s15
 80012bc:	f8c7 3418 	str.w	r3, [r7, #1048]	@ 0x418
    int L_CH1 = calculate_inductance(raw_code_CH1, f_supply_CH1, CH1_FIN_DIVIDER_masked);
 80012c0:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 80012c4:	ee07 3a90 	vmov	s15, r3
 80012c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012cc:	f8b7 3450 	ldrh.w	r3, [r7, #1104]	@ 0x450
 80012d0:	ee07 3a10 	vmov	s14, r3
 80012d4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80012d8:	eef0 0a47 	vmov.f32	s1, s14
 80012dc:	f8d7 0434 	ldr.w	r0, [r7, #1076]	@ 0x434
 80012e0:	eeb0 0a67 	vmov.f32	s0, s15
 80012e4:	f7ff fe2c 	bl	8000f40 <calculate_inductance>
 80012e8:	eef0 7a40 	vmov.f32	s15, s0
 80012ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f0:	ee17 3a90 	vmov	r3, s15
 80012f4:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
    int L_CH2 = calculate_inductance(raw_code_CH2, f_supply_CH2, CH2_FIN_DIVIDER_masked);
 80012f8:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80012fc:	ee07 3a90 	vmov	s15, r3
 8001300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001304:	f8b7 344e 	ldrh.w	r3, [r7, #1102]	@ 0x44e
 8001308:	ee07 3a10 	vmov	s14, r3
 800130c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001310:	eef0 0a47 	vmov.f32	s1, s14
 8001314:	f8d7 0430 	ldr.w	r0, [r7, #1072]	@ 0x430
 8001318:	eeb0 0a67 	vmov.f32	s0, s15
 800131c:	f7ff fe10 	bl	8000f40 <calculate_inductance>
 8001320:	eef0 7a40 	vmov.f32	s15, s0
 8001324:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001328:	ee17 3a90 	vmov	r3, s15
 800132c:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
    int L_CH3 = calculate_inductance(raw_code_CH3, f_supply_CH3, CH3_FIN_DIVIDER_masked);
 8001330:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8001334:	ee07 3a90 	vmov	s15, r3
 8001338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800133c:	f8b7 344c 	ldrh.w	r3, [r7, #1100]	@ 0x44c
 8001340:	ee07 3a10 	vmov	s14, r3
 8001344:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001348:	eef0 0a47 	vmov.f32	s1, s14
 800134c:	f8d7 042c 	ldr.w	r0, [r7, #1068]	@ 0x42c
 8001350:	eeb0 0a67 	vmov.f32	s0, s15
 8001354:	f7ff fdf4 	bl	8000f40 <calculate_inductance>
 8001358:	eef0 7a40 	vmov.f32	s15, s0
 800135c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001360:	ee17 3a90 	vmov	r3, s15
 8001364:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c


   // Format the data as a hexadecimal string along with the counter
    int len = snprintf(msg, sizeof(msg),
 8001368:	f8b7 e45a 	ldrh.w	lr, [r7, #1114]	@ 0x45a
 800136c:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001370:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 8001374:	881a      	ldrh	r2, [r3, #0]
 8001376:	f8b7 1452 	ldrh.w	r1, [r7, #1106]	@ 0x452
 800137a:	f8b7 0458 	ldrh.w	r0, [r7, #1112]	@ 0x458
 800137e:	f8b7 447c 	ldrh.w	r4, [r7, #1148]	@ 0x47c
 8001382:	f8b7 5450 	ldrh.w	r5, [r7, #1104]	@ 0x450
 8001386:	f8b7 6456 	ldrh.w	r6, [r7, #1110]	@ 0x456
 800138a:	f8b7 348c 	ldrh.w	r3, [r7, #1164]	@ 0x48c
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	f8b7 c44e 	ldrh.w	ip, [r7, #1102]	@ 0x44e
 8001394:	4663      	mov	r3, ip
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	f8b7 c454 	ldrh.w	ip, [r7, #1108]	@ 0x454
 800139c:	4663      	mov	r3, ip
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	f8b7 c49c 	ldrh.w	ip, [r7, #1180]	@ 0x49c
 80013a4:	4663      	mov	r3, ip
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	f8b7 c44c 	ldrh.w	ip, [r7, #1100]	@ 0x44c
 80013ac:	4663      	mov	r3, ip
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <Transmit_Data+0x3e8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f107 0c20 	add.w	ip, r7, #32
 80013b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80013ba:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 80013be:	9310      	str	r3, [sp, #64]	@ 0x40
 80013c0:	f8d7 3420 	ldr.w	r3, [r7, #1056]	@ 0x420
 80013c4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80013c6:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 80013ca:	930e      	str	r3, [sp, #56]	@ 0x38
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	930c      	str	r3, [sp, #48]	@ 0x30
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80013d8:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 80013dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	9308      	str	r3, [sp, #32]
 80013e6:	9607      	str	r6, [sp, #28]
 80013e8:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 80013ec:	9306      	str	r3, [sp, #24]
 80013ee:	9505      	str	r5, [sp, #20]
 80013f0:	9404      	str	r4, [sp, #16]
 80013f2:	e003      	b.n	80013fc <Transmit_Data+0x3f0>
 80013f4:	20000180 	.word	0x20000180
 80013f8:	422d999a 	.word	0x422d999a
 80013fc:	9003      	str	r0, [sp, #12]
 80013fe:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8001402:	9302      	str	r3, [sp, #8]
 8001404:	9101      	str	r1, [sp, #4]
 8001406:	9200      	str	r2, [sp, #0]
 8001408:	4673      	mov	r3, lr
 800140a:	4a10      	ldr	r2, [pc, #64]	@ (800144c <Transmit_Data+0x440>)
 800140c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001410:	4660      	mov	r0, ip
 8001412:	f003 f8f3 	bl	80045fc <sniprintf>
 8001416:	f8c7 0408 	str.w	r0, [r7, #1032]	@ 0x408
                       MSB_CH1_masked, LSB_CH1, CH1_FIN_DIVIDER_masked, f_supply_CH1,
                       MSB_CH2_masked, LSB_CH2, CH2_FIN_DIVIDER_masked, f_supply_CH2,
                       MSB_CH3_masked, LSB_CH3, CH3_FIN_DIVIDER_masked, f_supply_CH3,
                       f_sensor_CH2, L_CH2, transmit_count);

   if (len < 0 || len >= sizeof(msg)) {
 800141a:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 800141e:	2b00      	cmp	r3, #0
 8001420:	db0f      	blt.n	8001442 <Transmit_Data+0x436>
 8001422:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8001426:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800142a:	d20a      	bcs.n	8001442 <Transmit_Data+0x436>
        // Consider logging an error message or taking corrective action
        return;
    }

    // Transmit the message over UART
    if (HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY) != HAL_OK) {
 800142c:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8001430:	b29a      	uxth	r2, r3
 8001432:	f107 0120 	add.w	r1, r7, #32
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	4805      	ldr	r0, [pc, #20]	@ (8001450 <Transmit_Data+0x444>)
 800143c:	f002 fc9e 	bl	8003d7c <HAL_UART_Transmit>
 8001440:	e000      	b.n	8001444 <Transmit_Data+0x438>
        return;
 8001442:	bf00      	nop
        // Handle UART transmission error
        // Consider logging an error message or taking corrective action
    }
}
 8001444:	f207 4764 	addw	r7, r7, #1124	@ 0x464
 8001448:	46bd      	mov	sp, r7
 800144a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800144c:	08004f84 	.word	0x08004f84
 8001450:	200000f4 	.word	0x200000f4

08001454 <main>:


int main(void)
{
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b097      	sub	sp, #92	@ 0x5c
 8001458:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145a:	f000 fc69 	bl	8001d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800145e:	f000 f9d5 	bl	800180c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001462:	f000 fa97 	bl	8001994 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001466:	f000 fa6b 	bl	8001940 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800146a:	f000 fa3b 	bl	80018e4 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */
  LDC1614_WriteRegister(RESET_DEV, reset_value, 2);
 800146e:	2202      	movs	r2, #2
 8001470:	49ab      	ldr	r1, [pc, #684]	@ (8001720 <main+0x2cc>)
 8001472:	201c      	movs	r0, #28
 8001474:	f7ff fcb6 	bl	8000de4 <LDC1614_WriteRegister>
  LDC1614_WriteRegister(RESET_DEV, active_value, 2);
 8001478:	2202      	movs	r2, #2
 800147a:	49aa      	ldr	r1, [pc, #680]	@ (8001724 <main+0x2d0>)
 800147c:	201c      	movs	r0, #28
 800147e:	f7ff fcb1 	bl	8000de4 <LDC1614_WriteRegister>


  // Initialising RCOUNT
  LDC1614_WriteRegister(RCOUNT_CH0, R_COUNT_DEFAULT, 2);
 8001482:	2202      	movs	r2, #2
 8001484:	49a8      	ldr	r1, [pc, #672]	@ (8001728 <main+0x2d4>)
 8001486:	2008      	movs	r0, #8
 8001488:	f7ff fcac 	bl	8000de4 <LDC1614_WriteRegister>
  LDC1614_WriteRegister(RCOUNT_CH1, R_COUNT_DEFAULT, 2);
 800148c:	2202      	movs	r2, #2
 800148e:	49a6      	ldr	r1, [pc, #664]	@ (8001728 <main+0x2d4>)
 8001490:	2009      	movs	r0, #9
 8001492:	f7ff fca7 	bl	8000de4 <LDC1614_WriteRegister>
  LDC1614_WriteRegister(RCOUNT_CH2, R_COUNT_DEFAULT, 2);
 8001496:	2202      	movs	r2, #2
 8001498:	49a3      	ldr	r1, [pc, #652]	@ (8001728 <main+0x2d4>)
 800149a:	200a      	movs	r0, #10
 800149c:	f7ff fca2 	bl	8000de4 <LDC1614_WriteRegister>
  LDC1614_WriteRegister(RCOUNT_CH3, R_COUNT_DEFAULT, 2);
 80014a0:	2202      	movs	r2, #2
 80014a2:	49a1      	ldr	r1, [pc, #644]	@ (8001728 <main+0x2d4>)
 80014a4:	200b      	movs	r0, #11
 80014a6:	f7ff fc9d 	bl	8000de4 <LDC1614_WriteRegister>

  // Initialising SETTLECOUNT
  LDC1614_WriteRegister(SETTLECOUNT_CH0, SETTLECOUNT_DEFAULT, 2);
 80014aa:	2202      	movs	r2, #2
 80014ac:	499f      	ldr	r1, [pc, #636]	@ (800172c <main+0x2d8>)
 80014ae:	2010      	movs	r0, #16
 80014b0:	f7ff fc98 	bl	8000de4 <LDC1614_WriteRegister>
  LDC1614_WriteRegister(SETTLECOUNT_CH1, SETTLECOUNT_DEFAULT, 2);
 80014b4:	2202      	movs	r2, #2
 80014b6:	499d      	ldr	r1, [pc, #628]	@ (800172c <main+0x2d8>)
 80014b8:	2011      	movs	r0, #17
 80014ba:	f7ff fc93 	bl	8000de4 <LDC1614_WriteRegister>
  LDC1614_WriteRegister(SETTLECOUNT_CH2, SETTLECOUNT_DEFAULT, 2);
 80014be:	2202      	movs	r2, #2
 80014c0:	499a      	ldr	r1, [pc, #616]	@ (800172c <main+0x2d8>)
 80014c2:	2012      	movs	r0, #18
 80014c4:	f7ff fc8e 	bl	8000de4 <LDC1614_WriteRegister>
  LDC1614_WriteRegister(SETTLECOUNT_CH3, SETTLECOUNT_DEFAULT, 2);
 80014c8:	2202      	movs	r2, #2
 80014ca:	4998      	ldr	r1, [pc, #608]	@ (800172c <main+0x2d8>)
 80014cc:	2013      	movs	r0, #19
 80014ce:	f7ff fc89 	bl	8000de4 <LDC1614_WriteRegister>

  //Frequency divider configuration for the LDC1614
  LDC1614_WriteRegister(LDC1614_CH0_FIN_DIVIDER, DIVIDER_DEFAULT_CH0, 2); // Setting the frequency divider as 12 // F_IN = 1 // Equal to resonance frequency + 10%
 80014d2:	2202      	movs	r2, #2
 80014d4:	4996      	ldr	r1, [pc, #600]	@ (8001730 <main+0x2dc>)
 80014d6:	2014      	movs	r0, #20
 80014d8:	f7ff fc84 	bl	8000de4 <LDC1614_WriteRegister>
  LDC1614_WriteRegister(LDC1614_CH1_FIN_DIVIDER, DIVIDER_DEFAULT_CH1, 2); // Setting the frequency divider as 12 // F_IN = 1 // Equal to resonance frequency + 10%
 80014dc:	2202      	movs	r2, #2
 80014de:	4995      	ldr	r1, [pc, #596]	@ (8001734 <main+0x2e0>)
 80014e0:	2015      	movs	r0, #21
 80014e2:	f7ff fc7f 	bl	8000de4 <LDC1614_WriteRegister>
  LDC1614_WriteRegister(LDC1614_CH2_FIN_DIVIDER, DIVIDER_DEFAULT_CH2, 2); // Setting the frequency divider as 12 // F_IN = 1 // Equal to resonance frequency + 10%
 80014e6:	2202      	movs	r2, #2
 80014e8:	4993      	ldr	r1, [pc, #588]	@ (8001738 <main+0x2e4>)
 80014ea:	2016      	movs	r0, #22
 80014ec:	f7ff fc7a 	bl	8000de4 <LDC1614_WriteRegister>
  LDC1614_WriteRegister(LDC1614_CH3_FIN_DIVIDER, DIVIDER_DEFAULT_CH3, 2); // Setting the frequency divider as 12 // F_IN = 1 // Equal to resonance frequency + 10%
 80014f0:	2202      	movs	r2, #2
 80014f2:	4992      	ldr	r1, [pc, #584]	@ (800173c <main+0x2e8>)
 80014f4:	2017      	movs	r0, #23
 80014f6:	f7ff fc75 	bl	8000de4 <LDC1614_WriteRegister>

  //Clock configuration: Internal clock
  LDC1614_WriteRegister(CONFIG_reg, clk_src, 2);
 80014fa:	2202      	movs	r2, #2
 80014fc:	4990      	ldr	r1, [pc, #576]	@ (8001740 <main+0x2ec>)
 80014fe:	201a      	movs	r0, #26
 8001500:	f7ff fc70 	bl	8000de4 <LDC1614_WriteRegister>

  //Number of channels configuration for the LDC1614 & Deglitch
  LDC1614_WriteRegister(MUX_reg, config_3Channels_3MHz, 2);
 8001504:	2202      	movs	r2, #2
 8001506:	498f      	ldr	r1, [pc, #572]	@ (8001744 <main+0x2f0>)
 8001508:	201b      	movs	r0, #27
 800150a:	f7ff fc6b 	bl	8000de4 <LDC1614_WriteRegister>

  LDC1614_WriteRegister(DRIVE_CURRENT_CH0, DRIVE_CURRENT_DEFAULT, 2);
 800150e:	2202      	movs	r2, #2
 8001510:	498d      	ldr	r1, [pc, #564]	@ (8001748 <main+0x2f4>)
 8001512:	201e      	movs	r0, #30
 8001514:	f7ff fc66 	bl	8000de4 <LDC1614_WriteRegister>
  LDC1614_WriteRegister(DRIVE_CURRENT_CH1, DRIVE_CURRENT_DEFAULT, 2);
 8001518:	2202      	movs	r2, #2
 800151a:	498b      	ldr	r1, [pc, #556]	@ (8001748 <main+0x2f4>)
 800151c:	201f      	movs	r0, #31
 800151e:	f7ff fc61 	bl	8000de4 <LDC1614_WriteRegister>
  LDC1614_WriteRegister(DRIVE_CURRENT_CH2, DRIVE_CURRENT_DEFAULT, 2);
 8001522:	2202      	movs	r2, #2
 8001524:	4988      	ldr	r1, [pc, #544]	@ (8001748 <main+0x2f4>)
 8001526:	2020      	movs	r0, #32
 8001528:	f7ff fc5c 	bl	8000de4 <LDC1614_WriteRegister>
  LDC1614_WriteRegister(DRIVE_CURRENT_CH3, DRIVE_CURRENT_DEFAULT, 2);
 800152c:	2202      	movs	r2, #2
 800152e:	4986      	ldr	r1, [pc, #536]	@ (8001748 <main+0x2f4>)
 8001530:	2021      	movs	r0, #33	@ 0x21
 8001532:	f7ff fc57 	bl	8000de4 <LDC1614_WriteRegister>
  while (1)
  {
    /* USER CODE END WHILE */

    // Read data
    LDC1614_ReadRegister(LDC1614_REG_DATA0_MSB, reg_data_MSB_CH0, 2);
 8001536:	2202      	movs	r2, #2
 8001538:	4984      	ldr	r1, [pc, #528]	@ (800174c <main+0x2f8>)
 800153a:	2000      	movs	r0, #0
 800153c:	f7ff fc36 	bl	8000dac <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_REG_DATA0_LSB, reg_data_LSB_CH0, 2);
 8001540:	2202      	movs	r2, #2
 8001542:	4983      	ldr	r1, [pc, #524]	@ (8001750 <main+0x2fc>)
 8001544:	2001      	movs	r0, #1
 8001546:	f7ff fc31 	bl	8000dac <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_REG_DATA1_MSB, reg_data_MSB_CH1, 2);
 800154a:	2202      	movs	r2, #2
 800154c:	4981      	ldr	r1, [pc, #516]	@ (8001754 <main+0x300>)
 800154e:	2002      	movs	r0, #2
 8001550:	f7ff fc2c 	bl	8000dac <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_REG_DATA1_LSB, reg_data_LSB_CH1, 2);
 8001554:	2202      	movs	r2, #2
 8001556:	4980      	ldr	r1, [pc, #512]	@ (8001758 <main+0x304>)
 8001558:	2003      	movs	r0, #3
 800155a:	f7ff fc27 	bl	8000dac <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_REG_DATA2_MSB, reg_data_MSB_CH2, 2);
 800155e:	2202      	movs	r2, #2
 8001560:	497e      	ldr	r1, [pc, #504]	@ (800175c <main+0x308>)
 8001562:	2004      	movs	r0, #4
 8001564:	f7ff fc22 	bl	8000dac <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_REG_DATA2_LSB, reg_data_LSB_CH2, 2);
 8001568:	2202      	movs	r2, #2
 800156a:	497d      	ldr	r1, [pc, #500]	@ (8001760 <main+0x30c>)
 800156c:	2005      	movs	r0, #5
 800156e:	f7ff fc1d 	bl	8000dac <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_REG_DATA3_MSB, reg_data_MSB_CH3, 2);
 8001572:	2202      	movs	r2, #2
 8001574:	497b      	ldr	r1, [pc, #492]	@ (8001764 <main+0x310>)
 8001576:	2006      	movs	r0, #6
 8001578:	f7ff fc18 	bl	8000dac <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_REG_DATA3_LSB, reg_data_LSB_CH3, 2);
 800157c:	2202      	movs	r2, #2
 800157e:	497a      	ldr	r1, [pc, #488]	@ (8001768 <main+0x314>)
 8001580:	2007      	movs	r0, #7
 8001582:	f7ff fc13 	bl	8000dac <LDC1614_ReadRegister>


    LDC1614_ReadRegister(LDC1614_CH0_OFFSET, reg_CH0_OFFSET, 2);
 8001586:	2202      	movs	r2, #2
 8001588:	4978      	ldr	r1, [pc, #480]	@ (800176c <main+0x318>)
 800158a:	200c      	movs	r0, #12
 800158c:	f7ff fc0e 	bl	8000dac <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_CH1_OFFSET, reg_CH1_OFFSET, 2);
 8001590:	2202      	movs	r2, #2
 8001592:	4977      	ldr	r1, [pc, #476]	@ (8001770 <main+0x31c>)
 8001594:	200d      	movs	r0, #13
 8001596:	f7ff fc09 	bl	8000dac <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_CH2_OFFSET, reg_CH2_OFFSET, 2);
 800159a:	2202      	movs	r2, #2
 800159c:	4975      	ldr	r1, [pc, #468]	@ (8001774 <main+0x320>)
 800159e:	200e      	movs	r0, #14
 80015a0:	f7ff fc04 	bl	8000dac <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_CH3_OFFSET, reg_CH3_OFFSET, 2);
 80015a4:	2202      	movs	r2, #2
 80015a6:	4974      	ldr	r1, [pc, #464]	@ (8001778 <main+0x324>)
 80015a8:	200f      	movs	r0, #15
 80015aa:	f7ff fbff 	bl	8000dac <LDC1614_ReadRegister>

    LDC1614_ReadRegister(LDC1614_CH0_FIN_DIVIDER, reg_CH0_FIN_DIVIDER, 2);
 80015ae:	2202      	movs	r2, #2
 80015b0:	4972      	ldr	r1, [pc, #456]	@ (800177c <main+0x328>)
 80015b2:	2014      	movs	r0, #20
 80015b4:	f7ff fbfa 	bl	8000dac <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_CH1_FIN_DIVIDER, reg_CH1_FIN_DIVIDER, 2);
 80015b8:	2202      	movs	r2, #2
 80015ba:	4971      	ldr	r1, [pc, #452]	@ (8001780 <main+0x32c>)
 80015bc:	2015      	movs	r0, #21
 80015be:	f7ff fbf5 	bl	8000dac <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_CH2_FIN_DIVIDER, reg_CH2_FIN_DIVIDER, 2);
 80015c2:	2202      	movs	r2, #2
 80015c4:	496f      	ldr	r1, [pc, #444]	@ (8001784 <main+0x330>)
 80015c6:	2016      	movs	r0, #22
 80015c8:	f7ff fbf0 	bl	8000dac <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_CH3_FIN_DIVIDER, reg_CH3_FIN_DIVIDER, 2);
 80015cc:	2202      	movs	r2, #2
 80015ce:	496e      	ldr	r1, [pc, #440]	@ (8001788 <main+0x334>)
 80015d0:	2017      	movs	r0, #23
 80015d2:	f7ff fbeb 	bl	8000dac <LDC1614_ReadRegister>

    // Combine the two bytes into a single 16-bit value
    uint16_t MSB_CH0 = (reg_data_MSB_CH0[0] << 8) | reg_data_MSB_CH0[1];
 80015d6:	4b5d      	ldr	r3, [pc, #372]	@ (800174c <main+0x2f8>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	021b      	lsls	r3, r3, #8
 80015dc:	b21a      	sxth	r2, r3
 80015de:	4b5b      	ldr	r3, [pc, #364]	@ (800174c <main+0x2f8>)
 80015e0:	785b      	ldrb	r3, [r3, #1]
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t LSB_CH0= (reg_data_LSB_CH0[0] << 8) | reg_data_LSB_CH0[1];
 80015ea:	4b59      	ldr	r3, [pc, #356]	@ (8001750 <main+0x2fc>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	021b      	lsls	r3, r3, #8
 80015f0:	b21a      	sxth	r2, r3
 80015f2:	4b57      	ldr	r3, [pc, #348]	@ (8001750 <main+0x2fc>)
 80015f4:	785b      	ldrb	r3, [r3, #1]
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t MSB_CH1 = (reg_data_MSB_CH1[0] << 8) | reg_data_MSB_CH1[1];
 80015fe:	4b55      	ldr	r3, [pc, #340]	@ (8001754 <main+0x300>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	b21a      	sxth	r2, r3
 8001606:	4b53      	ldr	r3, [pc, #332]	@ (8001754 <main+0x300>)
 8001608:	785b      	ldrb	r3, [r3, #1]
 800160a:	b21b      	sxth	r3, r3
 800160c:	4313      	orrs	r3, r2
 800160e:	b21b      	sxth	r3, r3
 8001610:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t LSB_CH1= (reg_data_LSB_CH1[0] << 8) | reg_data_LSB_CH1[1];
 8001612:	4b51      	ldr	r3, [pc, #324]	@ (8001758 <main+0x304>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	b21a      	sxth	r2, r3
 800161a:	4b4f      	ldr	r3, [pc, #316]	@ (8001758 <main+0x304>)
 800161c:	785b      	ldrb	r3, [r3, #1]
 800161e:	b21b      	sxth	r3, r3
 8001620:	4313      	orrs	r3, r2
 8001622:	b21b      	sxth	r3, r3
 8001624:	843b      	strh	r3, [r7, #32]
    uint16_t MSB_CH2 = (reg_data_MSB_CH2[0] << 8) | reg_data_MSB_CH2[1];
 8001626:	4b4d      	ldr	r3, [pc, #308]	@ (800175c <main+0x308>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	021b      	lsls	r3, r3, #8
 800162c:	b21a      	sxth	r2, r3
 800162e:	4b4b      	ldr	r3, [pc, #300]	@ (800175c <main+0x308>)
 8001630:	785b      	ldrb	r3, [r3, #1]
 8001632:	b21b      	sxth	r3, r3
 8001634:	4313      	orrs	r3, r2
 8001636:	b21b      	sxth	r3, r3
 8001638:	83fb      	strh	r3, [r7, #30]
    uint16_t LSB_CH2= (reg_data_LSB_CH2[0] << 8) | reg_data_LSB_CH2[1];
 800163a:	4b49      	ldr	r3, [pc, #292]	@ (8001760 <main+0x30c>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	b21a      	sxth	r2, r3
 8001642:	4b47      	ldr	r3, [pc, #284]	@ (8001760 <main+0x30c>)
 8001644:	785b      	ldrb	r3, [r3, #1]
 8001646:	b21b      	sxth	r3, r3
 8001648:	4313      	orrs	r3, r2
 800164a:	b21b      	sxth	r3, r3
 800164c:	83bb      	strh	r3, [r7, #28]
    uint16_t MSB_CH3 = (reg_data_MSB_CH3[0] << 8) | reg_data_MSB_CH3[1];
 800164e:	4b45      	ldr	r3, [pc, #276]	@ (8001764 <main+0x310>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	b21a      	sxth	r2, r3
 8001656:	4b43      	ldr	r3, [pc, #268]	@ (8001764 <main+0x310>)
 8001658:	785b      	ldrb	r3, [r3, #1]
 800165a:	b21b      	sxth	r3, r3
 800165c:	4313      	orrs	r3, r2
 800165e:	b21b      	sxth	r3, r3
 8001660:	837b      	strh	r3, [r7, #26]
    uint16_t LSB_CH3= (reg_data_LSB_CH3[0] << 8) | reg_data_LSB_CH3[1];
 8001662:	4b41      	ldr	r3, [pc, #260]	@ (8001768 <main+0x314>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	021b      	lsls	r3, r3, #8
 8001668:	b21a      	sxth	r2, r3
 800166a:	4b3f      	ldr	r3, [pc, #252]	@ (8001768 <main+0x314>)
 800166c:	785b      	ldrb	r3, [r3, #1]
 800166e:	b21b      	sxth	r3, r3
 8001670:	4313      	orrs	r3, r2
 8001672:	b21b      	sxth	r3, r3
 8001674:	833b      	strh	r3, [r7, #24]

    uint16_t CH0_OFFSET= (reg_CH0_OFFSET[0] << 8) | reg_CH0_OFFSET[1];
 8001676:	4b3d      	ldr	r3, [pc, #244]	@ (800176c <main+0x318>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	021b      	lsls	r3, r3, #8
 800167c:	b21a      	sxth	r2, r3
 800167e:	4b3b      	ldr	r3, [pc, #236]	@ (800176c <main+0x318>)
 8001680:	785b      	ldrb	r3, [r3, #1]
 8001682:	b21b      	sxth	r3, r3
 8001684:	4313      	orrs	r3, r2
 8001686:	b21b      	sxth	r3, r3
 8001688:	82fb      	strh	r3, [r7, #22]
    uint16_t CH1_OFFSET= (reg_CH1_OFFSET[0] << 8) | reg_CH1_OFFSET[1];
 800168a:	4b39      	ldr	r3, [pc, #228]	@ (8001770 <main+0x31c>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	b21a      	sxth	r2, r3
 8001692:	4b37      	ldr	r3, [pc, #220]	@ (8001770 <main+0x31c>)
 8001694:	785b      	ldrb	r3, [r3, #1]
 8001696:	b21b      	sxth	r3, r3
 8001698:	4313      	orrs	r3, r2
 800169a:	b21b      	sxth	r3, r3
 800169c:	82bb      	strh	r3, [r7, #20]
    uint16_t CH2_OFFSET= (reg_CH2_OFFSET[0] << 8) | reg_CH2_OFFSET[1];
 800169e:	4b35      	ldr	r3, [pc, #212]	@ (8001774 <main+0x320>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	b21a      	sxth	r2, r3
 80016a6:	4b33      	ldr	r3, [pc, #204]	@ (8001774 <main+0x320>)
 80016a8:	785b      	ldrb	r3, [r3, #1]
 80016aa:	b21b      	sxth	r3, r3
 80016ac:	4313      	orrs	r3, r2
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	827b      	strh	r3, [r7, #18]
    uint16_t CH3_OFFSET= (reg_CH3_OFFSET[0] << 8) | reg_CH3_OFFSET[1];
 80016b2:	4b31      	ldr	r3, [pc, #196]	@ (8001778 <main+0x324>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	b21a      	sxth	r2, r3
 80016ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001778 <main+0x324>)
 80016bc:	785b      	ldrb	r3, [r3, #1]
 80016be:	b21b      	sxth	r3, r3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	b21b      	sxth	r3, r3
 80016c4:	823b      	strh	r3, [r7, #16]

    uint16_t CH0_FIN_DIVIDER= (reg_CH0_FIN_DIVIDER[0] << 8) | reg_CH0_FIN_DIVIDER[1];
 80016c6:	4b2d      	ldr	r3, [pc, #180]	@ (800177c <main+0x328>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	021b      	lsls	r3, r3, #8
 80016cc:	b21a      	sxth	r2, r3
 80016ce:	4b2b      	ldr	r3, [pc, #172]	@ (800177c <main+0x328>)
 80016d0:	785b      	ldrb	r3, [r3, #1]
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	4313      	orrs	r3, r2
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	81fb      	strh	r3, [r7, #14]
    uint16_t CH1_FIN_DIVIDER= (reg_CH1_FIN_DIVIDER[0] << 8) | reg_CH1_FIN_DIVIDER[1];
 80016da:	4b29      	ldr	r3, [pc, #164]	@ (8001780 <main+0x32c>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	b21a      	sxth	r2, r3
 80016e2:	4b27      	ldr	r3, [pc, #156]	@ (8001780 <main+0x32c>)
 80016e4:	785b      	ldrb	r3, [r3, #1]
 80016e6:	b21b      	sxth	r3, r3
 80016e8:	4313      	orrs	r3, r2
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	81bb      	strh	r3, [r7, #12]
    uint16_t CH2_FIN_DIVIDER= (reg_CH2_FIN_DIVIDER[0] << 8) | reg_CH2_FIN_DIVIDER[1];
 80016ee:	4b25      	ldr	r3, [pc, #148]	@ (8001784 <main+0x330>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	b21a      	sxth	r2, r3
 80016f6:	4b23      	ldr	r3, [pc, #140]	@ (8001784 <main+0x330>)
 80016f8:	785b      	ldrb	r3, [r3, #1]
 80016fa:	b21b      	sxth	r3, r3
 80016fc:	4313      	orrs	r3, r2
 80016fe:	b21b      	sxth	r3, r3
 8001700:	817b      	strh	r3, [r7, #10]
    uint16_t CH3_FIN_DIVIDER= (reg_CH3_FIN_DIVIDER[0] << 8) | reg_CH3_FIN_DIVIDER[1];
 8001702:	4b21      	ldr	r3, [pc, #132]	@ (8001788 <main+0x334>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	b21a      	sxth	r2, r3
 800170a:	4b1f      	ldr	r3, [pc, #124]	@ (8001788 <main+0x334>)
 800170c:	785b      	ldrb	r3, [r3, #1]
 800170e:	b21b      	sxth	r3, r3
 8001710:	4313      	orrs	r3, r2
 8001712:	b21b      	sxth	r3, r3
 8001714:	813b      	strh	r3, [r7, #8]


    // Data transform for output LED
    int integerValue_MSB_CH0 = hex_to_dec(MSB_CH0);
 8001716:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fb7f 	bl	8000e1c <hex_to_dec>
 800171e:	e035      	b.n	800178c <main+0x338>
 8001720:	20000010 	.word	0x20000010
 8001724:	2000017c 	.word	0x2000017c
 8001728:	20000004 	.word	0x20000004
 800172c:	20000008 	.word	0x20000008
 8001730:	20000014 	.word	0x20000014
 8001734:	20000018 	.word	0x20000018
 8001738:	2000001c 	.word	0x2000001c
 800173c:	20000020 	.word	0x20000020
 8001740:	2000000c 	.word	0x2000000c
 8001744:	20000000 	.word	0x20000000
 8001748:	20000024 	.word	0x20000024
 800174c:	2000013c 	.word	0x2000013c
 8001750:	20000140 	.word	0x20000140
 8001754:	20000144 	.word	0x20000144
 8001758:	20000148 	.word	0x20000148
 800175c:	2000014c 	.word	0x2000014c
 8001760:	20000150 	.word	0x20000150
 8001764:	20000154 	.word	0x20000154
 8001768:	20000158 	.word	0x20000158
 800176c:	2000015c 	.word	0x2000015c
 8001770:	20000160 	.word	0x20000160
 8001774:	20000164 	.word	0x20000164
 8001778:	20000168 	.word	0x20000168
 800177c:	2000016c 	.word	0x2000016c
 8001780:	20000170 	.word	0x20000170
 8001784:	20000174 	.word	0x20000174
 8001788:	20000178 	.word	0x20000178
 800178c:	6078      	str	r0, [r7, #4]
    int integerValue_MSB_CH1 = hex_to_dec(MSB_CH1);
 800178e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fb43 	bl	8000e1c <hex_to_dec>
 8001796:	6038      	str	r0, [r7, #0]

    // Transmit the register value via UART
    Transmit_Data(MSB_CH0, LSB_CH0, CH0_FIN_DIVIDER, CH0_OFFSET, MSB_CH1, LSB_CH1, CH1_FIN_DIVIDER, CH1_OFFSET, MSB_CH2, LSB_CH2, CH2_FIN_DIVIDER, CH2_OFFSET, MSB_CH3, LSB_CH3, CH3_FIN_DIVIDER, CH3_OFFSET);
 8001798:	8afc      	ldrh	r4, [r7, #22]
 800179a:	89fa      	ldrh	r2, [r7, #14]
 800179c:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800179e:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 80017a0:	8a3b      	ldrh	r3, [r7, #16]
 80017a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80017a4:	893b      	ldrh	r3, [r7, #8]
 80017a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80017a8:	8b3b      	ldrh	r3, [r7, #24]
 80017aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80017ac:	8b7b      	ldrh	r3, [r7, #26]
 80017ae:	9308      	str	r3, [sp, #32]
 80017b0:	8a7b      	ldrh	r3, [r7, #18]
 80017b2:	9307      	str	r3, [sp, #28]
 80017b4:	897b      	ldrh	r3, [r7, #10]
 80017b6:	9306      	str	r3, [sp, #24]
 80017b8:	8bbb      	ldrh	r3, [r7, #28]
 80017ba:	9305      	str	r3, [sp, #20]
 80017bc:	8bfb      	ldrh	r3, [r7, #30]
 80017be:	9304      	str	r3, [sp, #16]
 80017c0:	8abb      	ldrh	r3, [r7, #20]
 80017c2:	9303      	str	r3, [sp, #12]
 80017c4:	89bb      	ldrh	r3, [r7, #12]
 80017c6:	9302      	str	r3, [sp, #8]
 80017c8:	8c3b      	ldrh	r3, [r7, #32]
 80017ca:	9301      	str	r3, [sp, #4]
 80017cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	4623      	mov	r3, r4
 80017d2:	f7ff fc1b 	bl	800100c <Transmit_Data>

    if (integerValue_MSB_CH0 > 3700 || integerValue_MSB_CH1 > 3700 ){
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f640 6274 	movw	r2, #3700	@ 0xe74
 80017dc:	4293      	cmp	r3, r2
 80017de:	dc04      	bgt.n	80017ea <main+0x396>
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	f640 6274 	movw	r2, #3700	@ 0xe74
 80017e6:	4293      	cmp	r3, r2
 80017e8:	dd05      	ble.n	80017f6 <main+0x3a2>
    	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80017ea:	2201      	movs	r2, #1
 80017ec:	2120      	movs	r1, #32
 80017ee:	4806      	ldr	r0, [pc, #24]	@ (8001808 <main+0x3b4>)
 80017f0:	f000 fd9e 	bl	8002330 <HAL_GPIO_WritePin>
 80017f4:	e004      	b.n	8001800 <main+0x3ac>
    }else{
    	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2120      	movs	r1, #32
 80017fa:	4803      	ldr	r0, [pc, #12]	@ (8001808 <main+0x3b4>)
 80017fc:	f000 fd98 	bl	8002330 <HAL_GPIO_WritePin>
    };
    // Add a delay or condition to control the transmission frequency


    HAL_Delay(100);  // Delay for 1 second, adjust as needed
 8001800:	2064      	movs	r0, #100	@ 0x64
 8001802:	f000 fb07 	bl	8001e14 <HAL_Delay>
  {
 8001806:	e696      	b.n	8001536 <main+0xe2>
 8001808:	40020000 	.word	0x40020000

0800180c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b094      	sub	sp, #80	@ 0x50
 8001810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001812:	f107 0320 	add.w	r3, r7, #32
 8001816:	2230      	movs	r2, #48	@ 0x30
 8001818:	2100      	movs	r1, #0
 800181a:	4618      	mov	r0, r3
 800181c:	f002 ff22 	bl	8004664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001830:	2300      	movs	r3, #0
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	4b29      	ldr	r3, [pc, #164]	@ (80018dc <SystemClock_Config+0xd0>)
 8001836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001838:	4a28      	ldr	r2, [pc, #160]	@ (80018dc <SystemClock_Config+0xd0>)
 800183a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800183e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001840:	4b26      	ldr	r3, [pc, #152]	@ (80018dc <SystemClock_Config+0xd0>)
 8001842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001844:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800184c:	2300      	movs	r3, #0
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	4b23      	ldr	r3, [pc, #140]	@ (80018e0 <SystemClock_Config+0xd4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001858:	4a21      	ldr	r2, [pc, #132]	@ (80018e0 <SystemClock_Config+0xd4>)
 800185a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	4b1f      	ldr	r3, [pc, #124]	@ (80018e0 <SystemClock_Config+0xd4>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800186c:	2302      	movs	r3, #2
 800186e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001870:	2301      	movs	r3, #1
 8001872:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001874:	2310      	movs	r3, #16
 8001876:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001878:	2302      	movs	r3, #2
 800187a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800187c:	2300      	movs	r3, #0
 800187e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001880:	2310      	movs	r3, #16
 8001882:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001884:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001888:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800188a:	2304      	movs	r3, #4
 800188c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800188e:	2307      	movs	r3, #7
 8001890:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001892:	f107 0320 	add.w	r3, r7, #32
 8001896:	4618      	mov	r0, r3
 8001898:	f001 fd88 	bl	80033ac <HAL_RCC_OscConfig>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018a2:	f000 f8e5 	bl	8001a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a6:	230f      	movs	r3, #15
 80018a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018aa:	2302      	movs	r3, #2
 80018ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018bc:	f107 030c 	add.w	r3, r7, #12
 80018c0:	2102      	movs	r1, #2
 80018c2:	4618      	mov	r0, r3
 80018c4:	f001 ffea 	bl	800389c <HAL_RCC_ClockConfig>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80018ce:	f000 f8cf 	bl	8001a70 <Error_Handler>
  }
}
 80018d2:	bf00      	nop
 80018d4:	3750      	adds	r7, #80	@ 0x50
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40007000 	.word	0x40007000

080018e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 80018e8:	4b12      	ldr	r3, [pc, #72]	@ (8001934 <MX_I2C1_Init+0x50>)
 80018ea:	4a13      	ldr	r2, [pc, #76]	@ (8001938 <MX_I2C1_Init+0x54>)
 80018ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018ee:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <MX_I2C1_Init+0x50>)
 80018f0:	4a12      	ldr	r2, [pc, #72]	@ (800193c <MX_I2C1_Init+0x58>)
 80018f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001934 <MX_I2C1_Init+0x50>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001934 <MX_I2C1_Init+0x50>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001900:	4b0c      	ldr	r3, [pc, #48]	@ (8001934 <MX_I2C1_Init+0x50>)
 8001902:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001906:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001908:	4b0a      	ldr	r3, [pc, #40]	@ (8001934 <MX_I2C1_Init+0x50>)
 800190a:	2200      	movs	r2, #0
 800190c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800190e:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <MX_I2C1_Init+0x50>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001914:	4b07      	ldr	r3, [pc, #28]	@ (8001934 <MX_I2C1_Init+0x50>)
 8001916:	2200      	movs	r2, #0
 8001918:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800191a:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <MX_I2C1_Init+0x50>)
 800191c:	2200      	movs	r2, #0
 800191e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001920:	4804      	ldr	r0, [pc, #16]	@ (8001934 <MX_I2C1_Init+0x50>)
 8001922:	f000 fd1f 	bl	8002364 <HAL_I2C_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800192c:	f000 f8a0 	bl	8001a70 <Error_Handler>
  }
}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	200000a0 	.word	0x200000a0
 8001938:	40005400 	.word	0x40005400
 800193c:	000186a0 	.word	0x000186a0

08001940 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001944:	4b11      	ldr	r3, [pc, #68]	@ (800198c <MX_USART2_UART_Init+0x4c>)
 8001946:	4a12      	ldr	r2, [pc, #72]	@ (8001990 <MX_USART2_UART_Init+0x50>)
 8001948:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800194a:	4b10      	ldr	r3, [pc, #64]	@ (800198c <MX_USART2_UART_Init+0x4c>)
 800194c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001950:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001952:	4b0e      	ldr	r3, [pc, #56]	@ (800198c <MX_USART2_UART_Init+0x4c>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001958:	4b0c      	ldr	r3, [pc, #48]	@ (800198c <MX_USART2_UART_Init+0x4c>)
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800195e:	4b0b      	ldr	r3, [pc, #44]	@ (800198c <MX_USART2_UART_Init+0x4c>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001964:	4b09      	ldr	r3, [pc, #36]	@ (800198c <MX_USART2_UART_Init+0x4c>)
 8001966:	220c      	movs	r2, #12
 8001968:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800196a:	4b08      	ldr	r3, [pc, #32]	@ (800198c <MX_USART2_UART_Init+0x4c>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001970:	4b06      	ldr	r3, [pc, #24]	@ (800198c <MX_USART2_UART_Init+0x4c>)
 8001972:	2200      	movs	r2, #0
 8001974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001976:	4805      	ldr	r0, [pc, #20]	@ (800198c <MX_USART2_UART_Init+0x4c>)
 8001978:	f002 f9b0 	bl	8003cdc <HAL_UART_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001982:	f000 f875 	bl	8001a70 <Error_Handler>
  }
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200000f4 	.word	0x200000f4
 8001990:	40004400 	.word	0x40004400

08001994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08a      	sub	sp, #40	@ 0x28
 8001998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001a64 <MX_GPIO_Init+0xd0>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	4a2c      	ldr	r2, [pc, #176]	@ (8001a64 <MX_GPIO_Init+0xd0>)
 80019b4:	f043 0304 	orr.w	r3, r3, #4
 80019b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001a64 <MX_GPIO_Init+0xd0>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b26      	ldr	r3, [pc, #152]	@ (8001a64 <MX_GPIO_Init+0xd0>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	4a25      	ldr	r2, [pc, #148]	@ (8001a64 <MX_GPIO_Init+0xd0>)
 80019d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d6:	4b23      	ldr	r3, [pc, #140]	@ (8001a64 <MX_GPIO_Init+0xd0>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a64 <MX_GPIO_Init+0xd0>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001a64 <MX_GPIO_Init+0xd0>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a64 <MX_GPIO_Init+0xd0>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	607b      	str	r3, [r7, #4]
 8001a02:	4b18      	ldr	r3, [pc, #96]	@ (8001a64 <MX_GPIO_Init+0xd0>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	4a17      	ldr	r2, [pc, #92]	@ (8001a64 <MX_GPIO_Init+0xd0>)
 8001a08:	f043 0302 	orr.w	r3, r3, #2
 8001a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0e:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <MX_GPIO_Init+0xd0>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2120      	movs	r1, #32
 8001a1e:	4812      	ldr	r0, [pc, #72]	@ (8001a68 <MX_GPIO_Init+0xd4>)
 8001a20:	f000 fc86 	bl	8002330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a2a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	4619      	mov	r1, r3
 8001a3a:	480c      	ldr	r0, [pc, #48]	@ (8001a6c <MX_GPIO_Init+0xd8>)
 8001a3c:	f000 faf4 	bl	8002028 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a40:	2320      	movs	r3, #32
 8001a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a44:	2301      	movs	r3, #1
 8001a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	4619      	mov	r1, r3
 8001a56:	4804      	ldr	r0, [pc, #16]	@ (8001a68 <MX_GPIO_Init+0xd4>)
 8001a58:	f000 fae6 	bl	8002028 <HAL_GPIO_Init>
}
 8001a5c:	bf00      	nop
 8001a5e:	3728      	adds	r7, #40	@ 0x28
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40020000 	.word	0x40020000
 8001a6c:	40020800 	.word	0x40020800

08001a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a74:	b672      	cpsid	i
}
 8001a76:	bf00      	nop
  __disable_irq();
  while (1)
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <Error_Handler+0x8>

08001a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	4b10      	ldr	r3, [pc, #64]	@ (8001ac8 <HAL_MspInit+0x4c>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8a:	4a0f      	ldr	r2, [pc, #60]	@ (8001ac8 <HAL_MspInit+0x4c>)
 8001a8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a92:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac8 <HAL_MspInit+0x4c>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	603b      	str	r3, [r7, #0]
 8001aa2:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <HAL_MspInit+0x4c>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	4a08      	ldr	r2, [pc, #32]	@ (8001ac8 <HAL_MspInit+0x4c>)
 8001aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aae:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <HAL_MspInit+0x4c>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001aba:	2007      	movs	r0, #7
 8001abc:	f000 fa80 	bl	8001fc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40023800 	.word	0x40023800

08001acc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	@ 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a19      	ldr	r2, [pc, #100]	@ (8001b50 <HAL_I2C_MspInit+0x84>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d12b      	bne.n	8001b46 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	4b18      	ldr	r3, [pc, #96]	@ (8001b54 <HAL_I2C_MspInit+0x88>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	4a17      	ldr	r2, [pc, #92]	@ (8001b54 <HAL_I2C_MspInit+0x88>)
 8001af8:	f043 0302 	orr.w	r3, r3, #2
 8001afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afe:	4b15      	ldr	r3, [pc, #84]	@ (8001b54 <HAL_I2C_MspInit+0x88>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b0a:	23c0      	movs	r3, #192	@ 0xc0
 8001b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b0e:	2312      	movs	r3, #18
 8001b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b16:	2303      	movs	r3, #3
 8001b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	480c      	ldr	r0, [pc, #48]	@ (8001b58 <HAL_I2C_MspInit+0x8c>)
 8001b26:	f000 fa7f 	bl	8002028 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	4b09      	ldr	r3, [pc, #36]	@ (8001b54 <HAL_I2C_MspInit+0x88>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b32:	4a08      	ldr	r2, [pc, #32]	@ (8001b54 <HAL_I2C_MspInit+0x88>)
 8001b34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b3a:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <HAL_I2C_MspInit+0x88>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001b46:	bf00      	nop
 8001b48:	3728      	adds	r7, #40	@ 0x28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40005400 	.word	0x40005400
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020400 	.word	0x40020400

08001b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	@ 0x28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a19      	ldr	r2, [pc, #100]	@ (8001be0 <HAL_UART_MspInit+0x84>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d12b      	bne.n	8001bd6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	4b18      	ldr	r3, [pc, #96]	@ (8001be4 <HAL_UART_MspInit+0x88>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	4a17      	ldr	r2, [pc, #92]	@ (8001be4 <HAL_UART_MspInit+0x88>)
 8001b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b8e:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <HAL_UART_MspInit+0x88>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <HAL_UART_MspInit+0x88>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	4a10      	ldr	r2, [pc, #64]	@ (8001be4 <HAL_UART_MspInit+0x88>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001baa:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <HAL_UART_MspInit+0x88>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bb6:	230c      	movs	r3, #12
 8001bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bc6:	2307      	movs	r3, #7
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4805      	ldr	r0, [pc, #20]	@ (8001be8 <HAL_UART_MspInit+0x8c>)
 8001bd2:	f000 fa29 	bl	8002028 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001bd6:	bf00      	nop
 8001bd8:	3728      	adds	r7, #40	@ 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40004400 	.word	0x40004400
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020000 	.word	0x40020000

08001bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <NMI_Handler+0x4>

08001bf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <HardFault_Handler+0x4>

08001bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <MemManage_Handler+0x4>

08001c04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <BusFault_Handler+0x4>

08001c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <UsageFault_Handler+0x4>

08001c14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c42:	f000 f8c7 	bl	8001dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c54:	4a14      	ldr	r2, [pc, #80]	@ (8001ca8 <_sbrk+0x5c>)
 8001c56:	4b15      	ldr	r3, [pc, #84]	@ (8001cac <_sbrk+0x60>)
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c60:	4b13      	ldr	r3, [pc, #76]	@ (8001cb0 <_sbrk+0x64>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d102      	bne.n	8001c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c68:	4b11      	ldr	r3, [pc, #68]	@ (8001cb0 <_sbrk+0x64>)
 8001c6a:	4a12      	ldr	r2, [pc, #72]	@ (8001cb4 <_sbrk+0x68>)
 8001c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c6e:	4b10      	ldr	r3, [pc, #64]	@ (8001cb0 <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d207      	bcs.n	8001c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c7c:	f002 fcfa 	bl	8004674 <__errno>
 8001c80:	4603      	mov	r3, r0
 8001c82:	220c      	movs	r2, #12
 8001c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c86:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8a:	e009      	b.n	8001ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c8c:	4b08      	ldr	r3, [pc, #32]	@ (8001cb0 <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c92:	4b07      	ldr	r3, [pc, #28]	@ (8001cb0 <_sbrk+0x64>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	4a05      	ldr	r2, [pc, #20]	@ (8001cb0 <_sbrk+0x64>)
 8001c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20018000 	.word	0x20018000
 8001cac:	00000400 	.word	0x00000400
 8001cb0:	20000184 	.word	0x20000184
 8001cb4:	200002d8 	.word	0x200002d8

08001cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cbc:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <SystemInit+0x20>)
 8001cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cc2:	4a05      	ldr	r2, [pc, #20]	@ (8001cd8 <SystemInit+0x20>)
 8001cc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ce0:	f7ff ffea 	bl	8001cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ce4:	480c      	ldr	r0, [pc, #48]	@ (8001d18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ce6:	490d      	ldr	r1, [pc, #52]	@ (8001d1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cec:	e002      	b.n	8001cf4 <LoopCopyDataInit>

08001cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cf2:	3304      	adds	r3, #4

08001cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf8:	d3f9      	bcc.n	8001cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001d24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cfc:	4c0a      	ldr	r4, [pc, #40]	@ (8001d28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d00:	e001      	b.n	8001d06 <LoopFillZerobss>

08001d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d04:	3204      	adds	r2, #4

08001d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d08:	d3fb      	bcc.n	8001d02 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001d0a:	f002 fcb9 	bl	8004680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d0e:	f7ff fba1 	bl	8001454 <main>
  bx  lr    
 8001d12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d1c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001d20:	080051ac 	.word	0x080051ac
  ldr r2, =_sbss
 8001d24:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001d28:	200002d4 	.word	0x200002d4

08001d2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d2c:	e7fe      	b.n	8001d2c <ADC_IRQHandler>
	...

08001d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d34:	4b0e      	ldr	r3, [pc, #56]	@ (8001d70 <HAL_Init+0x40>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a0d      	ldr	r2, [pc, #52]	@ (8001d70 <HAL_Init+0x40>)
 8001d3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d40:	4b0b      	ldr	r3, [pc, #44]	@ (8001d70 <HAL_Init+0x40>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a0a      	ldr	r2, [pc, #40]	@ (8001d70 <HAL_Init+0x40>)
 8001d46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d4c:	4b08      	ldr	r3, [pc, #32]	@ (8001d70 <HAL_Init+0x40>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a07      	ldr	r2, [pc, #28]	@ (8001d70 <HAL_Init+0x40>)
 8001d52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d58:	2003      	movs	r0, #3
 8001d5a:	f000 f931 	bl	8001fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f000 f808 	bl	8001d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d64:	f7ff fe8a 	bl	8001a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40023c00 	.word	0x40023c00

08001d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d7c:	4b12      	ldr	r3, [pc, #72]	@ (8001dc8 <HAL_InitTick+0x54>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b12      	ldr	r3, [pc, #72]	@ (8001dcc <HAL_InitTick+0x58>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4619      	mov	r1, r3
 8001d86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 f93b 	bl	800200e <HAL_SYSTICK_Config>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e00e      	b.n	8001dc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b0f      	cmp	r3, #15
 8001da6:	d80a      	bhi.n	8001dbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da8:	2200      	movs	r2, #0
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295
 8001db0:	f000 f911 	bl	8001fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001db4:	4a06      	ldr	r2, [pc, #24]	@ (8001dd0 <HAL_InitTick+0x5c>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e000      	b.n	8001dc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000028 	.word	0x20000028
 8001dcc:	20000030 	.word	0x20000030
 8001dd0:	2000002c 	.word	0x2000002c

08001dd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <HAL_IncTick+0x20>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b06      	ldr	r3, [pc, #24]	@ (8001df8 <HAL_IncTick+0x24>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4413      	add	r3, r2
 8001de4:	4a04      	ldr	r2, [pc, #16]	@ (8001df8 <HAL_IncTick+0x24>)
 8001de6:	6013      	str	r3, [r2, #0]
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	20000030 	.word	0x20000030
 8001df8:	20000188 	.word	0x20000188

08001dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001e00:	4b03      	ldr	r3, [pc, #12]	@ (8001e10 <HAL_GetTick+0x14>)
 8001e02:	681b      	ldr	r3, [r3, #0]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	20000188 	.word	0x20000188

08001e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e1c:	f7ff ffee 	bl	8001dfc <HAL_GetTick>
 8001e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2c:	d005      	beq.n	8001e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e58 <HAL_Delay+0x44>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4413      	add	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e3a:	bf00      	nop
 8001e3c:	f7ff ffde 	bl	8001dfc <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d8f7      	bhi.n	8001e3c <HAL_Delay+0x28>
  {
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	bf00      	nop
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000030 	.word	0x20000030

08001e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e8e:	4a04      	ldr	r2, [pc, #16]	@ (8001ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	60d3      	str	r3, [r2, #12]
}
 8001e94:	bf00      	nop
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea8:	4b04      	ldr	r3, [pc, #16]	@ (8001ebc <__NVIC_GetPriorityGrouping+0x18>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	0a1b      	lsrs	r3, r3, #8
 8001eae:	f003 0307 	and.w	r3, r3, #7
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	6039      	str	r1, [r7, #0]
 8001eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	db0a      	blt.n	8001eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	490c      	ldr	r1, [pc, #48]	@ (8001f0c <__NVIC_SetPriority+0x4c>)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	0112      	lsls	r2, r2, #4
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee8:	e00a      	b.n	8001f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4908      	ldr	r1, [pc, #32]	@ (8001f10 <__NVIC_SetPriority+0x50>)
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	3b04      	subs	r3, #4
 8001ef8:	0112      	lsls	r2, r2, #4
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	440b      	add	r3, r1
 8001efe:	761a      	strb	r2, [r3, #24]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000e100 	.word	0xe000e100
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	@ 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f1c3 0307 	rsb	r3, r3, #7
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	bf28      	it	cs
 8001f32:	2304      	movcs	r3, #4
 8001f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	2b06      	cmp	r3, #6
 8001f3c:	d902      	bls.n	8001f44 <NVIC_EncodePriority+0x30>
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3b03      	subs	r3, #3
 8001f42:	e000      	b.n	8001f46 <NVIC_EncodePriority+0x32>
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43da      	mvns	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	401a      	ands	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	43d9      	mvns	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	4313      	orrs	r3, r2
         );
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3724      	adds	r7, #36	@ 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f8c:	d301      	bcc.n	8001f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00f      	b.n	8001fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f92:	4a0a      	ldr	r2, [pc, #40]	@ (8001fbc <SysTick_Config+0x40>)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f7ff ff8e 	bl	8001ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa4:	4b05      	ldr	r3, [pc, #20]	@ (8001fbc <SysTick_Config+0x40>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001faa:	4b04      	ldr	r3, [pc, #16]	@ (8001fbc <SysTick_Config+0x40>)
 8001fac:	2207      	movs	r2, #7
 8001fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	e000e010 	.word	0xe000e010

08001fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff47 	bl	8001e5c <__NVIC_SetPriorityGrouping>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	4603      	mov	r3, r0
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe8:	f7ff ff5c 	bl	8001ea4 <__NVIC_GetPriorityGrouping>
 8001fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	6978      	ldr	r0, [r7, #20]
 8001ff4:	f7ff ff8e 	bl	8001f14 <NVIC_EncodePriority>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff5d 	bl	8001ec0 <__NVIC_SetPriority>
}
 8002006:	bf00      	nop
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff ffb0 	bl	8001f7c <SysTick_Config>
 800201c:	4603      	mov	r3, r0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002028:	b480      	push	{r7}
 800202a:	b089      	sub	sp, #36	@ 0x24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
 8002042:	e159      	b.n	80022f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002044:	2201      	movs	r2, #1
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	429a      	cmp	r2, r3
 800205e:	f040 8148 	bne.w	80022f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	2b01      	cmp	r3, #1
 800206c:	d005      	beq.n	800207a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002076:	2b02      	cmp	r3, #2
 8002078:	d130      	bne.n	80020dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	2203      	movs	r2, #3
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b0:	2201      	movs	r2, #1
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	091b      	lsrs	r3, r3, #4
 80020c6:	f003 0201 	and.w	r2, r3, #1
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d017      	beq.n	8002118 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d123      	bne.n	800216c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	08da      	lsrs	r2, r3, #3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3208      	adds	r2, #8
 800212c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002130:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	220f      	movs	r2, #15
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	08da      	lsrs	r2, r3, #3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3208      	adds	r2, #8
 8002166:	69b9      	ldr	r1, [r7, #24]
 8002168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	2203      	movs	r2, #3
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0203 	and.w	r2, r3, #3
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 80a2 	beq.w	80022f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	4b57      	ldr	r3, [pc, #348]	@ (8002310 <HAL_GPIO_Init+0x2e8>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b6:	4a56      	ldr	r2, [pc, #344]	@ (8002310 <HAL_GPIO_Init+0x2e8>)
 80021b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80021be:	4b54      	ldr	r3, [pc, #336]	@ (8002310 <HAL_GPIO_Init+0x2e8>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ca:	4a52      	ldr	r2, [pc, #328]	@ (8002314 <HAL_GPIO_Init+0x2ec>)
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	089b      	lsrs	r3, r3, #2
 80021d0:	3302      	adds	r3, #2
 80021d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	220f      	movs	r2, #15
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a49      	ldr	r2, [pc, #292]	@ (8002318 <HAL_GPIO_Init+0x2f0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d019      	beq.n	800222a <HAL_GPIO_Init+0x202>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a48      	ldr	r2, [pc, #288]	@ (800231c <HAL_GPIO_Init+0x2f4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d013      	beq.n	8002226 <HAL_GPIO_Init+0x1fe>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a47      	ldr	r2, [pc, #284]	@ (8002320 <HAL_GPIO_Init+0x2f8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d00d      	beq.n	8002222 <HAL_GPIO_Init+0x1fa>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a46      	ldr	r2, [pc, #280]	@ (8002324 <HAL_GPIO_Init+0x2fc>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d007      	beq.n	800221e <HAL_GPIO_Init+0x1f6>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a45      	ldr	r2, [pc, #276]	@ (8002328 <HAL_GPIO_Init+0x300>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d101      	bne.n	800221a <HAL_GPIO_Init+0x1f2>
 8002216:	2304      	movs	r3, #4
 8002218:	e008      	b.n	800222c <HAL_GPIO_Init+0x204>
 800221a:	2307      	movs	r3, #7
 800221c:	e006      	b.n	800222c <HAL_GPIO_Init+0x204>
 800221e:	2303      	movs	r3, #3
 8002220:	e004      	b.n	800222c <HAL_GPIO_Init+0x204>
 8002222:	2302      	movs	r3, #2
 8002224:	e002      	b.n	800222c <HAL_GPIO_Init+0x204>
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <HAL_GPIO_Init+0x204>
 800222a:	2300      	movs	r3, #0
 800222c:	69fa      	ldr	r2, [r7, #28]
 800222e:	f002 0203 	and.w	r2, r2, #3
 8002232:	0092      	lsls	r2, r2, #2
 8002234:	4093      	lsls	r3, r2
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800223c:	4935      	ldr	r1, [pc, #212]	@ (8002314 <HAL_GPIO_Init+0x2ec>)
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	089b      	lsrs	r3, r3, #2
 8002242:	3302      	adds	r3, #2
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800224a:	4b38      	ldr	r3, [pc, #224]	@ (800232c <HAL_GPIO_Init+0x304>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800226e:	4a2f      	ldr	r2, [pc, #188]	@ (800232c <HAL_GPIO_Init+0x304>)
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002274:	4b2d      	ldr	r3, [pc, #180]	@ (800232c <HAL_GPIO_Init+0x304>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002298:	4a24      	ldr	r2, [pc, #144]	@ (800232c <HAL_GPIO_Init+0x304>)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800229e:	4b23      	ldr	r3, [pc, #140]	@ (800232c <HAL_GPIO_Init+0x304>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	43db      	mvns	r3, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4013      	ands	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022c2:	4a1a      	ldr	r2, [pc, #104]	@ (800232c <HAL_GPIO_Init+0x304>)
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022c8:	4b18      	ldr	r3, [pc, #96]	@ (800232c <HAL_GPIO_Init+0x304>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022ec:	4a0f      	ldr	r2, [pc, #60]	@ (800232c <HAL_GPIO_Init+0x304>)
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	3301      	adds	r3, #1
 80022f6:	61fb      	str	r3, [r7, #28]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	2b0f      	cmp	r3, #15
 80022fc:	f67f aea2 	bls.w	8002044 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002300:	bf00      	nop
 8002302:	bf00      	nop
 8002304:	3724      	adds	r7, #36	@ 0x24
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40023800 	.word	0x40023800
 8002314:	40013800 	.word	0x40013800
 8002318:	40020000 	.word	0x40020000
 800231c:	40020400 	.word	0x40020400
 8002320:	40020800 	.word	0x40020800
 8002324:	40020c00 	.word	0x40020c00
 8002328:	40021000 	.word	0x40021000
 800232c:	40013c00 	.word	0x40013c00

08002330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	807b      	strh	r3, [r7, #2]
 800233c:	4613      	mov	r3, r2
 800233e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002340:	787b      	ldrb	r3, [r7, #1]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002346:	887a      	ldrh	r2, [r7, #2]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800234c:	e003      	b.n	8002356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800234e:	887b      	ldrh	r3, [r7, #2]
 8002350:	041a      	lsls	r2, r3, #16
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	619a      	str	r2, [r3, #24]
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e12b      	b.n	80025ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d106      	bne.n	8002390 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff fb9e 	bl	8001acc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2224      	movs	r2, #36	@ 0x24
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0201 	bic.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023c8:	f001 fc60 	bl	8003c8c <HAL_RCC_GetPCLK1Freq>
 80023cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	4a81      	ldr	r2, [pc, #516]	@ (80025d8 <HAL_I2C_Init+0x274>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d807      	bhi.n	80023e8 <HAL_I2C_Init+0x84>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4a80      	ldr	r2, [pc, #512]	@ (80025dc <HAL_I2C_Init+0x278>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	bf94      	ite	ls
 80023e0:	2301      	movls	r3, #1
 80023e2:	2300      	movhi	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	e006      	b.n	80023f6 <HAL_I2C_Init+0x92>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4a7d      	ldr	r2, [pc, #500]	@ (80025e0 <HAL_I2C_Init+0x27c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	bf94      	ite	ls
 80023f0:	2301      	movls	r3, #1
 80023f2:	2300      	movhi	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e0e7      	b.n	80025ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4a78      	ldr	r2, [pc, #480]	@ (80025e4 <HAL_I2C_Init+0x280>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	0c9b      	lsrs	r3, r3, #18
 8002408:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	430a      	orrs	r2, r1
 800241c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	4a6a      	ldr	r2, [pc, #424]	@ (80025d8 <HAL_I2C_Init+0x274>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d802      	bhi.n	8002438 <HAL_I2C_Init+0xd4>
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	3301      	adds	r3, #1
 8002436:	e009      	b.n	800244c <HAL_I2C_Init+0xe8>
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800243e:	fb02 f303 	mul.w	r3, r2, r3
 8002442:	4a69      	ldr	r2, [pc, #420]	@ (80025e8 <HAL_I2C_Init+0x284>)
 8002444:	fba2 2303 	umull	r2, r3, r2, r3
 8002448:	099b      	lsrs	r3, r3, #6
 800244a:	3301      	adds	r3, #1
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	430b      	orrs	r3, r1
 8002452:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800245e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	495c      	ldr	r1, [pc, #368]	@ (80025d8 <HAL_I2C_Init+0x274>)
 8002468:	428b      	cmp	r3, r1
 800246a:	d819      	bhi.n	80024a0 <HAL_I2C_Init+0x13c>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1e59      	subs	r1, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	fbb1 f3f3 	udiv	r3, r1, r3
 800247a:	1c59      	adds	r1, r3, #1
 800247c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002480:	400b      	ands	r3, r1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00a      	beq.n	800249c <HAL_I2C_Init+0x138>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1e59      	subs	r1, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	fbb1 f3f3 	udiv	r3, r1, r3
 8002494:	3301      	adds	r3, #1
 8002496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800249a:	e051      	b.n	8002540 <HAL_I2C_Init+0x1dc>
 800249c:	2304      	movs	r3, #4
 800249e:	e04f      	b.n	8002540 <HAL_I2C_Init+0x1dc>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d111      	bne.n	80024cc <HAL_I2C_Init+0x168>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	1e58      	subs	r0, r3, #1
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6859      	ldr	r1, [r3, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	440b      	add	r3, r1
 80024b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ba:	3301      	adds	r3, #1
 80024bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	bf0c      	ite	eq
 80024c4:	2301      	moveq	r3, #1
 80024c6:	2300      	movne	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	e012      	b.n	80024f2 <HAL_I2C_Init+0x18e>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	1e58      	subs	r0, r3, #1
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6859      	ldr	r1, [r3, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	0099      	lsls	r1, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	fbb0 f3f3 	udiv	r3, r0, r3
 80024e2:	3301      	adds	r3, #1
 80024e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	bf0c      	ite	eq
 80024ec:	2301      	moveq	r3, #1
 80024ee:	2300      	movne	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_I2C_Init+0x196>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e022      	b.n	8002540 <HAL_I2C_Init+0x1dc>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10e      	bne.n	8002520 <HAL_I2C_Init+0x1bc>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	1e58      	subs	r0, r3, #1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6859      	ldr	r1, [r3, #4]
 800250a:	460b      	mov	r3, r1
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	440b      	add	r3, r1
 8002510:	fbb0 f3f3 	udiv	r3, r0, r3
 8002514:	3301      	adds	r3, #1
 8002516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800251a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800251e:	e00f      	b.n	8002540 <HAL_I2C_Init+0x1dc>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	1e58      	subs	r0, r3, #1
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6859      	ldr	r1, [r3, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	0099      	lsls	r1, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	fbb0 f3f3 	udiv	r3, r0, r3
 8002536:	3301      	adds	r3, #1
 8002538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800253c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	6809      	ldr	r1, [r1, #0]
 8002544:	4313      	orrs	r3, r2
 8002546:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69da      	ldr	r2, [r3, #28]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800256e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6911      	ldr	r1, [r2, #16]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68d2      	ldr	r2, [r2, #12]
 800257a:	4311      	orrs	r1, r2
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6812      	ldr	r2, [r2, #0]
 8002580:	430b      	orrs	r3, r1
 8002582:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695a      	ldr	r2, [r3, #20]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0201 	orr.w	r2, r2, #1
 80025ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2220      	movs	r2, #32
 80025ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	000186a0 	.word	0x000186a0
 80025dc:	001e847f 	.word	0x001e847f
 80025e0:	003d08ff 	.word	0x003d08ff
 80025e4:	431bde83 	.word	0x431bde83
 80025e8:	10624dd3 	.word	0x10624dd3

080025ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af02      	add	r7, sp, #8
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	4608      	mov	r0, r1
 80025f6:	4611      	mov	r1, r2
 80025f8:	461a      	mov	r2, r3
 80025fa:	4603      	mov	r3, r0
 80025fc:	817b      	strh	r3, [r7, #10]
 80025fe:	460b      	mov	r3, r1
 8002600:	813b      	strh	r3, [r7, #8]
 8002602:	4613      	mov	r3, r2
 8002604:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002606:	f7ff fbf9 	bl	8001dfc <HAL_GetTick>
 800260a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b20      	cmp	r3, #32
 8002616:	f040 80d9 	bne.w	80027cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	2319      	movs	r3, #25
 8002620:	2201      	movs	r2, #1
 8002622:	496d      	ldr	r1, [pc, #436]	@ (80027d8 <HAL_I2C_Mem_Write+0x1ec>)
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 fc8b 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002630:	2302      	movs	r3, #2
 8002632:	e0cc      	b.n	80027ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_I2C_Mem_Write+0x56>
 800263e:	2302      	movs	r3, #2
 8002640:	e0c5      	b.n	80027ce <HAL_I2C_Mem_Write+0x1e2>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b01      	cmp	r3, #1
 8002656:	d007      	beq.n	8002668 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0201 	orr.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002676:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2221      	movs	r2, #33	@ 0x21
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2240      	movs	r2, #64	@ 0x40
 8002684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a3a      	ldr	r2, [r7, #32]
 8002692:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002698:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4a4d      	ldr	r2, [pc, #308]	@ (80027dc <HAL_I2C_Mem_Write+0x1f0>)
 80026a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026aa:	88f8      	ldrh	r0, [r7, #6]
 80026ac:	893a      	ldrh	r2, [r7, #8]
 80026ae:	8979      	ldrh	r1, [r7, #10]
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	9301      	str	r3, [sp, #4]
 80026b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	4603      	mov	r3, r0
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 fac2 	bl	8002c44 <I2C_RequestMemoryWrite>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d052      	beq.n	800276c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e081      	b.n	80027ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 fd50 	bl	8003174 <I2C_WaitOnTXEFlagUntilTimeout>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00d      	beq.n	80026f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d107      	bne.n	80026f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e06b      	b.n	80027ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fa:	781a      	ldrb	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800271c:	b29b      	uxth	r3, r3
 800271e:	3b01      	subs	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b04      	cmp	r3, #4
 8002732:	d11b      	bne.n	800276c <HAL_I2C_Mem_Write+0x180>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002738:	2b00      	cmp	r3, #0
 800273a:	d017      	beq.n	800276c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002740:	781a      	ldrb	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002756:	3b01      	subs	r3, #1
 8002758:	b29a      	uxth	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002762:	b29b      	uxth	r3, r3
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1aa      	bne.n	80026ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 fd43 	bl	8003204 <I2C_WaitOnBTFFlagUntilTimeout>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00d      	beq.n	80027a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002788:	2b04      	cmp	r3, #4
 800278a:	d107      	bne.n	800279c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800279a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e016      	b.n	80027ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80027c8:	2300      	movs	r3, #0
 80027ca:	e000      	b.n	80027ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80027cc:	2302      	movs	r3, #2
  }
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	00100002 	.word	0x00100002
 80027dc:	ffff0000 	.word	0xffff0000

080027e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08c      	sub	sp, #48	@ 0x30
 80027e4:	af02      	add	r7, sp, #8
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	4608      	mov	r0, r1
 80027ea:	4611      	mov	r1, r2
 80027ec:	461a      	mov	r2, r3
 80027ee:	4603      	mov	r3, r0
 80027f0:	817b      	strh	r3, [r7, #10]
 80027f2:	460b      	mov	r3, r1
 80027f4:	813b      	strh	r3, [r7, #8]
 80027f6:	4613      	mov	r3, r2
 80027f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027fa:	f7ff faff 	bl	8001dfc <HAL_GetTick>
 80027fe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b20      	cmp	r3, #32
 800280a:	f040 8214 	bne.w	8002c36 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	2319      	movs	r3, #25
 8002814:	2201      	movs	r2, #1
 8002816:	497b      	ldr	r1, [pc, #492]	@ (8002a04 <HAL_I2C_Mem_Read+0x224>)
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 fb91 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002824:	2302      	movs	r3, #2
 8002826:	e207      	b.n	8002c38 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_I2C_Mem_Read+0x56>
 8002832:	2302      	movs	r3, #2
 8002834:	e200      	b.n	8002c38 <HAL_I2C_Mem_Read+0x458>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b01      	cmp	r3, #1
 800284a:	d007      	beq.n	800285c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800286a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2222      	movs	r2, #34	@ 0x22
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2240      	movs	r2, #64	@ 0x40
 8002878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002886:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800288c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4a5b      	ldr	r2, [pc, #364]	@ (8002a08 <HAL_I2C_Mem_Read+0x228>)
 800289c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800289e:	88f8      	ldrh	r0, [r7, #6]
 80028a0:	893a      	ldrh	r2, [r7, #8]
 80028a2:	8979      	ldrh	r1, [r7, #10]
 80028a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a6:	9301      	str	r3, [sp, #4]
 80028a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	4603      	mov	r3, r0
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 fa5e 	bl	8002d70 <I2C_RequestMemoryRead>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e1bc      	b.n	8002c38 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d113      	bne.n	80028ee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028c6:	2300      	movs	r3, #0
 80028c8:	623b      	str	r3, [r7, #32]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	623b      	str	r3, [r7, #32]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	623b      	str	r3, [r7, #32]
 80028da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	e190      	b.n	8002c10 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d11b      	bne.n	800292e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002904:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	e170      	b.n	8002c10 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002932:	2b02      	cmp	r3, #2
 8002934:	d11b      	bne.n	800296e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002944:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002954:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002956:	2300      	movs	r3, #0
 8002958:	61bb      	str	r3, [r7, #24]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	e150      	b.n	8002c10 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002984:	e144      	b.n	8002c10 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298a:	2b03      	cmp	r3, #3
 800298c:	f200 80f1 	bhi.w	8002b72 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002994:	2b01      	cmp	r3, #1
 8002996:	d123      	bne.n	80029e0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800299a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 fc79 	bl	8003294 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e145      	b.n	8002c38 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691a      	ldr	r2, [r3, #16]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029de:	e117      	b.n	8002c10 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d14e      	bne.n	8002a86 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029ee:	2200      	movs	r2, #0
 80029f0:	4906      	ldr	r1, [pc, #24]	@ (8002a0c <HAL_I2C_Mem_Read+0x22c>)
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 faa4 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d008      	beq.n	8002a10 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e11a      	b.n	8002c38 <HAL_I2C_Mem_Read+0x458>
 8002a02:	bf00      	nop
 8002a04:	00100002 	.word	0x00100002
 8002a08:	ffff0000 	.word	0xffff0000
 8002a0c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	691a      	ldr	r2, [r3, #16]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a84:	e0c4      	b.n	8002c10 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	496c      	ldr	r1, [pc, #432]	@ (8002c40 <HAL_I2C_Mem_Read+0x460>)
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 fa55 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0cb      	b.n	8002c38 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002aae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	691a      	ldr	r2, [r3, #16]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae8:	2200      	movs	r2, #0
 8002aea:	4955      	ldr	r1, [pc, #340]	@ (8002c40 <HAL_I2C_Mem_Read+0x460>)
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 fa27 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e09d      	b.n	8002c38 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691a      	ldr	r2, [r3, #16]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b70:	e04e      	b.n	8002c10 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b74:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 fb8c 	bl	8003294 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e058      	b.n	8002c38 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	691a      	ldr	r2, [r3, #16]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b98:	1c5a      	adds	r2, r3, #1
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d124      	bne.n	8002c10 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d107      	bne.n	8002bde <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bdc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f47f aeb6 	bne.w	8002986 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	e000      	b.n	8002c38 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002c36:	2302      	movs	r3, #2
  }
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3728      	adds	r7, #40	@ 0x28
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	00010004 	.word	0x00010004

08002c44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	4608      	mov	r0, r1
 8002c4e:	4611      	mov	r1, r2
 8002c50:	461a      	mov	r2, r3
 8002c52:	4603      	mov	r3, r0
 8002c54:	817b      	strh	r3, [r7, #10]
 8002c56:	460b      	mov	r3, r1
 8002c58:	813b      	strh	r3, [r7, #8]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f960 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00d      	beq.n	8002ca2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c94:	d103      	bne.n	8002c9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e05f      	b.n	8002d62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ca2:	897b      	ldrh	r3, [r7, #10]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002cb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb4:	6a3a      	ldr	r2, [r7, #32]
 8002cb6:	492d      	ldr	r1, [pc, #180]	@ (8002d6c <I2C_RequestMemoryWrite+0x128>)
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 f9bb 	bl	8003034 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e04c      	b.n	8002d62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ce0:	6a39      	ldr	r1, [r7, #32]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 fa46 	bl	8003174 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00d      	beq.n	8002d0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d107      	bne.n	8002d06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e02b      	b.n	8002d62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d105      	bne.n	8002d1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d10:	893b      	ldrh	r3, [r7, #8]
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	611a      	str	r2, [r3, #16]
 8002d1a:	e021      	b.n	8002d60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d1c:	893b      	ldrh	r3, [r7, #8]
 8002d1e:	0a1b      	lsrs	r3, r3, #8
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d2c:	6a39      	ldr	r1, [r7, #32]
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 fa20 	bl	8003174 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00d      	beq.n	8002d56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d107      	bne.n	8002d52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e005      	b.n	8002d62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d56:	893b      	ldrh	r3, [r7, #8]
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	00010002 	.word	0x00010002

08002d70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	4608      	mov	r0, r1
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4603      	mov	r3, r0
 8002d80:	817b      	strh	r3, [r7, #10]
 8002d82:	460b      	mov	r3, r1
 8002d84:	813b      	strh	r3, [r7, #8]
 8002d86:	4613      	mov	r3, r2
 8002d88:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d98:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002da8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f8c2 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00d      	beq.n	8002dde <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dd0:	d103      	bne.n	8002dda <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dd8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e0aa      	b.n	8002f34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dde:	897b      	ldrh	r3, [r7, #10]
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	461a      	mov	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002dec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df0:	6a3a      	ldr	r2, [r7, #32]
 8002df2:	4952      	ldr	r1, [pc, #328]	@ (8002f3c <I2C_RequestMemoryRead+0x1cc>)
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 f91d 	bl	8003034 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e097      	b.n	8002f34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e1c:	6a39      	ldr	r1, [r7, #32]
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f9a8 	bl	8003174 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00d      	beq.n	8002e46 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d107      	bne.n	8002e42 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e076      	b.n	8002f34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e46:	88fb      	ldrh	r3, [r7, #6]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d105      	bne.n	8002e58 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e4c:	893b      	ldrh	r3, [r7, #8]
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	611a      	str	r2, [r3, #16]
 8002e56:	e021      	b.n	8002e9c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e58:	893b      	ldrh	r3, [r7, #8]
 8002e5a:	0a1b      	lsrs	r3, r3, #8
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e68:	6a39      	ldr	r1, [r7, #32]
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 f982 	bl	8003174 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00d      	beq.n	8002e92 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d107      	bne.n	8002e8e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e050      	b.n	8002f34 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e92:	893b      	ldrh	r3, [r7, #8]
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e9e:	6a39      	ldr	r1, [r7, #32]
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 f967 	bl	8003174 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00d      	beq.n	8002ec8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d107      	bne.n	8002ec4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ec2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e035      	b.n	8002f34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ed6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 f82b 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00d      	beq.n	8002f0c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002efa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002efe:	d103      	bne.n	8002f08 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f06:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e013      	b.n	8002f34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f0c:	897b      	ldrh	r3, [r7, #10]
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1e:	6a3a      	ldr	r2, [r7, #32]
 8002f20:	4906      	ldr	r1, [pc, #24]	@ (8002f3c <I2C_RequestMemoryRead+0x1cc>)
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 f886 	bl	8003034 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	00010002 	.word	0x00010002

08002f40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f50:	e048      	b.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f58:	d044      	beq.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f5a:	f7fe ff4f 	bl	8001dfc <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d302      	bcc.n	8002f70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d139      	bne.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	0c1b      	lsrs	r3, r3, #16
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d10d      	bne.n	8002f96 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	43da      	mvns	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	4013      	ands	r3, r2
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	e00c      	b.n	8002fb0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	43da      	mvns	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	461a      	mov	r2, r3
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d116      	bne.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd0:	f043 0220 	orr.w	r2, r3, #32
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e023      	b.n	800302c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	0c1b      	lsrs	r3, r3, #16
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d10d      	bne.n	800300a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	43da      	mvns	r2, r3
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	bf0c      	ite	eq
 8003000:	2301      	moveq	r3, #1
 8003002:	2300      	movne	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	461a      	mov	r2, r3
 8003008:	e00c      	b.n	8003024 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	43da      	mvns	r2, r3
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	4013      	ands	r3, r2
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	bf0c      	ite	eq
 800301c:	2301      	moveq	r3, #1
 800301e:	2300      	movne	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	461a      	mov	r2, r3
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	429a      	cmp	r2, r3
 8003028:	d093      	beq.n	8002f52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
 8003040:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003042:	e071      	b.n	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800304e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003052:	d123      	bne.n	800309c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003062:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800306c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003088:	f043 0204 	orr.w	r2, r3, #4
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e067      	b.n	800316c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a2:	d041      	beq.n	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a4:	f7fe feaa 	bl	8001dfc <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d302      	bcc.n	80030ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d136      	bne.n	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	0c1b      	lsrs	r3, r3, #16
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d10c      	bne.n	80030de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	43da      	mvns	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4013      	ands	r3, r2
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	bf14      	ite	ne
 80030d6:	2301      	movne	r3, #1
 80030d8:	2300      	moveq	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	e00b      	b.n	80030f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	43da      	mvns	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	4013      	ands	r3, r2
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf14      	ite	ne
 80030f0:	2301      	movne	r3, #1
 80030f2:	2300      	moveq	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d016      	beq.n	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003114:	f043 0220 	orr.w	r2, r3, #32
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e021      	b.n	800316c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	0c1b      	lsrs	r3, r3, #16
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b01      	cmp	r3, #1
 8003130:	d10c      	bne.n	800314c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	43da      	mvns	r2, r3
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	4013      	ands	r3, r2
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	bf14      	ite	ne
 8003144:	2301      	movne	r3, #1
 8003146:	2300      	moveq	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	e00b      	b.n	8003164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	43da      	mvns	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4013      	ands	r3, r2
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	bf14      	ite	ne
 800315e:	2301      	movne	r3, #1
 8003160:	2300      	moveq	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	f47f af6d 	bne.w	8003044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003180:	e034      	b.n	80031ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 f8e3 	bl	800334e <I2C_IsAcknowledgeFailed>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e034      	b.n	80031fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003198:	d028      	beq.n	80031ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319a:	f7fe fe2f 	bl	8001dfc <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d302      	bcc.n	80031b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d11d      	bne.n	80031ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ba:	2b80      	cmp	r3, #128	@ 0x80
 80031bc:	d016      	beq.n	80031ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d8:	f043 0220 	orr.w	r2, r3, #32
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e007      	b.n	80031fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f6:	2b80      	cmp	r3, #128	@ 0x80
 80031f8:	d1c3      	bne.n	8003182 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003210:	e034      	b.n	800327c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 f89b 	bl	800334e <I2C_IsAcknowledgeFailed>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e034      	b.n	800328c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003228:	d028      	beq.n	800327c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800322a:	f7fe fde7 	bl	8001dfc <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	429a      	cmp	r2, r3
 8003238:	d302      	bcc.n	8003240 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d11d      	bne.n	800327c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b04      	cmp	r3, #4
 800324c:	d016      	beq.n	800327c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003268:	f043 0220 	orr.w	r2, r3, #32
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e007      	b.n	800328c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	2b04      	cmp	r3, #4
 8003288:	d1c3      	bne.n	8003212 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032a0:	e049      	b.n	8003336 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	2b10      	cmp	r3, #16
 80032ae:	d119      	bne.n	80032e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0210 	mvn.w	r2, #16
 80032b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e030      	b.n	8003346 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e4:	f7fe fd8a 	bl	8001dfc <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d302      	bcc.n	80032fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d11d      	bne.n	8003336 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003304:	2b40      	cmp	r3, #64	@ 0x40
 8003306:	d016      	beq.n	8003336 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	f043 0220 	orr.w	r2, r3, #32
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e007      	b.n	8003346 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003340:	2b40      	cmp	r3, #64	@ 0x40
 8003342:	d1ae      	bne.n	80032a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003360:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003364:	d11b      	bne.n	800339e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800336e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2220      	movs	r2, #32
 800337a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338a:	f043 0204 	orr.w	r2, r3, #4
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e267      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d075      	beq.n	80034b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ca:	4b88      	ldr	r3, [pc, #544]	@ (80035ec <HAL_RCC_OscConfig+0x240>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d00c      	beq.n	80033f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033d6:	4b85      	ldr	r3, [pc, #532]	@ (80035ec <HAL_RCC_OscConfig+0x240>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d112      	bne.n	8003408 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033e2:	4b82      	ldr	r3, [pc, #520]	@ (80035ec <HAL_RCC_OscConfig+0x240>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033ee:	d10b      	bne.n	8003408 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f0:	4b7e      	ldr	r3, [pc, #504]	@ (80035ec <HAL_RCC_OscConfig+0x240>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d05b      	beq.n	80034b4 <HAL_RCC_OscConfig+0x108>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d157      	bne.n	80034b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e242      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003410:	d106      	bne.n	8003420 <HAL_RCC_OscConfig+0x74>
 8003412:	4b76      	ldr	r3, [pc, #472]	@ (80035ec <HAL_RCC_OscConfig+0x240>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a75      	ldr	r2, [pc, #468]	@ (80035ec <HAL_RCC_OscConfig+0x240>)
 8003418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	e01d      	b.n	800345c <HAL_RCC_OscConfig+0xb0>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003428:	d10c      	bne.n	8003444 <HAL_RCC_OscConfig+0x98>
 800342a:	4b70      	ldr	r3, [pc, #448]	@ (80035ec <HAL_RCC_OscConfig+0x240>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a6f      	ldr	r2, [pc, #444]	@ (80035ec <HAL_RCC_OscConfig+0x240>)
 8003430:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	4b6d      	ldr	r3, [pc, #436]	@ (80035ec <HAL_RCC_OscConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a6c      	ldr	r2, [pc, #432]	@ (80035ec <HAL_RCC_OscConfig+0x240>)
 800343c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	e00b      	b.n	800345c <HAL_RCC_OscConfig+0xb0>
 8003444:	4b69      	ldr	r3, [pc, #420]	@ (80035ec <HAL_RCC_OscConfig+0x240>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a68      	ldr	r2, [pc, #416]	@ (80035ec <HAL_RCC_OscConfig+0x240>)
 800344a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800344e:	6013      	str	r3, [r2, #0]
 8003450:	4b66      	ldr	r3, [pc, #408]	@ (80035ec <HAL_RCC_OscConfig+0x240>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a65      	ldr	r2, [pc, #404]	@ (80035ec <HAL_RCC_OscConfig+0x240>)
 8003456:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800345a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d013      	beq.n	800348c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003464:	f7fe fcca 	bl	8001dfc <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800346c:	f7fe fcc6 	bl	8001dfc <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b64      	cmp	r3, #100	@ 0x64
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e207      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347e:	4b5b      	ldr	r3, [pc, #364]	@ (80035ec <HAL_RCC_OscConfig+0x240>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0f0      	beq.n	800346c <HAL_RCC_OscConfig+0xc0>
 800348a:	e014      	b.n	80034b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7fe fcb6 	bl	8001dfc <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003494:	f7fe fcb2 	bl	8001dfc <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b64      	cmp	r3, #100	@ 0x64
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e1f3      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a6:	4b51      	ldr	r3, [pc, #324]	@ (80035ec <HAL_RCC_OscConfig+0x240>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0xe8>
 80034b2:	e000      	b.n	80034b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d063      	beq.n	800358a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034c2:	4b4a      	ldr	r3, [pc, #296]	@ (80035ec <HAL_RCC_OscConfig+0x240>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 030c 	and.w	r3, r3, #12
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00b      	beq.n	80034e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ce:	4b47      	ldr	r3, [pc, #284]	@ (80035ec <HAL_RCC_OscConfig+0x240>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d11c      	bne.n	8003514 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034da:	4b44      	ldr	r3, [pc, #272]	@ (80035ec <HAL_RCC_OscConfig+0x240>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d116      	bne.n	8003514 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e6:	4b41      	ldr	r3, [pc, #260]	@ (80035ec <HAL_RCC_OscConfig+0x240>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d005      	beq.n	80034fe <HAL_RCC_OscConfig+0x152>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d001      	beq.n	80034fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e1c7      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fe:	4b3b      	ldr	r3, [pc, #236]	@ (80035ec <HAL_RCC_OscConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	4937      	ldr	r1, [pc, #220]	@ (80035ec <HAL_RCC_OscConfig+0x240>)
 800350e:	4313      	orrs	r3, r2
 8003510:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003512:	e03a      	b.n	800358a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d020      	beq.n	800355e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800351c:	4b34      	ldr	r3, [pc, #208]	@ (80035f0 <HAL_RCC_OscConfig+0x244>)
 800351e:	2201      	movs	r2, #1
 8003520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003522:	f7fe fc6b 	bl	8001dfc <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800352a:	f7fe fc67 	bl	8001dfc <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e1a8      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353c:	4b2b      	ldr	r3, [pc, #172]	@ (80035ec <HAL_RCC_OscConfig+0x240>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f0      	beq.n	800352a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003548:	4b28      	ldr	r3, [pc, #160]	@ (80035ec <HAL_RCC_OscConfig+0x240>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4925      	ldr	r1, [pc, #148]	@ (80035ec <HAL_RCC_OscConfig+0x240>)
 8003558:	4313      	orrs	r3, r2
 800355a:	600b      	str	r3, [r1, #0]
 800355c:	e015      	b.n	800358a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800355e:	4b24      	ldr	r3, [pc, #144]	@ (80035f0 <HAL_RCC_OscConfig+0x244>)
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003564:	f7fe fc4a 	bl	8001dfc <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800356c:	f7fe fc46 	bl	8001dfc <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e187      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357e:	4b1b      	ldr	r3, [pc, #108]	@ (80035ec <HAL_RCC_OscConfig+0x240>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f0      	bne.n	800356c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d036      	beq.n	8003604 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d016      	beq.n	80035cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800359e:	4b15      	ldr	r3, [pc, #84]	@ (80035f4 <HAL_RCC_OscConfig+0x248>)
 80035a0:	2201      	movs	r2, #1
 80035a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a4:	f7fe fc2a 	bl	8001dfc <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ac:	f7fe fc26 	bl	8001dfc <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e167      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035be:	4b0b      	ldr	r3, [pc, #44]	@ (80035ec <HAL_RCC_OscConfig+0x240>)
 80035c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f0      	beq.n	80035ac <HAL_RCC_OscConfig+0x200>
 80035ca:	e01b      	b.n	8003604 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035cc:	4b09      	ldr	r3, [pc, #36]	@ (80035f4 <HAL_RCC_OscConfig+0x248>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d2:	f7fe fc13 	bl	8001dfc <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d8:	e00e      	b.n	80035f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035da:	f7fe fc0f 	bl	8001dfc <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d907      	bls.n	80035f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e150      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
 80035ec:	40023800 	.word	0x40023800
 80035f0:	42470000 	.word	0x42470000
 80035f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f8:	4b88      	ldr	r3, [pc, #544]	@ (800381c <HAL_RCC_OscConfig+0x470>)
 80035fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1ea      	bne.n	80035da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 8097 	beq.w	8003740 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003612:	2300      	movs	r3, #0
 8003614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003616:	4b81      	ldr	r3, [pc, #516]	@ (800381c <HAL_RCC_OscConfig+0x470>)
 8003618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10f      	bne.n	8003642 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003622:	2300      	movs	r3, #0
 8003624:	60bb      	str	r3, [r7, #8]
 8003626:	4b7d      	ldr	r3, [pc, #500]	@ (800381c <HAL_RCC_OscConfig+0x470>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362a:	4a7c      	ldr	r2, [pc, #496]	@ (800381c <HAL_RCC_OscConfig+0x470>)
 800362c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003630:	6413      	str	r3, [r2, #64]	@ 0x40
 8003632:	4b7a      	ldr	r3, [pc, #488]	@ (800381c <HAL_RCC_OscConfig+0x470>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800363a:	60bb      	str	r3, [r7, #8]
 800363c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800363e:	2301      	movs	r3, #1
 8003640:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003642:	4b77      	ldr	r3, [pc, #476]	@ (8003820 <HAL_RCC_OscConfig+0x474>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800364a:	2b00      	cmp	r3, #0
 800364c:	d118      	bne.n	8003680 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800364e:	4b74      	ldr	r3, [pc, #464]	@ (8003820 <HAL_RCC_OscConfig+0x474>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a73      	ldr	r2, [pc, #460]	@ (8003820 <HAL_RCC_OscConfig+0x474>)
 8003654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800365a:	f7fe fbcf 	bl	8001dfc <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003662:	f7fe fbcb 	bl	8001dfc <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e10c      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003674:	4b6a      	ldr	r3, [pc, #424]	@ (8003820 <HAL_RCC_OscConfig+0x474>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0f0      	beq.n	8003662 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d106      	bne.n	8003696 <HAL_RCC_OscConfig+0x2ea>
 8003688:	4b64      	ldr	r3, [pc, #400]	@ (800381c <HAL_RCC_OscConfig+0x470>)
 800368a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800368c:	4a63      	ldr	r2, [pc, #396]	@ (800381c <HAL_RCC_OscConfig+0x470>)
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	6713      	str	r3, [r2, #112]	@ 0x70
 8003694:	e01c      	b.n	80036d0 <HAL_RCC_OscConfig+0x324>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	2b05      	cmp	r3, #5
 800369c:	d10c      	bne.n	80036b8 <HAL_RCC_OscConfig+0x30c>
 800369e:	4b5f      	ldr	r3, [pc, #380]	@ (800381c <HAL_RCC_OscConfig+0x470>)
 80036a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a2:	4a5e      	ldr	r2, [pc, #376]	@ (800381c <HAL_RCC_OscConfig+0x470>)
 80036a4:	f043 0304 	orr.w	r3, r3, #4
 80036a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80036aa:	4b5c      	ldr	r3, [pc, #368]	@ (800381c <HAL_RCC_OscConfig+0x470>)
 80036ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ae:	4a5b      	ldr	r2, [pc, #364]	@ (800381c <HAL_RCC_OscConfig+0x470>)
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80036b6:	e00b      	b.n	80036d0 <HAL_RCC_OscConfig+0x324>
 80036b8:	4b58      	ldr	r3, [pc, #352]	@ (800381c <HAL_RCC_OscConfig+0x470>)
 80036ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036bc:	4a57      	ldr	r2, [pc, #348]	@ (800381c <HAL_RCC_OscConfig+0x470>)
 80036be:	f023 0301 	bic.w	r3, r3, #1
 80036c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80036c4:	4b55      	ldr	r3, [pc, #340]	@ (800381c <HAL_RCC_OscConfig+0x470>)
 80036c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c8:	4a54      	ldr	r2, [pc, #336]	@ (800381c <HAL_RCC_OscConfig+0x470>)
 80036ca:	f023 0304 	bic.w	r3, r3, #4
 80036ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d015      	beq.n	8003704 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d8:	f7fe fb90 	bl	8001dfc <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036de:	e00a      	b.n	80036f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036e0:	f7fe fb8c 	bl	8001dfc <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e0cb      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f6:	4b49      	ldr	r3, [pc, #292]	@ (800381c <HAL_RCC_OscConfig+0x470>)
 80036f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0ee      	beq.n	80036e0 <HAL_RCC_OscConfig+0x334>
 8003702:	e014      	b.n	800372e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003704:	f7fe fb7a 	bl	8001dfc <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800370a:	e00a      	b.n	8003722 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800370c:	f7fe fb76 	bl	8001dfc <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800371a:	4293      	cmp	r3, r2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e0b5      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003722:	4b3e      	ldr	r3, [pc, #248]	@ (800381c <HAL_RCC_OscConfig+0x470>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1ee      	bne.n	800370c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800372e:	7dfb      	ldrb	r3, [r7, #23]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d105      	bne.n	8003740 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003734:	4b39      	ldr	r3, [pc, #228]	@ (800381c <HAL_RCC_OscConfig+0x470>)
 8003736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003738:	4a38      	ldr	r2, [pc, #224]	@ (800381c <HAL_RCC_OscConfig+0x470>)
 800373a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800373e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 80a1 	beq.w	800388c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800374a:	4b34      	ldr	r3, [pc, #208]	@ (800381c <HAL_RCC_OscConfig+0x470>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	2b08      	cmp	r3, #8
 8003754:	d05c      	beq.n	8003810 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d141      	bne.n	80037e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375e:	4b31      	ldr	r3, [pc, #196]	@ (8003824 <HAL_RCC_OscConfig+0x478>)
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003764:	f7fe fb4a 	bl	8001dfc <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800376c:	f7fe fb46 	bl	8001dfc <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e087      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377e:	4b27      	ldr	r3, [pc, #156]	@ (800381c <HAL_RCC_OscConfig+0x470>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69da      	ldr	r2, [r3, #28]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003798:	019b      	lsls	r3, r3, #6
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a0:	085b      	lsrs	r3, r3, #1
 80037a2:	3b01      	subs	r3, #1
 80037a4:	041b      	lsls	r3, r3, #16
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ac:	061b      	lsls	r3, r3, #24
 80037ae:	491b      	ldr	r1, [pc, #108]	@ (800381c <HAL_RCC_OscConfig+0x470>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003824 <HAL_RCC_OscConfig+0x478>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ba:	f7fe fb1f 	bl	8001dfc <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c2:	f7fe fb1b 	bl	8001dfc <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e05c      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d4:	4b11      	ldr	r3, [pc, #68]	@ (800381c <HAL_RCC_OscConfig+0x470>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f0      	beq.n	80037c2 <HAL_RCC_OscConfig+0x416>
 80037e0:	e054      	b.n	800388c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e2:	4b10      	ldr	r3, [pc, #64]	@ (8003824 <HAL_RCC_OscConfig+0x478>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e8:	f7fe fb08 	bl	8001dfc <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f0:	f7fe fb04 	bl	8001dfc <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e045      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003802:	4b06      	ldr	r3, [pc, #24]	@ (800381c <HAL_RCC_OscConfig+0x470>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f0      	bne.n	80037f0 <HAL_RCC_OscConfig+0x444>
 800380e:	e03d      	b.n	800388c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d107      	bne.n	8003828 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e038      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
 800381c:	40023800 	.word	0x40023800
 8003820:	40007000 	.word	0x40007000
 8003824:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003828:	4b1b      	ldr	r3, [pc, #108]	@ (8003898 <HAL_RCC_OscConfig+0x4ec>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d028      	beq.n	8003888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003840:	429a      	cmp	r2, r3
 8003842:	d121      	bne.n	8003888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384e:	429a      	cmp	r2, r3
 8003850:	d11a      	bne.n	8003888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003858:	4013      	ands	r3, r2
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800385e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003860:	4293      	cmp	r3, r2
 8003862:	d111      	bne.n	8003888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386e:	085b      	lsrs	r3, r3, #1
 8003870:	3b01      	subs	r3, #1
 8003872:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003874:	429a      	cmp	r2, r3
 8003876:	d107      	bne.n	8003888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003882:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003884:	429a      	cmp	r2, r3
 8003886:	d001      	beq.n	800388c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e000      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40023800 	.word	0x40023800

0800389c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0cc      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038b0:	4b68      	ldr	r3, [pc, #416]	@ (8003a54 <HAL_RCC_ClockConfig+0x1b8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d90c      	bls.n	80038d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038be:	4b65      	ldr	r3, [pc, #404]	@ (8003a54 <HAL_RCC_ClockConfig+0x1b8>)
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c6:	4b63      	ldr	r3, [pc, #396]	@ (8003a54 <HAL_RCC_ClockConfig+0x1b8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d001      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0b8      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d020      	beq.n	8003926 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038f0:	4b59      	ldr	r3, [pc, #356]	@ (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	4a58      	ldr	r2, [pc, #352]	@ (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0308 	and.w	r3, r3, #8
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003908:	4b53      	ldr	r3, [pc, #332]	@ (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	4a52      	ldr	r2, [pc, #328]	@ (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003912:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003914:	4b50      	ldr	r3, [pc, #320]	@ (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	494d      	ldr	r1, [pc, #308]	@ (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	4313      	orrs	r3, r2
 8003924:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d044      	beq.n	80039bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d107      	bne.n	800394a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800393a:	4b47      	ldr	r3, [pc, #284]	@ (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d119      	bne.n	800397a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e07f      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d003      	beq.n	800395a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003956:	2b03      	cmp	r3, #3
 8003958:	d107      	bne.n	800396a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800395a:	4b3f      	ldr	r3, [pc, #252]	@ (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d109      	bne.n	800397a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e06f      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e067      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800397a:	4b37      	ldr	r3, [pc, #220]	@ (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f023 0203 	bic.w	r2, r3, #3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	4934      	ldr	r1, [pc, #208]	@ (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 8003988:	4313      	orrs	r3, r2
 800398a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800398c:	f7fe fa36 	bl	8001dfc <HAL_GetTick>
 8003990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003992:	e00a      	b.n	80039aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003994:	f7fe fa32 	bl	8001dfc <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e04f      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039aa:	4b2b      	ldr	r3, [pc, #172]	@ (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 020c 	and.w	r2, r3, #12
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d1eb      	bne.n	8003994 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039bc:	4b25      	ldr	r3, [pc, #148]	@ (8003a54 <HAL_RCC_ClockConfig+0x1b8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d20c      	bcs.n	80039e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ca:	4b22      	ldr	r3, [pc, #136]	@ (8003a54 <HAL_RCC_ClockConfig+0x1b8>)
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d2:	4b20      	ldr	r3, [pc, #128]	@ (8003a54 <HAL_RCC_ClockConfig+0x1b8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d001      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e032      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d008      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039f0:	4b19      	ldr	r3, [pc, #100]	@ (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	4916      	ldr	r1, [pc, #88]	@ (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d009      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a0e:	4b12      	ldr	r3, [pc, #72]	@ (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	490e      	ldr	r1, [pc, #56]	@ (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a22:	f000 f821 	bl	8003a68 <HAL_RCC_GetSysClockFreq>
 8003a26:	4602      	mov	r2, r0
 8003a28:	4b0b      	ldr	r3, [pc, #44]	@ (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	091b      	lsrs	r3, r3, #4
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	490a      	ldr	r1, [pc, #40]	@ (8003a5c <HAL_RCC_ClockConfig+0x1c0>)
 8003a34:	5ccb      	ldrb	r3, [r1, r3]
 8003a36:	fa22 f303 	lsr.w	r3, r2, r3
 8003a3a:	4a09      	ldr	r2, [pc, #36]	@ (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a3e:	4b09      	ldr	r3, [pc, #36]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fe f996 	bl	8001d74 <HAL_InitTick>

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40023c00 	.word	0x40023c00
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	08005050 	.word	0x08005050
 8003a60:	20000028 	.word	0x20000028
 8003a64:	2000002c 	.word	0x2000002c

08003a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a6c:	b094      	sub	sp, #80	@ 0x50
 8003a6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a74:	2300      	movs	r3, #0
 8003a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a78:	2300      	movs	r3, #0
 8003a7a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a80:	4b79      	ldr	r3, [pc, #484]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 030c 	and.w	r3, r3, #12
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d00d      	beq.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x40>
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	f200 80e1 	bhi.w	8003c54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <HAL_RCC_GetSysClockFreq+0x34>
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d003      	beq.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a9a:	e0db      	b.n	8003c54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a9c:	4b73      	ldr	r3, [pc, #460]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x204>)
 8003a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003aa0:	e0db      	b.n	8003c5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aa2:	4b73      	ldr	r3, [pc, #460]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0x208>)
 8003aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003aa6:	e0d8      	b.n	8003c5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aa8:	4b6f      	ldr	r3, [pc, #444]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ab0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ab2:	4b6d      	ldr	r3, [pc, #436]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d063      	beq.n	8003b86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003abe:	4b6a      	ldr	r3, [pc, #424]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	099b      	lsrs	r3, r3, #6
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ac8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ad6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003ada:	4622      	mov	r2, r4
 8003adc:	462b      	mov	r3, r5
 8003ade:	f04f 0000 	mov.w	r0, #0
 8003ae2:	f04f 0100 	mov.w	r1, #0
 8003ae6:	0159      	lsls	r1, r3, #5
 8003ae8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aec:	0150      	lsls	r0, r2, #5
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	4621      	mov	r1, r4
 8003af4:	1a51      	subs	r1, r2, r1
 8003af6:	6139      	str	r1, [r7, #16]
 8003af8:	4629      	mov	r1, r5
 8003afa:	eb63 0301 	sbc.w	r3, r3, r1
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b0c:	4659      	mov	r1, fp
 8003b0e:	018b      	lsls	r3, r1, #6
 8003b10:	4651      	mov	r1, sl
 8003b12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b16:	4651      	mov	r1, sl
 8003b18:	018a      	lsls	r2, r1, #6
 8003b1a:	4651      	mov	r1, sl
 8003b1c:	ebb2 0801 	subs.w	r8, r2, r1
 8003b20:	4659      	mov	r1, fp
 8003b22:	eb63 0901 	sbc.w	r9, r3, r1
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b3a:	4690      	mov	r8, r2
 8003b3c:	4699      	mov	r9, r3
 8003b3e:	4623      	mov	r3, r4
 8003b40:	eb18 0303 	adds.w	r3, r8, r3
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	462b      	mov	r3, r5
 8003b48:	eb49 0303 	adc.w	r3, r9, r3
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	024b      	lsls	r3, r1, #9
 8003b5e:	4621      	mov	r1, r4
 8003b60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b64:	4621      	mov	r1, r4
 8003b66:	024a      	lsls	r2, r1, #9
 8003b68:	4610      	mov	r0, r2
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b6e:	2200      	movs	r2, #0
 8003b70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b78:	f7fc ffa0 	bl	8000abc <__aeabi_uldivmod>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4613      	mov	r3, r2
 8003b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b84:	e058      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b86:	4b38      	ldr	r3, [pc, #224]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	099b      	lsrs	r3, r3, #6
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	4618      	mov	r0, r3
 8003b90:	4611      	mov	r1, r2
 8003b92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b96:	623b      	str	r3, [r7, #32]
 8003b98:	2300      	movs	r3, #0
 8003b9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ba0:	4642      	mov	r2, r8
 8003ba2:	464b      	mov	r3, r9
 8003ba4:	f04f 0000 	mov.w	r0, #0
 8003ba8:	f04f 0100 	mov.w	r1, #0
 8003bac:	0159      	lsls	r1, r3, #5
 8003bae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bb2:	0150      	lsls	r0, r2, #5
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	4641      	mov	r1, r8
 8003bba:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bbe:	4649      	mov	r1, r9
 8003bc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003bd8:	ebb2 040a 	subs.w	r4, r2, sl
 8003bdc:	eb63 050b 	sbc.w	r5, r3, fp
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	00eb      	lsls	r3, r5, #3
 8003bea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bee:	00e2      	lsls	r2, r4, #3
 8003bf0:	4614      	mov	r4, r2
 8003bf2:	461d      	mov	r5, r3
 8003bf4:	4643      	mov	r3, r8
 8003bf6:	18e3      	adds	r3, r4, r3
 8003bf8:	603b      	str	r3, [r7, #0]
 8003bfa:	464b      	mov	r3, r9
 8003bfc:	eb45 0303 	adc.w	r3, r5, r3
 8003c00:	607b      	str	r3, [r7, #4]
 8003c02:	f04f 0200 	mov.w	r2, #0
 8003c06:	f04f 0300 	mov.w	r3, #0
 8003c0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c0e:	4629      	mov	r1, r5
 8003c10:	028b      	lsls	r3, r1, #10
 8003c12:	4621      	mov	r1, r4
 8003c14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c18:	4621      	mov	r1, r4
 8003c1a:	028a      	lsls	r2, r1, #10
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	4619      	mov	r1, r3
 8003c20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c22:	2200      	movs	r2, #0
 8003c24:	61bb      	str	r3, [r7, #24]
 8003c26:	61fa      	str	r2, [r7, #28]
 8003c28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c2c:	f7fc ff46 	bl	8000abc <__aeabi_uldivmod>
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	4613      	mov	r3, r2
 8003c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c38:	4b0b      	ldr	r3, [pc, #44]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	0c1b      	lsrs	r3, r3, #16
 8003c3e:	f003 0303 	and.w	r3, r3, #3
 8003c42:	3301      	adds	r3, #1
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003c48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c52:	e002      	b.n	8003c5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c54:	4b05      	ldr	r3, [pc, #20]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x204>)
 8003c56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3750      	adds	r7, #80	@ 0x50
 8003c60:	46bd      	mov	sp, r7
 8003c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c66:	bf00      	nop
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	00f42400 	.word	0x00f42400
 8003c70:	007a1200 	.word	0x007a1200

08003c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c78:	4b03      	ldr	r3, [pc, #12]	@ (8003c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	20000028 	.word	0x20000028

08003c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c90:	f7ff fff0 	bl	8003c74 <HAL_RCC_GetHCLKFreq>
 8003c94:	4602      	mov	r2, r0
 8003c96:	4b05      	ldr	r3, [pc, #20]	@ (8003cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	0a9b      	lsrs	r3, r3, #10
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	4903      	ldr	r1, [pc, #12]	@ (8003cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ca2:	5ccb      	ldrb	r3, [r1, r3]
 8003ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	08005060 	.word	0x08005060

08003cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cb8:	f7ff ffdc 	bl	8003c74 <HAL_RCC_GetHCLKFreq>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	4b05      	ldr	r3, [pc, #20]	@ (8003cd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	0b5b      	lsrs	r3, r3, #13
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	4903      	ldr	r1, [pc, #12]	@ (8003cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cca:	5ccb      	ldrb	r3, [r1, r3]
 8003ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	08005060 	.word	0x08005060

08003cdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e042      	b.n	8003d74 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7fd ff2a 	bl	8001b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2224      	movs	r2, #36	@ 0x24
 8003d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f973 	bl	800400c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695a      	ldr	r2, [r3, #20]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68da      	ldr	r2, [r3, #12]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08a      	sub	sp, #40	@ 0x28
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	d175      	bne.n	8003e88 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <HAL_UART_Transmit+0x2c>
 8003da2:	88fb      	ldrh	r3, [r7, #6]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e06e      	b.n	8003e8a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2221      	movs	r2, #33	@ 0x21
 8003db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dba:	f7fe f81f 	bl	8001dfc <HAL_GetTick>
 8003dbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	88fa      	ldrh	r2, [r7, #6]
 8003dc4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	88fa      	ldrh	r2, [r7, #6]
 8003dca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dd4:	d108      	bne.n	8003de8 <HAL_UART_Transmit+0x6c>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d104      	bne.n	8003de8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	61bb      	str	r3, [r7, #24]
 8003de6:	e003      	b.n	8003df0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dec:	2300      	movs	r3, #0
 8003dee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003df0:	e02e      	b.n	8003e50 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	2180      	movs	r1, #128	@ 0x80
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 f848 	bl	8003e92 <UART_WaitOnFlagUntilTimeout>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e03a      	b.n	8003e8a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10b      	bne.n	8003e32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	881b      	ldrh	r3, [r3, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	3302      	adds	r3, #2
 8003e2e:	61bb      	str	r3, [r7, #24]
 8003e30:	e007      	b.n	8003e42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	781a      	ldrb	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1cb      	bne.n	8003df2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2200      	movs	r2, #0
 8003e62:	2140      	movs	r1, #64	@ 0x40
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f814 	bl	8003e92 <UART_WaitOnFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e006      	b.n	8003e8a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	e000      	b.n	8003e8a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e88:	2302      	movs	r3, #2
  }
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3720      	adds	r7, #32
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b086      	sub	sp, #24
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	603b      	str	r3, [r7, #0]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ea2:	e03b      	b.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eaa:	d037      	beq.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eac:	f7fd ffa6 	bl	8001dfc <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	6a3a      	ldr	r2, [r7, #32]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d302      	bcc.n	8003ec2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e03a      	b.n	8003f3c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d023      	beq.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2b80      	cmp	r3, #128	@ 0x80
 8003ed8:	d020      	beq.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b40      	cmp	r3, #64	@ 0x40
 8003ede:	d01d      	beq.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d116      	bne.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 f81d 	bl	8003f44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2208      	movs	r2, #8
 8003f0e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e00f      	b.n	8003f3c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	4013      	ands	r3, r2
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	bf0c      	ite	eq
 8003f2c:	2301      	moveq	r3, #1
 8003f2e:	2300      	movne	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	461a      	mov	r2, r3
 8003f34:	79fb      	ldrb	r3, [r7, #7]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d0b4      	beq.n	8003ea4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b095      	sub	sp, #84	@ 0x54
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	330c      	adds	r3, #12
 8003f52:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f56:	e853 3f00 	ldrex	r3, [r3]
 8003f5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	330c      	adds	r3, #12
 8003f6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f6c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f74:	e841 2300 	strex	r3, r2, [r1]
 8003f78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1e5      	bne.n	8003f4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3314      	adds	r3, #20
 8003f86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	e853 3f00 	ldrex	r3, [r3]
 8003f8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	f023 0301 	bic.w	r3, r3, #1
 8003f96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3314      	adds	r3, #20
 8003f9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fa0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fa8:	e841 2300 	strex	r3, r2, [r1]
 8003fac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1e5      	bne.n	8003f80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d119      	bne.n	8003ff0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	330c      	adds	r3, #12
 8003fc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	e853 3f00 	ldrex	r3, [r3]
 8003fca:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f023 0310 	bic.w	r3, r3, #16
 8003fd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	330c      	adds	r3, #12
 8003fda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fdc:	61ba      	str	r2, [r7, #24]
 8003fde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe0:	6979      	ldr	r1, [r7, #20]
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	e841 2300 	strex	r3, r2, [r1]
 8003fe8:	613b      	str	r3, [r7, #16]
   return(result);
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1e5      	bne.n	8003fbc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ffe:	bf00      	nop
 8004000:	3754      	adds	r7, #84	@ 0x54
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
	...

0800400c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800400c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004010:	b0c0      	sub	sp, #256	@ 0x100
 8004012:	af00      	add	r7, sp, #0
 8004014:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004028:	68d9      	ldr	r1, [r3, #12]
 800402a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	ea40 0301 	orr.w	r3, r0, r1
 8004034:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	431a      	orrs	r2, r3
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	431a      	orrs	r2, r3
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004064:	f021 010c 	bic.w	r1, r1, #12
 8004068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004072:	430b      	orrs	r3, r1
 8004074:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004086:	6999      	ldr	r1, [r3, #24]
 8004088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	ea40 0301 	orr.w	r3, r0, r1
 8004092:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	4b8f      	ldr	r3, [pc, #572]	@ (80042d8 <UART_SetConfig+0x2cc>)
 800409c:	429a      	cmp	r2, r3
 800409e:	d005      	beq.n	80040ac <UART_SetConfig+0xa0>
 80040a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	4b8d      	ldr	r3, [pc, #564]	@ (80042dc <UART_SetConfig+0x2d0>)
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d104      	bne.n	80040b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040ac:	f7ff fe02 	bl	8003cb4 <HAL_RCC_GetPCLK2Freq>
 80040b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040b4:	e003      	b.n	80040be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040b6:	f7ff fde9 	bl	8003c8c <HAL_RCC_GetPCLK1Freq>
 80040ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040c8:	f040 810c 	bne.w	80042e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040d0:	2200      	movs	r2, #0
 80040d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80040da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80040de:	4622      	mov	r2, r4
 80040e0:	462b      	mov	r3, r5
 80040e2:	1891      	adds	r1, r2, r2
 80040e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80040e6:	415b      	adcs	r3, r3
 80040e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80040ee:	4621      	mov	r1, r4
 80040f0:	eb12 0801 	adds.w	r8, r2, r1
 80040f4:	4629      	mov	r1, r5
 80040f6:	eb43 0901 	adc.w	r9, r3, r1
 80040fa:	f04f 0200 	mov.w	r2, #0
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004106:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800410a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800410e:	4690      	mov	r8, r2
 8004110:	4699      	mov	r9, r3
 8004112:	4623      	mov	r3, r4
 8004114:	eb18 0303 	adds.w	r3, r8, r3
 8004118:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800411c:	462b      	mov	r3, r5
 800411e:	eb49 0303 	adc.w	r3, r9, r3
 8004122:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004132:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004136:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800413a:	460b      	mov	r3, r1
 800413c:	18db      	adds	r3, r3, r3
 800413e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004140:	4613      	mov	r3, r2
 8004142:	eb42 0303 	adc.w	r3, r2, r3
 8004146:	657b      	str	r3, [r7, #84]	@ 0x54
 8004148:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800414c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004150:	f7fc fcb4 	bl	8000abc <__aeabi_uldivmod>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	4b61      	ldr	r3, [pc, #388]	@ (80042e0 <UART_SetConfig+0x2d4>)
 800415a:	fba3 2302 	umull	r2, r3, r3, r2
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	011c      	lsls	r4, r3, #4
 8004162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004166:	2200      	movs	r2, #0
 8004168:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800416c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004170:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004174:	4642      	mov	r2, r8
 8004176:	464b      	mov	r3, r9
 8004178:	1891      	adds	r1, r2, r2
 800417a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800417c:	415b      	adcs	r3, r3
 800417e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004180:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004184:	4641      	mov	r1, r8
 8004186:	eb12 0a01 	adds.w	sl, r2, r1
 800418a:	4649      	mov	r1, r9
 800418c:	eb43 0b01 	adc.w	fp, r3, r1
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800419c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041a4:	4692      	mov	sl, r2
 80041a6:	469b      	mov	fp, r3
 80041a8:	4643      	mov	r3, r8
 80041aa:	eb1a 0303 	adds.w	r3, sl, r3
 80041ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041b2:	464b      	mov	r3, r9
 80041b4:	eb4b 0303 	adc.w	r3, fp, r3
 80041b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80041cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80041d0:	460b      	mov	r3, r1
 80041d2:	18db      	adds	r3, r3, r3
 80041d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80041d6:	4613      	mov	r3, r2
 80041d8:	eb42 0303 	adc.w	r3, r2, r3
 80041dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80041de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80041e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80041e6:	f7fc fc69 	bl	8000abc <__aeabi_uldivmod>
 80041ea:	4602      	mov	r2, r0
 80041ec:	460b      	mov	r3, r1
 80041ee:	4611      	mov	r1, r2
 80041f0:	4b3b      	ldr	r3, [pc, #236]	@ (80042e0 <UART_SetConfig+0x2d4>)
 80041f2:	fba3 2301 	umull	r2, r3, r3, r1
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	2264      	movs	r2, #100	@ 0x64
 80041fa:	fb02 f303 	mul.w	r3, r2, r3
 80041fe:	1acb      	subs	r3, r1, r3
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004206:	4b36      	ldr	r3, [pc, #216]	@ (80042e0 <UART_SetConfig+0x2d4>)
 8004208:	fba3 2302 	umull	r2, r3, r3, r2
 800420c:	095b      	lsrs	r3, r3, #5
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004214:	441c      	add	r4, r3
 8004216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800421a:	2200      	movs	r2, #0
 800421c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004220:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004224:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004228:	4642      	mov	r2, r8
 800422a:	464b      	mov	r3, r9
 800422c:	1891      	adds	r1, r2, r2
 800422e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004230:	415b      	adcs	r3, r3
 8004232:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004234:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004238:	4641      	mov	r1, r8
 800423a:	1851      	adds	r1, r2, r1
 800423c:	6339      	str	r1, [r7, #48]	@ 0x30
 800423e:	4649      	mov	r1, r9
 8004240:	414b      	adcs	r3, r1
 8004242:	637b      	str	r3, [r7, #52]	@ 0x34
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004250:	4659      	mov	r1, fp
 8004252:	00cb      	lsls	r3, r1, #3
 8004254:	4651      	mov	r1, sl
 8004256:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800425a:	4651      	mov	r1, sl
 800425c:	00ca      	lsls	r2, r1, #3
 800425e:	4610      	mov	r0, r2
 8004260:	4619      	mov	r1, r3
 8004262:	4603      	mov	r3, r0
 8004264:	4642      	mov	r2, r8
 8004266:	189b      	adds	r3, r3, r2
 8004268:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800426c:	464b      	mov	r3, r9
 800426e:	460a      	mov	r2, r1
 8004270:	eb42 0303 	adc.w	r3, r2, r3
 8004274:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004284:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004288:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800428c:	460b      	mov	r3, r1
 800428e:	18db      	adds	r3, r3, r3
 8004290:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004292:	4613      	mov	r3, r2
 8004294:	eb42 0303 	adc.w	r3, r2, r3
 8004298:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800429a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800429e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042a2:	f7fc fc0b 	bl	8000abc <__aeabi_uldivmod>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	4b0d      	ldr	r3, [pc, #52]	@ (80042e0 <UART_SetConfig+0x2d4>)
 80042ac:	fba3 1302 	umull	r1, r3, r3, r2
 80042b0:	095b      	lsrs	r3, r3, #5
 80042b2:	2164      	movs	r1, #100	@ 0x64
 80042b4:	fb01 f303 	mul.w	r3, r1, r3
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	3332      	adds	r3, #50	@ 0x32
 80042be:	4a08      	ldr	r2, [pc, #32]	@ (80042e0 <UART_SetConfig+0x2d4>)
 80042c0:	fba2 2303 	umull	r2, r3, r2, r3
 80042c4:	095b      	lsrs	r3, r3, #5
 80042c6:	f003 0207 	and.w	r2, r3, #7
 80042ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4422      	add	r2, r4
 80042d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042d4:	e106      	b.n	80044e4 <UART_SetConfig+0x4d8>
 80042d6:	bf00      	nop
 80042d8:	40011000 	.word	0x40011000
 80042dc:	40011400 	.word	0x40011400
 80042e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042e8:	2200      	movs	r2, #0
 80042ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80042f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80042f6:	4642      	mov	r2, r8
 80042f8:	464b      	mov	r3, r9
 80042fa:	1891      	adds	r1, r2, r2
 80042fc:	6239      	str	r1, [r7, #32]
 80042fe:	415b      	adcs	r3, r3
 8004300:	627b      	str	r3, [r7, #36]	@ 0x24
 8004302:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004306:	4641      	mov	r1, r8
 8004308:	1854      	adds	r4, r2, r1
 800430a:	4649      	mov	r1, r9
 800430c:	eb43 0501 	adc.w	r5, r3, r1
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	00eb      	lsls	r3, r5, #3
 800431a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800431e:	00e2      	lsls	r2, r4, #3
 8004320:	4614      	mov	r4, r2
 8004322:	461d      	mov	r5, r3
 8004324:	4643      	mov	r3, r8
 8004326:	18e3      	adds	r3, r4, r3
 8004328:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800432c:	464b      	mov	r3, r9
 800432e:	eb45 0303 	adc.w	r3, r5, r3
 8004332:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004342:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	f04f 0300 	mov.w	r3, #0
 800434e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004352:	4629      	mov	r1, r5
 8004354:	008b      	lsls	r3, r1, #2
 8004356:	4621      	mov	r1, r4
 8004358:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800435c:	4621      	mov	r1, r4
 800435e:	008a      	lsls	r2, r1, #2
 8004360:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004364:	f7fc fbaa 	bl	8000abc <__aeabi_uldivmod>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4b60      	ldr	r3, [pc, #384]	@ (80044f0 <UART_SetConfig+0x4e4>)
 800436e:	fba3 2302 	umull	r2, r3, r3, r2
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	011c      	lsls	r4, r3, #4
 8004376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800437a:	2200      	movs	r2, #0
 800437c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004380:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004384:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004388:	4642      	mov	r2, r8
 800438a:	464b      	mov	r3, r9
 800438c:	1891      	adds	r1, r2, r2
 800438e:	61b9      	str	r1, [r7, #24]
 8004390:	415b      	adcs	r3, r3
 8004392:	61fb      	str	r3, [r7, #28]
 8004394:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004398:	4641      	mov	r1, r8
 800439a:	1851      	adds	r1, r2, r1
 800439c:	6139      	str	r1, [r7, #16]
 800439e:	4649      	mov	r1, r9
 80043a0:	414b      	adcs	r3, r1
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043b0:	4659      	mov	r1, fp
 80043b2:	00cb      	lsls	r3, r1, #3
 80043b4:	4651      	mov	r1, sl
 80043b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ba:	4651      	mov	r1, sl
 80043bc:	00ca      	lsls	r2, r1, #3
 80043be:	4610      	mov	r0, r2
 80043c0:	4619      	mov	r1, r3
 80043c2:	4603      	mov	r3, r0
 80043c4:	4642      	mov	r2, r8
 80043c6:	189b      	adds	r3, r3, r2
 80043c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043cc:	464b      	mov	r3, r9
 80043ce:	460a      	mov	r2, r1
 80043d0:	eb42 0303 	adc.w	r3, r2, r3
 80043d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80043f0:	4649      	mov	r1, r9
 80043f2:	008b      	lsls	r3, r1, #2
 80043f4:	4641      	mov	r1, r8
 80043f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043fa:	4641      	mov	r1, r8
 80043fc:	008a      	lsls	r2, r1, #2
 80043fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004402:	f7fc fb5b 	bl	8000abc <__aeabi_uldivmod>
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	4611      	mov	r1, r2
 800440c:	4b38      	ldr	r3, [pc, #224]	@ (80044f0 <UART_SetConfig+0x4e4>)
 800440e:	fba3 2301 	umull	r2, r3, r3, r1
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	2264      	movs	r2, #100	@ 0x64
 8004416:	fb02 f303 	mul.w	r3, r2, r3
 800441a:	1acb      	subs	r3, r1, r3
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	3332      	adds	r3, #50	@ 0x32
 8004420:	4a33      	ldr	r2, [pc, #204]	@ (80044f0 <UART_SetConfig+0x4e4>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800442c:	441c      	add	r4, r3
 800442e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004432:	2200      	movs	r2, #0
 8004434:	673b      	str	r3, [r7, #112]	@ 0x70
 8004436:	677a      	str	r2, [r7, #116]	@ 0x74
 8004438:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800443c:	4642      	mov	r2, r8
 800443e:	464b      	mov	r3, r9
 8004440:	1891      	adds	r1, r2, r2
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	415b      	adcs	r3, r3
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800444c:	4641      	mov	r1, r8
 800444e:	1851      	adds	r1, r2, r1
 8004450:	6039      	str	r1, [r7, #0]
 8004452:	4649      	mov	r1, r9
 8004454:	414b      	adcs	r3, r1
 8004456:	607b      	str	r3, [r7, #4]
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004464:	4659      	mov	r1, fp
 8004466:	00cb      	lsls	r3, r1, #3
 8004468:	4651      	mov	r1, sl
 800446a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800446e:	4651      	mov	r1, sl
 8004470:	00ca      	lsls	r2, r1, #3
 8004472:	4610      	mov	r0, r2
 8004474:	4619      	mov	r1, r3
 8004476:	4603      	mov	r3, r0
 8004478:	4642      	mov	r2, r8
 800447a:	189b      	adds	r3, r3, r2
 800447c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800447e:	464b      	mov	r3, r9
 8004480:	460a      	mov	r2, r1
 8004482:	eb42 0303 	adc.w	r3, r2, r3
 8004486:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	663b      	str	r3, [r7, #96]	@ 0x60
 8004492:	667a      	str	r2, [r7, #100]	@ 0x64
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044a0:	4649      	mov	r1, r9
 80044a2:	008b      	lsls	r3, r1, #2
 80044a4:	4641      	mov	r1, r8
 80044a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044aa:	4641      	mov	r1, r8
 80044ac:	008a      	lsls	r2, r1, #2
 80044ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044b2:	f7fc fb03 	bl	8000abc <__aeabi_uldivmod>
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	4b0d      	ldr	r3, [pc, #52]	@ (80044f0 <UART_SetConfig+0x4e4>)
 80044bc:	fba3 1302 	umull	r1, r3, r3, r2
 80044c0:	095b      	lsrs	r3, r3, #5
 80044c2:	2164      	movs	r1, #100	@ 0x64
 80044c4:	fb01 f303 	mul.w	r3, r1, r3
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	3332      	adds	r3, #50	@ 0x32
 80044ce:	4a08      	ldr	r2, [pc, #32]	@ (80044f0 <UART_SetConfig+0x4e4>)
 80044d0:	fba2 2303 	umull	r2, r3, r2, r3
 80044d4:	095b      	lsrs	r3, r3, #5
 80044d6:	f003 020f 	and.w	r2, r3, #15
 80044da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4422      	add	r2, r4
 80044e2:	609a      	str	r2, [r3, #8]
}
 80044e4:	bf00      	nop
 80044e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80044ea:	46bd      	mov	sp, r7
 80044ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044f0:	51eb851f 	.word	0x51eb851f

080044f4 <_strtol_l.constprop.0>:
 80044f4:	2b24      	cmp	r3, #36	@ 0x24
 80044f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044fa:	4686      	mov	lr, r0
 80044fc:	4690      	mov	r8, r2
 80044fe:	d801      	bhi.n	8004504 <_strtol_l.constprop.0+0x10>
 8004500:	2b01      	cmp	r3, #1
 8004502:	d106      	bne.n	8004512 <_strtol_l.constprop.0+0x1e>
 8004504:	f000 f8b6 	bl	8004674 <__errno>
 8004508:	2316      	movs	r3, #22
 800450a:	6003      	str	r3, [r0, #0]
 800450c:	2000      	movs	r0, #0
 800450e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004512:	4834      	ldr	r0, [pc, #208]	@ (80045e4 <_strtol_l.constprop.0+0xf0>)
 8004514:	460d      	mov	r5, r1
 8004516:	462a      	mov	r2, r5
 8004518:	f815 4b01 	ldrb.w	r4, [r5], #1
 800451c:	5d06      	ldrb	r6, [r0, r4]
 800451e:	f016 0608 	ands.w	r6, r6, #8
 8004522:	d1f8      	bne.n	8004516 <_strtol_l.constprop.0+0x22>
 8004524:	2c2d      	cmp	r4, #45	@ 0x2d
 8004526:	d12d      	bne.n	8004584 <_strtol_l.constprop.0+0x90>
 8004528:	782c      	ldrb	r4, [r5, #0]
 800452a:	2601      	movs	r6, #1
 800452c:	1c95      	adds	r5, r2, #2
 800452e:	f033 0210 	bics.w	r2, r3, #16
 8004532:	d109      	bne.n	8004548 <_strtol_l.constprop.0+0x54>
 8004534:	2c30      	cmp	r4, #48	@ 0x30
 8004536:	d12a      	bne.n	800458e <_strtol_l.constprop.0+0x9a>
 8004538:	782a      	ldrb	r2, [r5, #0]
 800453a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800453e:	2a58      	cmp	r2, #88	@ 0x58
 8004540:	d125      	bne.n	800458e <_strtol_l.constprop.0+0x9a>
 8004542:	786c      	ldrb	r4, [r5, #1]
 8004544:	2310      	movs	r3, #16
 8004546:	3502      	adds	r5, #2
 8004548:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800454c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004550:	2200      	movs	r2, #0
 8004552:	fbbc f9f3 	udiv	r9, ip, r3
 8004556:	4610      	mov	r0, r2
 8004558:	fb03 ca19 	mls	sl, r3, r9, ip
 800455c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004560:	2f09      	cmp	r7, #9
 8004562:	d81b      	bhi.n	800459c <_strtol_l.constprop.0+0xa8>
 8004564:	463c      	mov	r4, r7
 8004566:	42a3      	cmp	r3, r4
 8004568:	dd27      	ble.n	80045ba <_strtol_l.constprop.0+0xc6>
 800456a:	1c57      	adds	r7, r2, #1
 800456c:	d007      	beq.n	800457e <_strtol_l.constprop.0+0x8a>
 800456e:	4581      	cmp	r9, r0
 8004570:	d320      	bcc.n	80045b4 <_strtol_l.constprop.0+0xc0>
 8004572:	d101      	bne.n	8004578 <_strtol_l.constprop.0+0x84>
 8004574:	45a2      	cmp	sl, r4
 8004576:	db1d      	blt.n	80045b4 <_strtol_l.constprop.0+0xc0>
 8004578:	fb00 4003 	mla	r0, r0, r3, r4
 800457c:	2201      	movs	r2, #1
 800457e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004582:	e7eb      	b.n	800455c <_strtol_l.constprop.0+0x68>
 8004584:	2c2b      	cmp	r4, #43	@ 0x2b
 8004586:	bf04      	itt	eq
 8004588:	782c      	ldrbeq	r4, [r5, #0]
 800458a:	1c95      	addeq	r5, r2, #2
 800458c:	e7cf      	b.n	800452e <_strtol_l.constprop.0+0x3a>
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1da      	bne.n	8004548 <_strtol_l.constprop.0+0x54>
 8004592:	2c30      	cmp	r4, #48	@ 0x30
 8004594:	bf0c      	ite	eq
 8004596:	2308      	moveq	r3, #8
 8004598:	230a      	movne	r3, #10
 800459a:	e7d5      	b.n	8004548 <_strtol_l.constprop.0+0x54>
 800459c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80045a0:	2f19      	cmp	r7, #25
 80045a2:	d801      	bhi.n	80045a8 <_strtol_l.constprop.0+0xb4>
 80045a4:	3c37      	subs	r4, #55	@ 0x37
 80045a6:	e7de      	b.n	8004566 <_strtol_l.constprop.0+0x72>
 80045a8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80045ac:	2f19      	cmp	r7, #25
 80045ae:	d804      	bhi.n	80045ba <_strtol_l.constprop.0+0xc6>
 80045b0:	3c57      	subs	r4, #87	@ 0x57
 80045b2:	e7d8      	b.n	8004566 <_strtol_l.constprop.0+0x72>
 80045b4:	f04f 32ff 	mov.w	r2, #4294967295
 80045b8:	e7e1      	b.n	800457e <_strtol_l.constprop.0+0x8a>
 80045ba:	1c53      	adds	r3, r2, #1
 80045bc:	d108      	bne.n	80045d0 <_strtol_l.constprop.0+0xdc>
 80045be:	2322      	movs	r3, #34	@ 0x22
 80045c0:	f8ce 3000 	str.w	r3, [lr]
 80045c4:	4660      	mov	r0, ip
 80045c6:	f1b8 0f00 	cmp.w	r8, #0
 80045ca:	d0a0      	beq.n	800450e <_strtol_l.constprop.0+0x1a>
 80045cc:	1e69      	subs	r1, r5, #1
 80045ce:	e006      	b.n	80045de <_strtol_l.constprop.0+0xea>
 80045d0:	b106      	cbz	r6, 80045d4 <_strtol_l.constprop.0+0xe0>
 80045d2:	4240      	negs	r0, r0
 80045d4:	f1b8 0f00 	cmp.w	r8, #0
 80045d8:	d099      	beq.n	800450e <_strtol_l.constprop.0+0x1a>
 80045da:	2a00      	cmp	r2, #0
 80045dc:	d1f6      	bne.n	80045cc <_strtol_l.constprop.0+0xd8>
 80045de:	f8c8 1000 	str.w	r1, [r8]
 80045e2:	e794      	b.n	800450e <_strtol_l.constprop.0+0x1a>
 80045e4:	08005069 	.word	0x08005069

080045e8 <strtol>:
 80045e8:	4613      	mov	r3, r2
 80045ea:	460a      	mov	r2, r1
 80045ec:	4601      	mov	r1, r0
 80045ee:	4802      	ldr	r0, [pc, #8]	@ (80045f8 <strtol+0x10>)
 80045f0:	6800      	ldr	r0, [r0, #0]
 80045f2:	f7ff bf7f 	b.w	80044f4 <_strtol_l.constprop.0>
 80045f6:	bf00      	nop
 80045f8:	20000034 	.word	0x20000034

080045fc <sniprintf>:
 80045fc:	b40c      	push	{r2, r3}
 80045fe:	b530      	push	{r4, r5, lr}
 8004600:	4b17      	ldr	r3, [pc, #92]	@ (8004660 <sniprintf+0x64>)
 8004602:	1e0c      	subs	r4, r1, #0
 8004604:	681d      	ldr	r5, [r3, #0]
 8004606:	b09d      	sub	sp, #116	@ 0x74
 8004608:	da08      	bge.n	800461c <sniprintf+0x20>
 800460a:	238b      	movs	r3, #139	@ 0x8b
 800460c:	602b      	str	r3, [r5, #0]
 800460e:	f04f 30ff 	mov.w	r0, #4294967295
 8004612:	b01d      	add	sp, #116	@ 0x74
 8004614:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004618:	b002      	add	sp, #8
 800461a:	4770      	bx	lr
 800461c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004620:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004624:	bf14      	ite	ne
 8004626:	f104 33ff 	addne.w	r3, r4, #4294967295
 800462a:	4623      	moveq	r3, r4
 800462c:	9304      	str	r3, [sp, #16]
 800462e:	9307      	str	r3, [sp, #28]
 8004630:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004634:	9002      	str	r0, [sp, #8]
 8004636:	9006      	str	r0, [sp, #24]
 8004638:	f8ad 3016 	strh.w	r3, [sp, #22]
 800463c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800463e:	ab21      	add	r3, sp, #132	@ 0x84
 8004640:	a902      	add	r1, sp, #8
 8004642:	4628      	mov	r0, r5
 8004644:	9301      	str	r3, [sp, #4]
 8004646:	f000 f995 	bl	8004974 <_svfiprintf_r>
 800464a:	1c43      	adds	r3, r0, #1
 800464c:	bfbc      	itt	lt
 800464e:	238b      	movlt	r3, #139	@ 0x8b
 8004650:	602b      	strlt	r3, [r5, #0]
 8004652:	2c00      	cmp	r4, #0
 8004654:	d0dd      	beq.n	8004612 <sniprintf+0x16>
 8004656:	9b02      	ldr	r3, [sp, #8]
 8004658:	2200      	movs	r2, #0
 800465a:	701a      	strb	r2, [r3, #0]
 800465c:	e7d9      	b.n	8004612 <sniprintf+0x16>
 800465e:	bf00      	nop
 8004660:	20000034 	.word	0x20000034

08004664 <memset>:
 8004664:	4402      	add	r2, r0
 8004666:	4603      	mov	r3, r0
 8004668:	4293      	cmp	r3, r2
 800466a:	d100      	bne.n	800466e <memset+0xa>
 800466c:	4770      	bx	lr
 800466e:	f803 1b01 	strb.w	r1, [r3], #1
 8004672:	e7f9      	b.n	8004668 <memset+0x4>

08004674 <__errno>:
 8004674:	4b01      	ldr	r3, [pc, #4]	@ (800467c <__errno+0x8>)
 8004676:	6818      	ldr	r0, [r3, #0]
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	20000034 	.word	0x20000034

08004680 <__libc_init_array>:
 8004680:	b570      	push	{r4, r5, r6, lr}
 8004682:	4d0d      	ldr	r5, [pc, #52]	@ (80046b8 <__libc_init_array+0x38>)
 8004684:	4c0d      	ldr	r4, [pc, #52]	@ (80046bc <__libc_init_array+0x3c>)
 8004686:	1b64      	subs	r4, r4, r5
 8004688:	10a4      	asrs	r4, r4, #2
 800468a:	2600      	movs	r6, #0
 800468c:	42a6      	cmp	r6, r4
 800468e:	d109      	bne.n	80046a4 <__libc_init_array+0x24>
 8004690:	4d0b      	ldr	r5, [pc, #44]	@ (80046c0 <__libc_init_array+0x40>)
 8004692:	4c0c      	ldr	r4, [pc, #48]	@ (80046c4 <__libc_init_array+0x44>)
 8004694:	f000 fc66 	bl	8004f64 <_init>
 8004698:	1b64      	subs	r4, r4, r5
 800469a:	10a4      	asrs	r4, r4, #2
 800469c:	2600      	movs	r6, #0
 800469e:	42a6      	cmp	r6, r4
 80046a0:	d105      	bne.n	80046ae <__libc_init_array+0x2e>
 80046a2:	bd70      	pop	{r4, r5, r6, pc}
 80046a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80046a8:	4798      	blx	r3
 80046aa:	3601      	adds	r6, #1
 80046ac:	e7ee      	b.n	800468c <__libc_init_array+0xc>
 80046ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80046b2:	4798      	blx	r3
 80046b4:	3601      	adds	r6, #1
 80046b6:	e7f2      	b.n	800469e <__libc_init_array+0x1e>
 80046b8:	080051a4 	.word	0x080051a4
 80046bc:	080051a4 	.word	0x080051a4
 80046c0:	080051a4 	.word	0x080051a4
 80046c4:	080051a8 	.word	0x080051a8

080046c8 <__retarget_lock_acquire_recursive>:
 80046c8:	4770      	bx	lr

080046ca <__retarget_lock_release_recursive>:
 80046ca:	4770      	bx	lr

080046cc <_free_r>:
 80046cc:	b538      	push	{r3, r4, r5, lr}
 80046ce:	4605      	mov	r5, r0
 80046d0:	2900      	cmp	r1, #0
 80046d2:	d041      	beq.n	8004758 <_free_r+0x8c>
 80046d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046d8:	1f0c      	subs	r4, r1, #4
 80046da:	2b00      	cmp	r3, #0
 80046dc:	bfb8      	it	lt
 80046de:	18e4      	addlt	r4, r4, r3
 80046e0:	f000 f8e0 	bl	80048a4 <__malloc_lock>
 80046e4:	4a1d      	ldr	r2, [pc, #116]	@ (800475c <_free_r+0x90>)
 80046e6:	6813      	ldr	r3, [r2, #0]
 80046e8:	b933      	cbnz	r3, 80046f8 <_free_r+0x2c>
 80046ea:	6063      	str	r3, [r4, #4]
 80046ec:	6014      	str	r4, [r2, #0]
 80046ee:	4628      	mov	r0, r5
 80046f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046f4:	f000 b8dc 	b.w	80048b0 <__malloc_unlock>
 80046f8:	42a3      	cmp	r3, r4
 80046fa:	d908      	bls.n	800470e <_free_r+0x42>
 80046fc:	6820      	ldr	r0, [r4, #0]
 80046fe:	1821      	adds	r1, r4, r0
 8004700:	428b      	cmp	r3, r1
 8004702:	bf01      	itttt	eq
 8004704:	6819      	ldreq	r1, [r3, #0]
 8004706:	685b      	ldreq	r3, [r3, #4]
 8004708:	1809      	addeq	r1, r1, r0
 800470a:	6021      	streq	r1, [r4, #0]
 800470c:	e7ed      	b.n	80046ea <_free_r+0x1e>
 800470e:	461a      	mov	r2, r3
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	b10b      	cbz	r3, 8004718 <_free_r+0x4c>
 8004714:	42a3      	cmp	r3, r4
 8004716:	d9fa      	bls.n	800470e <_free_r+0x42>
 8004718:	6811      	ldr	r1, [r2, #0]
 800471a:	1850      	adds	r0, r2, r1
 800471c:	42a0      	cmp	r0, r4
 800471e:	d10b      	bne.n	8004738 <_free_r+0x6c>
 8004720:	6820      	ldr	r0, [r4, #0]
 8004722:	4401      	add	r1, r0
 8004724:	1850      	adds	r0, r2, r1
 8004726:	4283      	cmp	r3, r0
 8004728:	6011      	str	r1, [r2, #0]
 800472a:	d1e0      	bne.n	80046ee <_free_r+0x22>
 800472c:	6818      	ldr	r0, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	6053      	str	r3, [r2, #4]
 8004732:	4408      	add	r0, r1
 8004734:	6010      	str	r0, [r2, #0]
 8004736:	e7da      	b.n	80046ee <_free_r+0x22>
 8004738:	d902      	bls.n	8004740 <_free_r+0x74>
 800473a:	230c      	movs	r3, #12
 800473c:	602b      	str	r3, [r5, #0]
 800473e:	e7d6      	b.n	80046ee <_free_r+0x22>
 8004740:	6820      	ldr	r0, [r4, #0]
 8004742:	1821      	adds	r1, r4, r0
 8004744:	428b      	cmp	r3, r1
 8004746:	bf04      	itt	eq
 8004748:	6819      	ldreq	r1, [r3, #0]
 800474a:	685b      	ldreq	r3, [r3, #4]
 800474c:	6063      	str	r3, [r4, #4]
 800474e:	bf04      	itt	eq
 8004750:	1809      	addeq	r1, r1, r0
 8004752:	6021      	streq	r1, [r4, #0]
 8004754:	6054      	str	r4, [r2, #4]
 8004756:	e7ca      	b.n	80046ee <_free_r+0x22>
 8004758:	bd38      	pop	{r3, r4, r5, pc}
 800475a:	bf00      	nop
 800475c:	200002d0 	.word	0x200002d0

08004760 <sbrk_aligned>:
 8004760:	b570      	push	{r4, r5, r6, lr}
 8004762:	4e0f      	ldr	r6, [pc, #60]	@ (80047a0 <sbrk_aligned+0x40>)
 8004764:	460c      	mov	r4, r1
 8004766:	6831      	ldr	r1, [r6, #0]
 8004768:	4605      	mov	r5, r0
 800476a:	b911      	cbnz	r1, 8004772 <sbrk_aligned+0x12>
 800476c:	f000 fba6 	bl	8004ebc <_sbrk_r>
 8004770:	6030      	str	r0, [r6, #0]
 8004772:	4621      	mov	r1, r4
 8004774:	4628      	mov	r0, r5
 8004776:	f000 fba1 	bl	8004ebc <_sbrk_r>
 800477a:	1c43      	adds	r3, r0, #1
 800477c:	d103      	bne.n	8004786 <sbrk_aligned+0x26>
 800477e:	f04f 34ff 	mov.w	r4, #4294967295
 8004782:	4620      	mov	r0, r4
 8004784:	bd70      	pop	{r4, r5, r6, pc}
 8004786:	1cc4      	adds	r4, r0, #3
 8004788:	f024 0403 	bic.w	r4, r4, #3
 800478c:	42a0      	cmp	r0, r4
 800478e:	d0f8      	beq.n	8004782 <sbrk_aligned+0x22>
 8004790:	1a21      	subs	r1, r4, r0
 8004792:	4628      	mov	r0, r5
 8004794:	f000 fb92 	bl	8004ebc <_sbrk_r>
 8004798:	3001      	adds	r0, #1
 800479a:	d1f2      	bne.n	8004782 <sbrk_aligned+0x22>
 800479c:	e7ef      	b.n	800477e <sbrk_aligned+0x1e>
 800479e:	bf00      	nop
 80047a0:	200002cc 	.word	0x200002cc

080047a4 <_malloc_r>:
 80047a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047a8:	1ccd      	adds	r5, r1, #3
 80047aa:	f025 0503 	bic.w	r5, r5, #3
 80047ae:	3508      	adds	r5, #8
 80047b0:	2d0c      	cmp	r5, #12
 80047b2:	bf38      	it	cc
 80047b4:	250c      	movcc	r5, #12
 80047b6:	2d00      	cmp	r5, #0
 80047b8:	4606      	mov	r6, r0
 80047ba:	db01      	blt.n	80047c0 <_malloc_r+0x1c>
 80047bc:	42a9      	cmp	r1, r5
 80047be:	d904      	bls.n	80047ca <_malloc_r+0x26>
 80047c0:	230c      	movs	r3, #12
 80047c2:	6033      	str	r3, [r6, #0]
 80047c4:	2000      	movs	r0, #0
 80047c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80048a0 <_malloc_r+0xfc>
 80047ce:	f000 f869 	bl	80048a4 <__malloc_lock>
 80047d2:	f8d8 3000 	ldr.w	r3, [r8]
 80047d6:	461c      	mov	r4, r3
 80047d8:	bb44      	cbnz	r4, 800482c <_malloc_r+0x88>
 80047da:	4629      	mov	r1, r5
 80047dc:	4630      	mov	r0, r6
 80047de:	f7ff ffbf 	bl	8004760 <sbrk_aligned>
 80047e2:	1c43      	adds	r3, r0, #1
 80047e4:	4604      	mov	r4, r0
 80047e6:	d158      	bne.n	800489a <_malloc_r+0xf6>
 80047e8:	f8d8 4000 	ldr.w	r4, [r8]
 80047ec:	4627      	mov	r7, r4
 80047ee:	2f00      	cmp	r7, #0
 80047f0:	d143      	bne.n	800487a <_malloc_r+0xd6>
 80047f2:	2c00      	cmp	r4, #0
 80047f4:	d04b      	beq.n	800488e <_malloc_r+0xea>
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	4639      	mov	r1, r7
 80047fa:	4630      	mov	r0, r6
 80047fc:	eb04 0903 	add.w	r9, r4, r3
 8004800:	f000 fb5c 	bl	8004ebc <_sbrk_r>
 8004804:	4581      	cmp	r9, r0
 8004806:	d142      	bne.n	800488e <_malloc_r+0xea>
 8004808:	6821      	ldr	r1, [r4, #0]
 800480a:	1a6d      	subs	r5, r5, r1
 800480c:	4629      	mov	r1, r5
 800480e:	4630      	mov	r0, r6
 8004810:	f7ff ffa6 	bl	8004760 <sbrk_aligned>
 8004814:	3001      	adds	r0, #1
 8004816:	d03a      	beq.n	800488e <_malloc_r+0xea>
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	442b      	add	r3, r5
 800481c:	6023      	str	r3, [r4, #0]
 800481e:	f8d8 3000 	ldr.w	r3, [r8]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	bb62      	cbnz	r2, 8004880 <_malloc_r+0xdc>
 8004826:	f8c8 7000 	str.w	r7, [r8]
 800482a:	e00f      	b.n	800484c <_malloc_r+0xa8>
 800482c:	6822      	ldr	r2, [r4, #0]
 800482e:	1b52      	subs	r2, r2, r5
 8004830:	d420      	bmi.n	8004874 <_malloc_r+0xd0>
 8004832:	2a0b      	cmp	r2, #11
 8004834:	d917      	bls.n	8004866 <_malloc_r+0xc2>
 8004836:	1961      	adds	r1, r4, r5
 8004838:	42a3      	cmp	r3, r4
 800483a:	6025      	str	r5, [r4, #0]
 800483c:	bf18      	it	ne
 800483e:	6059      	strne	r1, [r3, #4]
 8004840:	6863      	ldr	r3, [r4, #4]
 8004842:	bf08      	it	eq
 8004844:	f8c8 1000 	streq.w	r1, [r8]
 8004848:	5162      	str	r2, [r4, r5]
 800484a:	604b      	str	r3, [r1, #4]
 800484c:	4630      	mov	r0, r6
 800484e:	f000 f82f 	bl	80048b0 <__malloc_unlock>
 8004852:	f104 000b 	add.w	r0, r4, #11
 8004856:	1d23      	adds	r3, r4, #4
 8004858:	f020 0007 	bic.w	r0, r0, #7
 800485c:	1ac2      	subs	r2, r0, r3
 800485e:	bf1c      	itt	ne
 8004860:	1a1b      	subne	r3, r3, r0
 8004862:	50a3      	strne	r3, [r4, r2]
 8004864:	e7af      	b.n	80047c6 <_malloc_r+0x22>
 8004866:	6862      	ldr	r2, [r4, #4]
 8004868:	42a3      	cmp	r3, r4
 800486a:	bf0c      	ite	eq
 800486c:	f8c8 2000 	streq.w	r2, [r8]
 8004870:	605a      	strne	r2, [r3, #4]
 8004872:	e7eb      	b.n	800484c <_malloc_r+0xa8>
 8004874:	4623      	mov	r3, r4
 8004876:	6864      	ldr	r4, [r4, #4]
 8004878:	e7ae      	b.n	80047d8 <_malloc_r+0x34>
 800487a:	463c      	mov	r4, r7
 800487c:	687f      	ldr	r7, [r7, #4]
 800487e:	e7b6      	b.n	80047ee <_malloc_r+0x4a>
 8004880:	461a      	mov	r2, r3
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	42a3      	cmp	r3, r4
 8004886:	d1fb      	bne.n	8004880 <_malloc_r+0xdc>
 8004888:	2300      	movs	r3, #0
 800488a:	6053      	str	r3, [r2, #4]
 800488c:	e7de      	b.n	800484c <_malloc_r+0xa8>
 800488e:	230c      	movs	r3, #12
 8004890:	6033      	str	r3, [r6, #0]
 8004892:	4630      	mov	r0, r6
 8004894:	f000 f80c 	bl	80048b0 <__malloc_unlock>
 8004898:	e794      	b.n	80047c4 <_malloc_r+0x20>
 800489a:	6005      	str	r5, [r0, #0]
 800489c:	e7d6      	b.n	800484c <_malloc_r+0xa8>
 800489e:	bf00      	nop
 80048a0:	200002d0 	.word	0x200002d0

080048a4 <__malloc_lock>:
 80048a4:	4801      	ldr	r0, [pc, #4]	@ (80048ac <__malloc_lock+0x8>)
 80048a6:	f7ff bf0f 	b.w	80046c8 <__retarget_lock_acquire_recursive>
 80048aa:	bf00      	nop
 80048ac:	200002c8 	.word	0x200002c8

080048b0 <__malloc_unlock>:
 80048b0:	4801      	ldr	r0, [pc, #4]	@ (80048b8 <__malloc_unlock+0x8>)
 80048b2:	f7ff bf0a 	b.w	80046ca <__retarget_lock_release_recursive>
 80048b6:	bf00      	nop
 80048b8:	200002c8 	.word	0x200002c8

080048bc <__ssputs_r>:
 80048bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048c0:	688e      	ldr	r6, [r1, #8]
 80048c2:	461f      	mov	r7, r3
 80048c4:	42be      	cmp	r6, r7
 80048c6:	680b      	ldr	r3, [r1, #0]
 80048c8:	4682      	mov	sl, r0
 80048ca:	460c      	mov	r4, r1
 80048cc:	4690      	mov	r8, r2
 80048ce:	d82d      	bhi.n	800492c <__ssputs_r+0x70>
 80048d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80048d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80048d8:	d026      	beq.n	8004928 <__ssputs_r+0x6c>
 80048da:	6965      	ldr	r5, [r4, #20]
 80048dc:	6909      	ldr	r1, [r1, #16]
 80048de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048e2:	eba3 0901 	sub.w	r9, r3, r1
 80048e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048ea:	1c7b      	adds	r3, r7, #1
 80048ec:	444b      	add	r3, r9
 80048ee:	106d      	asrs	r5, r5, #1
 80048f0:	429d      	cmp	r5, r3
 80048f2:	bf38      	it	cc
 80048f4:	461d      	movcc	r5, r3
 80048f6:	0553      	lsls	r3, r2, #21
 80048f8:	d527      	bpl.n	800494a <__ssputs_r+0x8e>
 80048fa:	4629      	mov	r1, r5
 80048fc:	f7ff ff52 	bl	80047a4 <_malloc_r>
 8004900:	4606      	mov	r6, r0
 8004902:	b360      	cbz	r0, 800495e <__ssputs_r+0xa2>
 8004904:	6921      	ldr	r1, [r4, #16]
 8004906:	464a      	mov	r2, r9
 8004908:	f000 fae8 	bl	8004edc <memcpy>
 800490c:	89a3      	ldrh	r3, [r4, #12]
 800490e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004916:	81a3      	strh	r3, [r4, #12]
 8004918:	6126      	str	r6, [r4, #16]
 800491a:	6165      	str	r5, [r4, #20]
 800491c:	444e      	add	r6, r9
 800491e:	eba5 0509 	sub.w	r5, r5, r9
 8004922:	6026      	str	r6, [r4, #0]
 8004924:	60a5      	str	r5, [r4, #8]
 8004926:	463e      	mov	r6, r7
 8004928:	42be      	cmp	r6, r7
 800492a:	d900      	bls.n	800492e <__ssputs_r+0x72>
 800492c:	463e      	mov	r6, r7
 800492e:	6820      	ldr	r0, [r4, #0]
 8004930:	4632      	mov	r2, r6
 8004932:	4641      	mov	r1, r8
 8004934:	f000 faa8 	bl	8004e88 <memmove>
 8004938:	68a3      	ldr	r3, [r4, #8]
 800493a:	1b9b      	subs	r3, r3, r6
 800493c:	60a3      	str	r3, [r4, #8]
 800493e:	6823      	ldr	r3, [r4, #0]
 8004940:	4433      	add	r3, r6
 8004942:	6023      	str	r3, [r4, #0]
 8004944:	2000      	movs	r0, #0
 8004946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800494a:	462a      	mov	r2, r5
 800494c:	f000 fad4 	bl	8004ef8 <_realloc_r>
 8004950:	4606      	mov	r6, r0
 8004952:	2800      	cmp	r0, #0
 8004954:	d1e0      	bne.n	8004918 <__ssputs_r+0x5c>
 8004956:	6921      	ldr	r1, [r4, #16]
 8004958:	4650      	mov	r0, sl
 800495a:	f7ff feb7 	bl	80046cc <_free_r>
 800495e:	230c      	movs	r3, #12
 8004960:	f8ca 3000 	str.w	r3, [sl]
 8004964:	89a3      	ldrh	r3, [r4, #12]
 8004966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800496a:	81a3      	strh	r3, [r4, #12]
 800496c:	f04f 30ff 	mov.w	r0, #4294967295
 8004970:	e7e9      	b.n	8004946 <__ssputs_r+0x8a>
	...

08004974 <_svfiprintf_r>:
 8004974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004978:	4698      	mov	r8, r3
 800497a:	898b      	ldrh	r3, [r1, #12]
 800497c:	061b      	lsls	r3, r3, #24
 800497e:	b09d      	sub	sp, #116	@ 0x74
 8004980:	4607      	mov	r7, r0
 8004982:	460d      	mov	r5, r1
 8004984:	4614      	mov	r4, r2
 8004986:	d510      	bpl.n	80049aa <_svfiprintf_r+0x36>
 8004988:	690b      	ldr	r3, [r1, #16]
 800498a:	b973      	cbnz	r3, 80049aa <_svfiprintf_r+0x36>
 800498c:	2140      	movs	r1, #64	@ 0x40
 800498e:	f7ff ff09 	bl	80047a4 <_malloc_r>
 8004992:	6028      	str	r0, [r5, #0]
 8004994:	6128      	str	r0, [r5, #16]
 8004996:	b930      	cbnz	r0, 80049a6 <_svfiprintf_r+0x32>
 8004998:	230c      	movs	r3, #12
 800499a:	603b      	str	r3, [r7, #0]
 800499c:	f04f 30ff 	mov.w	r0, #4294967295
 80049a0:	b01d      	add	sp, #116	@ 0x74
 80049a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a6:	2340      	movs	r3, #64	@ 0x40
 80049a8:	616b      	str	r3, [r5, #20]
 80049aa:	2300      	movs	r3, #0
 80049ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80049ae:	2320      	movs	r3, #32
 80049b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80049b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80049b8:	2330      	movs	r3, #48	@ 0x30
 80049ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004b58 <_svfiprintf_r+0x1e4>
 80049be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80049c2:	f04f 0901 	mov.w	r9, #1
 80049c6:	4623      	mov	r3, r4
 80049c8:	469a      	mov	sl, r3
 80049ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049ce:	b10a      	cbz	r2, 80049d4 <_svfiprintf_r+0x60>
 80049d0:	2a25      	cmp	r2, #37	@ 0x25
 80049d2:	d1f9      	bne.n	80049c8 <_svfiprintf_r+0x54>
 80049d4:	ebba 0b04 	subs.w	fp, sl, r4
 80049d8:	d00b      	beq.n	80049f2 <_svfiprintf_r+0x7e>
 80049da:	465b      	mov	r3, fp
 80049dc:	4622      	mov	r2, r4
 80049de:	4629      	mov	r1, r5
 80049e0:	4638      	mov	r0, r7
 80049e2:	f7ff ff6b 	bl	80048bc <__ssputs_r>
 80049e6:	3001      	adds	r0, #1
 80049e8:	f000 80a7 	beq.w	8004b3a <_svfiprintf_r+0x1c6>
 80049ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049ee:	445a      	add	r2, fp
 80049f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80049f2:	f89a 3000 	ldrb.w	r3, [sl]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 809f 	beq.w	8004b3a <_svfiprintf_r+0x1c6>
 80049fc:	2300      	movs	r3, #0
 80049fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004a02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a06:	f10a 0a01 	add.w	sl, sl, #1
 8004a0a:	9304      	str	r3, [sp, #16]
 8004a0c:	9307      	str	r3, [sp, #28]
 8004a0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a12:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a14:	4654      	mov	r4, sl
 8004a16:	2205      	movs	r2, #5
 8004a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a1c:	484e      	ldr	r0, [pc, #312]	@ (8004b58 <_svfiprintf_r+0x1e4>)
 8004a1e:	f7fb fbdf 	bl	80001e0 <memchr>
 8004a22:	9a04      	ldr	r2, [sp, #16]
 8004a24:	b9d8      	cbnz	r0, 8004a5e <_svfiprintf_r+0xea>
 8004a26:	06d0      	lsls	r0, r2, #27
 8004a28:	bf44      	itt	mi
 8004a2a:	2320      	movmi	r3, #32
 8004a2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a30:	0711      	lsls	r1, r2, #28
 8004a32:	bf44      	itt	mi
 8004a34:	232b      	movmi	r3, #43	@ 0x2b
 8004a36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a3a:	f89a 3000 	ldrb.w	r3, [sl]
 8004a3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a40:	d015      	beq.n	8004a6e <_svfiprintf_r+0xfa>
 8004a42:	9a07      	ldr	r2, [sp, #28]
 8004a44:	4654      	mov	r4, sl
 8004a46:	2000      	movs	r0, #0
 8004a48:	f04f 0c0a 	mov.w	ip, #10
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a52:	3b30      	subs	r3, #48	@ 0x30
 8004a54:	2b09      	cmp	r3, #9
 8004a56:	d94b      	bls.n	8004af0 <_svfiprintf_r+0x17c>
 8004a58:	b1b0      	cbz	r0, 8004a88 <_svfiprintf_r+0x114>
 8004a5a:	9207      	str	r2, [sp, #28]
 8004a5c:	e014      	b.n	8004a88 <_svfiprintf_r+0x114>
 8004a5e:	eba0 0308 	sub.w	r3, r0, r8
 8004a62:	fa09 f303 	lsl.w	r3, r9, r3
 8004a66:	4313      	orrs	r3, r2
 8004a68:	9304      	str	r3, [sp, #16]
 8004a6a:	46a2      	mov	sl, r4
 8004a6c:	e7d2      	b.n	8004a14 <_svfiprintf_r+0xa0>
 8004a6e:	9b03      	ldr	r3, [sp, #12]
 8004a70:	1d19      	adds	r1, r3, #4
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	9103      	str	r1, [sp, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	bfbb      	ittet	lt
 8004a7a:	425b      	neglt	r3, r3
 8004a7c:	f042 0202 	orrlt.w	r2, r2, #2
 8004a80:	9307      	strge	r3, [sp, #28]
 8004a82:	9307      	strlt	r3, [sp, #28]
 8004a84:	bfb8      	it	lt
 8004a86:	9204      	strlt	r2, [sp, #16]
 8004a88:	7823      	ldrb	r3, [r4, #0]
 8004a8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a8c:	d10a      	bne.n	8004aa4 <_svfiprintf_r+0x130>
 8004a8e:	7863      	ldrb	r3, [r4, #1]
 8004a90:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a92:	d132      	bne.n	8004afa <_svfiprintf_r+0x186>
 8004a94:	9b03      	ldr	r3, [sp, #12]
 8004a96:	1d1a      	adds	r2, r3, #4
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	9203      	str	r2, [sp, #12]
 8004a9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004aa0:	3402      	adds	r4, #2
 8004aa2:	9305      	str	r3, [sp, #20]
 8004aa4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004b68 <_svfiprintf_r+0x1f4>
 8004aa8:	7821      	ldrb	r1, [r4, #0]
 8004aaa:	2203      	movs	r2, #3
 8004aac:	4650      	mov	r0, sl
 8004aae:	f7fb fb97 	bl	80001e0 <memchr>
 8004ab2:	b138      	cbz	r0, 8004ac4 <_svfiprintf_r+0x150>
 8004ab4:	9b04      	ldr	r3, [sp, #16]
 8004ab6:	eba0 000a 	sub.w	r0, r0, sl
 8004aba:	2240      	movs	r2, #64	@ 0x40
 8004abc:	4082      	lsls	r2, r0
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	3401      	adds	r4, #1
 8004ac2:	9304      	str	r3, [sp, #16]
 8004ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ac8:	4824      	ldr	r0, [pc, #144]	@ (8004b5c <_svfiprintf_r+0x1e8>)
 8004aca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ace:	2206      	movs	r2, #6
 8004ad0:	f7fb fb86 	bl	80001e0 <memchr>
 8004ad4:	2800      	cmp	r0, #0
 8004ad6:	d036      	beq.n	8004b46 <_svfiprintf_r+0x1d2>
 8004ad8:	4b21      	ldr	r3, [pc, #132]	@ (8004b60 <_svfiprintf_r+0x1ec>)
 8004ada:	bb1b      	cbnz	r3, 8004b24 <_svfiprintf_r+0x1b0>
 8004adc:	9b03      	ldr	r3, [sp, #12]
 8004ade:	3307      	adds	r3, #7
 8004ae0:	f023 0307 	bic.w	r3, r3, #7
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	9303      	str	r3, [sp, #12]
 8004ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004aea:	4433      	add	r3, r6
 8004aec:	9309      	str	r3, [sp, #36]	@ 0x24
 8004aee:	e76a      	b.n	80049c6 <_svfiprintf_r+0x52>
 8004af0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004af4:	460c      	mov	r4, r1
 8004af6:	2001      	movs	r0, #1
 8004af8:	e7a8      	b.n	8004a4c <_svfiprintf_r+0xd8>
 8004afa:	2300      	movs	r3, #0
 8004afc:	3401      	adds	r4, #1
 8004afe:	9305      	str	r3, [sp, #20]
 8004b00:	4619      	mov	r1, r3
 8004b02:	f04f 0c0a 	mov.w	ip, #10
 8004b06:	4620      	mov	r0, r4
 8004b08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b0c:	3a30      	subs	r2, #48	@ 0x30
 8004b0e:	2a09      	cmp	r2, #9
 8004b10:	d903      	bls.n	8004b1a <_svfiprintf_r+0x1a6>
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0c6      	beq.n	8004aa4 <_svfiprintf_r+0x130>
 8004b16:	9105      	str	r1, [sp, #20]
 8004b18:	e7c4      	b.n	8004aa4 <_svfiprintf_r+0x130>
 8004b1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b1e:	4604      	mov	r4, r0
 8004b20:	2301      	movs	r3, #1
 8004b22:	e7f0      	b.n	8004b06 <_svfiprintf_r+0x192>
 8004b24:	ab03      	add	r3, sp, #12
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	462a      	mov	r2, r5
 8004b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8004b64 <_svfiprintf_r+0x1f0>)
 8004b2c:	a904      	add	r1, sp, #16
 8004b2e:	4638      	mov	r0, r7
 8004b30:	f3af 8000 	nop.w
 8004b34:	1c42      	adds	r2, r0, #1
 8004b36:	4606      	mov	r6, r0
 8004b38:	d1d6      	bne.n	8004ae8 <_svfiprintf_r+0x174>
 8004b3a:	89ab      	ldrh	r3, [r5, #12]
 8004b3c:	065b      	lsls	r3, r3, #25
 8004b3e:	f53f af2d 	bmi.w	800499c <_svfiprintf_r+0x28>
 8004b42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b44:	e72c      	b.n	80049a0 <_svfiprintf_r+0x2c>
 8004b46:	ab03      	add	r3, sp, #12
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	462a      	mov	r2, r5
 8004b4c:	4b05      	ldr	r3, [pc, #20]	@ (8004b64 <_svfiprintf_r+0x1f0>)
 8004b4e:	a904      	add	r1, sp, #16
 8004b50:	4638      	mov	r0, r7
 8004b52:	f000 f879 	bl	8004c48 <_printf_i>
 8004b56:	e7ed      	b.n	8004b34 <_svfiprintf_r+0x1c0>
 8004b58:	08005169 	.word	0x08005169
 8004b5c:	08005173 	.word	0x08005173
 8004b60:	00000000 	.word	0x00000000
 8004b64:	080048bd 	.word	0x080048bd
 8004b68:	0800516f 	.word	0x0800516f

08004b6c <_printf_common>:
 8004b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b70:	4616      	mov	r6, r2
 8004b72:	4698      	mov	r8, r3
 8004b74:	688a      	ldr	r2, [r1, #8]
 8004b76:	690b      	ldr	r3, [r1, #16]
 8004b78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	bfb8      	it	lt
 8004b80:	4613      	movlt	r3, r2
 8004b82:	6033      	str	r3, [r6, #0]
 8004b84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b88:	4607      	mov	r7, r0
 8004b8a:	460c      	mov	r4, r1
 8004b8c:	b10a      	cbz	r2, 8004b92 <_printf_common+0x26>
 8004b8e:	3301      	adds	r3, #1
 8004b90:	6033      	str	r3, [r6, #0]
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	0699      	lsls	r1, r3, #26
 8004b96:	bf42      	ittt	mi
 8004b98:	6833      	ldrmi	r3, [r6, #0]
 8004b9a:	3302      	addmi	r3, #2
 8004b9c:	6033      	strmi	r3, [r6, #0]
 8004b9e:	6825      	ldr	r5, [r4, #0]
 8004ba0:	f015 0506 	ands.w	r5, r5, #6
 8004ba4:	d106      	bne.n	8004bb4 <_printf_common+0x48>
 8004ba6:	f104 0a19 	add.w	sl, r4, #25
 8004baa:	68e3      	ldr	r3, [r4, #12]
 8004bac:	6832      	ldr	r2, [r6, #0]
 8004bae:	1a9b      	subs	r3, r3, r2
 8004bb0:	42ab      	cmp	r3, r5
 8004bb2:	dc26      	bgt.n	8004c02 <_printf_common+0x96>
 8004bb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004bb8:	6822      	ldr	r2, [r4, #0]
 8004bba:	3b00      	subs	r3, #0
 8004bbc:	bf18      	it	ne
 8004bbe:	2301      	movne	r3, #1
 8004bc0:	0692      	lsls	r2, r2, #26
 8004bc2:	d42b      	bmi.n	8004c1c <_printf_common+0xb0>
 8004bc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004bc8:	4641      	mov	r1, r8
 8004bca:	4638      	mov	r0, r7
 8004bcc:	47c8      	blx	r9
 8004bce:	3001      	adds	r0, #1
 8004bd0:	d01e      	beq.n	8004c10 <_printf_common+0xa4>
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	6922      	ldr	r2, [r4, #16]
 8004bd6:	f003 0306 	and.w	r3, r3, #6
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	bf02      	ittt	eq
 8004bde:	68e5      	ldreq	r5, [r4, #12]
 8004be0:	6833      	ldreq	r3, [r6, #0]
 8004be2:	1aed      	subeq	r5, r5, r3
 8004be4:	68a3      	ldr	r3, [r4, #8]
 8004be6:	bf0c      	ite	eq
 8004be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bec:	2500      	movne	r5, #0
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	bfc4      	itt	gt
 8004bf2:	1a9b      	subgt	r3, r3, r2
 8004bf4:	18ed      	addgt	r5, r5, r3
 8004bf6:	2600      	movs	r6, #0
 8004bf8:	341a      	adds	r4, #26
 8004bfa:	42b5      	cmp	r5, r6
 8004bfc:	d11a      	bne.n	8004c34 <_printf_common+0xc8>
 8004bfe:	2000      	movs	r0, #0
 8004c00:	e008      	b.n	8004c14 <_printf_common+0xa8>
 8004c02:	2301      	movs	r3, #1
 8004c04:	4652      	mov	r2, sl
 8004c06:	4641      	mov	r1, r8
 8004c08:	4638      	mov	r0, r7
 8004c0a:	47c8      	blx	r9
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	d103      	bne.n	8004c18 <_printf_common+0xac>
 8004c10:	f04f 30ff 	mov.w	r0, #4294967295
 8004c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c18:	3501      	adds	r5, #1
 8004c1a:	e7c6      	b.n	8004baa <_printf_common+0x3e>
 8004c1c:	18e1      	adds	r1, r4, r3
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	2030      	movs	r0, #48	@ 0x30
 8004c22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c26:	4422      	add	r2, r4
 8004c28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c30:	3302      	adds	r3, #2
 8004c32:	e7c7      	b.n	8004bc4 <_printf_common+0x58>
 8004c34:	2301      	movs	r3, #1
 8004c36:	4622      	mov	r2, r4
 8004c38:	4641      	mov	r1, r8
 8004c3a:	4638      	mov	r0, r7
 8004c3c:	47c8      	blx	r9
 8004c3e:	3001      	adds	r0, #1
 8004c40:	d0e6      	beq.n	8004c10 <_printf_common+0xa4>
 8004c42:	3601      	adds	r6, #1
 8004c44:	e7d9      	b.n	8004bfa <_printf_common+0x8e>
	...

08004c48 <_printf_i>:
 8004c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c4c:	7e0f      	ldrb	r7, [r1, #24]
 8004c4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c50:	2f78      	cmp	r7, #120	@ 0x78
 8004c52:	4691      	mov	r9, r2
 8004c54:	4680      	mov	r8, r0
 8004c56:	460c      	mov	r4, r1
 8004c58:	469a      	mov	sl, r3
 8004c5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c5e:	d807      	bhi.n	8004c70 <_printf_i+0x28>
 8004c60:	2f62      	cmp	r7, #98	@ 0x62
 8004c62:	d80a      	bhi.n	8004c7a <_printf_i+0x32>
 8004c64:	2f00      	cmp	r7, #0
 8004c66:	f000 80d2 	beq.w	8004e0e <_printf_i+0x1c6>
 8004c6a:	2f58      	cmp	r7, #88	@ 0x58
 8004c6c:	f000 80b9 	beq.w	8004de2 <_printf_i+0x19a>
 8004c70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c78:	e03a      	b.n	8004cf0 <_printf_i+0xa8>
 8004c7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c7e:	2b15      	cmp	r3, #21
 8004c80:	d8f6      	bhi.n	8004c70 <_printf_i+0x28>
 8004c82:	a101      	add	r1, pc, #4	@ (adr r1, 8004c88 <_printf_i+0x40>)
 8004c84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c88:	08004ce1 	.word	0x08004ce1
 8004c8c:	08004cf5 	.word	0x08004cf5
 8004c90:	08004c71 	.word	0x08004c71
 8004c94:	08004c71 	.word	0x08004c71
 8004c98:	08004c71 	.word	0x08004c71
 8004c9c:	08004c71 	.word	0x08004c71
 8004ca0:	08004cf5 	.word	0x08004cf5
 8004ca4:	08004c71 	.word	0x08004c71
 8004ca8:	08004c71 	.word	0x08004c71
 8004cac:	08004c71 	.word	0x08004c71
 8004cb0:	08004c71 	.word	0x08004c71
 8004cb4:	08004df5 	.word	0x08004df5
 8004cb8:	08004d1f 	.word	0x08004d1f
 8004cbc:	08004daf 	.word	0x08004daf
 8004cc0:	08004c71 	.word	0x08004c71
 8004cc4:	08004c71 	.word	0x08004c71
 8004cc8:	08004e17 	.word	0x08004e17
 8004ccc:	08004c71 	.word	0x08004c71
 8004cd0:	08004d1f 	.word	0x08004d1f
 8004cd4:	08004c71 	.word	0x08004c71
 8004cd8:	08004c71 	.word	0x08004c71
 8004cdc:	08004db7 	.word	0x08004db7
 8004ce0:	6833      	ldr	r3, [r6, #0]
 8004ce2:	1d1a      	adds	r2, r3, #4
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6032      	str	r2, [r6, #0]
 8004ce8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004cec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e09d      	b.n	8004e30 <_printf_i+0x1e8>
 8004cf4:	6833      	ldr	r3, [r6, #0]
 8004cf6:	6820      	ldr	r0, [r4, #0]
 8004cf8:	1d19      	adds	r1, r3, #4
 8004cfa:	6031      	str	r1, [r6, #0]
 8004cfc:	0606      	lsls	r6, r0, #24
 8004cfe:	d501      	bpl.n	8004d04 <_printf_i+0xbc>
 8004d00:	681d      	ldr	r5, [r3, #0]
 8004d02:	e003      	b.n	8004d0c <_printf_i+0xc4>
 8004d04:	0645      	lsls	r5, r0, #25
 8004d06:	d5fb      	bpl.n	8004d00 <_printf_i+0xb8>
 8004d08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d0c:	2d00      	cmp	r5, #0
 8004d0e:	da03      	bge.n	8004d18 <_printf_i+0xd0>
 8004d10:	232d      	movs	r3, #45	@ 0x2d
 8004d12:	426d      	negs	r5, r5
 8004d14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d18:	4859      	ldr	r0, [pc, #356]	@ (8004e80 <_printf_i+0x238>)
 8004d1a:	230a      	movs	r3, #10
 8004d1c:	e011      	b.n	8004d42 <_printf_i+0xfa>
 8004d1e:	6821      	ldr	r1, [r4, #0]
 8004d20:	6833      	ldr	r3, [r6, #0]
 8004d22:	0608      	lsls	r0, r1, #24
 8004d24:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d28:	d402      	bmi.n	8004d30 <_printf_i+0xe8>
 8004d2a:	0649      	lsls	r1, r1, #25
 8004d2c:	bf48      	it	mi
 8004d2e:	b2ad      	uxthmi	r5, r5
 8004d30:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d32:	4853      	ldr	r0, [pc, #332]	@ (8004e80 <_printf_i+0x238>)
 8004d34:	6033      	str	r3, [r6, #0]
 8004d36:	bf14      	ite	ne
 8004d38:	230a      	movne	r3, #10
 8004d3a:	2308      	moveq	r3, #8
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d42:	6866      	ldr	r6, [r4, #4]
 8004d44:	60a6      	str	r6, [r4, #8]
 8004d46:	2e00      	cmp	r6, #0
 8004d48:	bfa2      	ittt	ge
 8004d4a:	6821      	ldrge	r1, [r4, #0]
 8004d4c:	f021 0104 	bicge.w	r1, r1, #4
 8004d50:	6021      	strge	r1, [r4, #0]
 8004d52:	b90d      	cbnz	r5, 8004d58 <_printf_i+0x110>
 8004d54:	2e00      	cmp	r6, #0
 8004d56:	d04b      	beq.n	8004df0 <_printf_i+0x1a8>
 8004d58:	4616      	mov	r6, r2
 8004d5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d5e:	fb03 5711 	mls	r7, r3, r1, r5
 8004d62:	5dc7      	ldrb	r7, [r0, r7]
 8004d64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d68:	462f      	mov	r7, r5
 8004d6a:	42bb      	cmp	r3, r7
 8004d6c:	460d      	mov	r5, r1
 8004d6e:	d9f4      	bls.n	8004d5a <_printf_i+0x112>
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d10b      	bne.n	8004d8c <_printf_i+0x144>
 8004d74:	6823      	ldr	r3, [r4, #0]
 8004d76:	07df      	lsls	r7, r3, #31
 8004d78:	d508      	bpl.n	8004d8c <_printf_i+0x144>
 8004d7a:	6923      	ldr	r3, [r4, #16]
 8004d7c:	6861      	ldr	r1, [r4, #4]
 8004d7e:	4299      	cmp	r1, r3
 8004d80:	bfde      	ittt	le
 8004d82:	2330      	movle	r3, #48	@ 0x30
 8004d84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d8c:	1b92      	subs	r2, r2, r6
 8004d8e:	6122      	str	r2, [r4, #16]
 8004d90:	f8cd a000 	str.w	sl, [sp]
 8004d94:	464b      	mov	r3, r9
 8004d96:	aa03      	add	r2, sp, #12
 8004d98:	4621      	mov	r1, r4
 8004d9a:	4640      	mov	r0, r8
 8004d9c:	f7ff fee6 	bl	8004b6c <_printf_common>
 8004da0:	3001      	adds	r0, #1
 8004da2:	d14a      	bne.n	8004e3a <_printf_i+0x1f2>
 8004da4:	f04f 30ff 	mov.w	r0, #4294967295
 8004da8:	b004      	add	sp, #16
 8004daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	f043 0320 	orr.w	r3, r3, #32
 8004db4:	6023      	str	r3, [r4, #0]
 8004db6:	4833      	ldr	r0, [pc, #204]	@ (8004e84 <_printf_i+0x23c>)
 8004db8:	2778      	movs	r7, #120	@ 0x78
 8004dba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004dbe:	6823      	ldr	r3, [r4, #0]
 8004dc0:	6831      	ldr	r1, [r6, #0]
 8004dc2:	061f      	lsls	r7, r3, #24
 8004dc4:	f851 5b04 	ldr.w	r5, [r1], #4
 8004dc8:	d402      	bmi.n	8004dd0 <_printf_i+0x188>
 8004dca:	065f      	lsls	r7, r3, #25
 8004dcc:	bf48      	it	mi
 8004dce:	b2ad      	uxthmi	r5, r5
 8004dd0:	6031      	str	r1, [r6, #0]
 8004dd2:	07d9      	lsls	r1, r3, #31
 8004dd4:	bf44      	itt	mi
 8004dd6:	f043 0320 	orrmi.w	r3, r3, #32
 8004dda:	6023      	strmi	r3, [r4, #0]
 8004ddc:	b11d      	cbz	r5, 8004de6 <_printf_i+0x19e>
 8004dde:	2310      	movs	r3, #16
 8004de0:	e7ac      	b.n	8004d3c <_printf_i+0xf4>
 8004de2:	4827      	ldr	r0, [pc, #156]	@ (8004e80 <_printf_i+0x238>)
 8004de4:	e7e9      	b.n	8004dba <_printf_i+0x172>
 8004de6:	6823      	ldr	r3, [r4, #0]
 8004de8:	f023 0320 	bic.w	r3, r3, #32
 8004dec:	6023      	str	r3, [r4, #0]
 8004dee:	e7f6      	b.n	8004dde <_printf_i+0x196>
 8004df0:	4616      	mov	r6, r2
 8004df2:	e7bd      	b.n	8004d70 <_printf_i+0x128>
 8004df4:	6833      	ldr	r3, [r6, #0]
 8004df6:	6825      	ldr	r5, [r4, #0]
 8004df8:	6961      	ldr	r1, [r4, #20]
 8004dfa:	1d18      	adds	r0, r3, #4
 8004dfc:	6030      	str	r0, [r6, #0]
 8004dfe:	062e      	lsls	r6, r5, #24
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	d501      	bpl.n	8004e08 <_printf_i+0x1c0>
 8004e04:	6019      	str	r1, [r3, #0]
 8004e06:	e002      	b.n	8004e0e <_printf_i+0x1c6>
 8004e08:	0668      	lsls	r0, r5, #25
 8004e0a:	d5fb      	bpl.n	8004e04 <_printf_i+0x1bc>
 8004e0c:	8019      	strh	r1, [r3, #0]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	6123      	str	r3, [r4, #16]
 8004e12:	4616      	mov	r6, r2
 8004e14:	e7bc      	b.n	8004d90 <_printf_i+0x148>
 8004e16:	6833      	ldr	r3, [r6, #0]
 8004e18:	1d1a      	adds	r2, r3, #4
 8004e1a:	6032      	str	r2, [r6, #0]
 8004e1c:	681e      	ldr	r6, [r3, #0]
 8004e1e:	6862      	ldr	r2, [r4, #4]
 8004e20:	2100      	movs	r1, #0
 8004e22:	4630      	mov	r0, r6
 8004e24:	f7fb f9dc 	bl	80001e0 <memchr>
 8004e28:	b108      	cbz	r0, 8004e2e <_printf_i+0x1e6>
 8004e2a:	1b80      	subs	r0, r0, r6
 8004e2c:	6060      	str	r0, [r4, #4]
 8004e2e:	6863      	ldr	r3, [r4, #4]
 8004e30:	6123      	str	r3, [r4, #16]
 8004e32:	2300      	movs	r3, #0
 8004e34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e38:	e7aa      	b.n	8004d90 <_printf_i+0x148>
 8004e3a:	6923      	ldr	r3, [r4, #16]
 8004e3c:	4632      	mov	r2, r6
 8004e3e:	4649      	mov	r1, r9
 8004e40:	4640      	mov	r0, r8
 8004e42:	47d0      	blx	sl
 8004e44:	3001      	adds	r0, #1
 8004e46:	d0ad      	beq.n	8004da4 <_printf_i+0x15c>
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	079b      	lsls	r3, r3, #30
 8004e4c:	d413      	bmi.n	8004e76 <_printf_i+0x22e>
 8004e4e:	68e0      	ldr	r0, [r4, #12]
 8004e50:	9b03      	ldr	r3, [sp, #12]
 8004e52:	4298      	cmp	r0, r3
 8004e54:	bfb8      	it	lt
 8004e56:	4618      	movlt	r0, r3
 8004e58:	e7a6      	b.n	8004da8 <_printf_i+0x160>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	4632      	mov	r2, r6
 8004e5e:	4649      	mov	r1, r9
 8004e60:	4640      	mov	r0, r8
 8004e62:	47d0      	blx	sl
 8004e64:	3001      	adds	r0, #1
 8004e66:	d09d      	beq.n	8004da4 <_printf_i+0x15c>
 8004e68:	3501      	adds	r5, #1
 8004e6a:	68e3      	ldr	r3, [r4, #12]
 8004e6c:	9903      	ldr	r1, [sp, #12]
 8004e6e:	1a5b      	subs	r3, r3, r1
 8004e70:	42ab      	cmp	r3, r5
 8004e72:	dcf2      	bgt.n	8004e5a <_printf_i+0x212>
 8004e74:	e7eb      	b.n	8004e4e <_printf_i+0x206>
 8004e76:	2500      	movs	r5, #0
 8004e78:	f104 0619 	add.w	r6, r4, #25
 8004e7c:	e7f5      	b.n	8004e6a <_printf_i+0x222>
 8004e7e:	bf00      	nop
 8004e80:	0800517a 	.word	0x0800517a
 8004e84:	0800518b 	.word	0x0800518b

08004e88 <memmove>:
 8004e88:	4288      	cmp	r0, r1
 8004e8a:	b510      	push	{r4, lr}
 8004e8c:	eb01 0402 	add.w	r4, r1, r2
 8004e90:	d902      	bls.n	8004e98 <memmove+0x10>
 8004e92:	4284      	cmp	r4, r0
 8004e94:	4623      	mov	r3, r4
 8004e96:	d807      	bhi.n	8004ea8 <memmove+0x20>
 8004e98:	1e43      	subs	r3, r0, #1
 8004e9a:	42a1      	cmp	r1, r4
 8004e9c:	d008      	beq.n	8004eb0 <memmove+0x28>
 8004e9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ea2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ea6:	e7f8      	b.n	8004e9a <memmove+0x12>
 8004ea8:	4402      	add	r2, r0
 8004eaa:	4601      	mov	r1, r0
 8004eac:	428a      	cmp	r2, r1
 8004eae:	d100      	bne.n	8004eb2 <memmove+0x2a>
 8004eb0:	bd10      	pop	{r4, pc}
 8004eb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004eb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004eba:	e7f7      	b.n	8004eac <memmove+0x24>

08004ebc <_sbrk_r>:
 8004ebc:	b538      	push	{r3, r4, r5, lr}
 8004ebe:	4d06      	ldr	r5, [pc, #24]	@ (8004ed8 <_sbrk_r+0x1c>)
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	4608      	mov	r0, r1
 8004ec6:	602b      	str	r3, [r5, #0]
 8004ec8:	f7fc fec0 	bl	8001c4c <_sbrk>
 8004ecc:	1c43      	adds	r3, r0, #1
 8004ece:	d102      	bne.n	8004ed6 <_sbrk_r+0x1a>
 8004ed0:	682b      	ldr	r3, [r5, #0]
 8004ed2:	b103      	cbz	r3, 8004ed6 <_sbrk_r+0x1a>
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	bd38      	pop	{r3, r4, r5, pc}
 8004ed8:	200002c4 	.word	0x200002c4

08004edc <memcpy>:
 8004edc:	440a      	add	r2, r1
 8004ede:	4291      	cmp	r1, r2
 8004ee0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ee4:	d100      	bne.n	8004ee8 <memcpy+0xc>
 8004ee6:	4770      	bx	lr
 8004ee8:	b510      	push	{r4, lr}
 8004eea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004eee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ef2:	4291      	cmp	r1, r2
 8004ef4:	d1f9      	bne.n	8004eea <memcpy+0xe>
 8004ef6:	bd10      	pop	{r4, pc}

08004ef8 <_realloc_r>:
 8004ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004efc:	4680      	mov	r8, r0
 8004efe:	4615      	mov	r5, r2
 8004f00:	460c      	mov	r4, r1
 8004f02:	b921      	cbnz	r1, 8004f0e <_realloc_r+0x16>
 8004f04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f08:	4611      	mov	r1, r2
 8004f0a:	f7ff bc4b 	b.w	80047a4 <_malloc_r>
 8004f0e:	b92a      	cbnz	r2, 8004f1c <_realloc_r+0x24>
 8004f10:	f7ff fbdc 	bl	80046cc <_free_r>
 8004f14:	2400      	movs	r4, #0
 8004f16:	4620      	mov	r0, r4
 8004f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f1c:	f000 f81a 	bl	8004f54 <_malloc_usable_size_r>
 8004f20:	4285      	cmp	r5, r0
 8004f22:	4606      	mov	r6, r0
 8004f24:	d802      	bhi.n	8004f2c <_realloc_r+0x34>
 8004f26:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004f2a:	d8f4      	bhi.n	8004f16 <_realloc_r+0x1e>
 8004f2c:	4629      	mov	r1, r5
 8004f2e:	4640      	mov	r0, r8
 8004f30:	f7ff fc38 	bl	80047a4 <_malloc_r>
 8004f34:	4607      	mov	r7, r0
 8004f36:	2800      	cmp	r0, #0
 8004f38:	d0ec      	beq.n	8004f14 <_realloc_r+0x1c>
 8004f3a:	42b5      	cmp	r5, r6
 8004f3c:	462a      	mov	r2, r5
 8004f3e:	4621      	mov	r1, r4
 8004f40:	bf28      	it	cs
 8004f42:	4632      	movcs	r2, r6
 8004f44:	f7ff ffca 	bl	8004edc <memcpy>
 8004f48:	4621      	mov	r1, r4
 8004f4a:	4640      	mov	r0, r8
 8004f4c:	f7ff fbbe 	bl	80046cc <_free_r>
 8004f50:	463c      	mov	r4, r7
 8004f52:	e7e0      	b.n	8004f16 <_realloc_r+0x1e>

08004f54 <_malloc_usable_size_r>:
 8004f54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f58:	1f18      	subs	r0, r3, #4
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	bfbc      	itt	lt
 8004f5e:	580b      	ldrlt	r3, [r1, r0]
 8004f60:	18c0      	addlt	r0, r0, r3
 8004f62:	4770      	bx	lr

08004f64 <_init>:
 8004f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f66:	bf00      	nop
 8004f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f6a:	bc08      	pop	{r3}
 8004f6c:	469e      	mov	lr, r3
 8004f6e:	4770      	bx	lr

08004f70 <_fini>:
 8004f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f72:	bf00      	nop
 8004f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f76:	bc08      	pop	{r3}
 8004f78:	469e      	mov	lr, r3
 8004f7a:	4770      	bx	lr
