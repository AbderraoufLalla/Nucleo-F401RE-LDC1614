
com_4.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004124  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  080042c4  080042c4  000052c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044e8  080044e8  00006078  2**0
                  CONTENTS
  4 .ARM          00000008  080044e8  080044e8  000054e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044f0  080044f0  00006078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044f0  080044f0  000054f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044f4  080044f4  000054f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080044f8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000078  08004570  00006078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08004570  000062c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a334  00000000  00000000  000060a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016f0  00000000  00000000  000103dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000920  00000000  00000000  00011ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000729  00000000  00000000  000123f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ec7  00000000  00000000  00012b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bef6  00000000  00000000  000289e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088da6  00000000  00000000  000348d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd67c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b78  00000000  00000000  000bd6c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000c0238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080042ac 	.word	0x080042ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080042ac 	.word	0x080042ac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <LDC1614_ReadRegister>:
  * @retval int
  */


// Function to read a register from LDC1614
void LDC1614_ReadRegister(uint8_t reg, uint8_t* buffer, uint16_t size) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af04      	add	r7, sp, #16
 8000576:	4603      	mov	r3, r0
 8000578:	6039      	str	r1, [r7, #0]
 800057a:	71fb      	strb	r3, [r7, #7]
 800057c:	4613      	mov	r3, r2
 800057e:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hi2c1, LDC1614_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, buffer, size, HAL_MAX_DELAY);
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	b29a      	uxth	r2, r3
 8000584:	f04f 33ff 	mov.w	r3, #4294967295
 8000588:	9302      	str	r3, [sp, #8]
 800058a:	88bb      	ldrh	r3, [r7, #4]
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2301      	movs	r3, #1
 8000594:	2154      	movs	r1, #84	@ 0x54
 8000596:	4803      	ldr	r0, [pc, #12]	@ (80005a4 <LDC1614_ReadRegister+0x34>)
 8000598:	f001 fac6 	bl	8001b28 <HAL_I2C_Mem_Read>
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000094 	.word	0x20000094

080005a8 <LDC1614_WriteRegister>:

void LDC1614_WriteRegister(uint8_t reg, uint8_t* data, uint16_t size) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af04      	add	r7, sp, #16
 80005ae:	4603      	mov	r3, r0
 80005b0:	6039      	str	r1, [r7, #0]
 80005b2:	71fb      	strb	r3, [r7, #7]
 80005b4:	4613      	mov	r3, r2
 80005b6:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Write(&hi2c1, LDC1614_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, size, HAL_MAX_DELAY);
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295
 80005c0:	9302      	str	r3, [sp, #8]
 80005c2:	88bb      	ldrh	r3, [r7, #4]
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2301      	movs	r3, #1
 80005cc:	2154      	movs	r1, #84	@ 0x54
 80005ce:	4803      	ldr	r0, [pc, #12]	@ (80005dc <LDC1614_WriteRegister+0x34>)
 80005d0:	f001 f9b0 	bl	8001934 <HAL_I2C_Mem_Write>
}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000094 	.word	0x20000094

080005e0 <hex_to_dec>:

// Function to transform hex to dec
int hex_to_dec(uint16_t hex) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]
	char hexString_CH0[5];
	snprintf(hexString_CH0, sizeof(hexString_CH0), "%04X", hex);
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	f107 000c 	add.w	r0, r7, #12
 80005f0:	4a08      	ldr	r2, [pc, #32]	@ (8000614 <hex_to_dec+0x34>)
 80005f2:	2105      	movs	r1, #5
 80005f4:	f003 f9a6 	bl	8003944 <sniprintf>
	int integerValue = (int)strtol(hexString_CH0, NULL, 16);
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2210      	movs	r2, #16
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f003 f995 	bl	8003930 <strtol>
 8000606:	6178      	str	r0, [r7, #20]
	return integerValue;
 8000608:	697b      	ldr	r3, [r7, #20]
}
 800060a:	4618      	mov	r0, r3
 800060c:	3718      	adds	r7, #24
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	080042c4 	.word	0x080042c4

08000618 <Transmit_Data>:
    // Write the updated register value (MSB unchanged, LSB updated)
    HAL_I2C_Mem_Write(&hi2c1, LDC1614_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, current_data, 2, HAL_MAX_DELAY);
}

// Function to transmit data via UART
void Transmit_Data(uint16_t MSB_CH0, uint16_t LSB_CH0, uint16_t CH0_FIN_DIVIDER, uint16_t CH0_OFFSET, uint16_t MSB_CH1, uint16_t LSB_CH1, uint16_t CH1_FIN_DIVIDER, uint16_t CH1_OFFSET, uint16_t MSB_CH2, uint16_t LSB_CH2, uint16_t CH2_FIN_DIVIDER, uint16_t CH2_OFFSET, uint16_t MSB_CH3, uint16_t LSB_CH3, uint16_t CH3_FIN_DIVIDER, uint16_t CH3_OFFSET) {
 8000618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800061a:	f2ad 4d74 	subw	sp, sp, #1140	@ 0x474
 800061e:	af10      	add	r7, sp, #64	@ 0x40
 8000620:	4605      	mov	r5, r0
 8000622:	460c      	mov	r4, r1
 8000624:	4610      	mov	r0, r2
 8000626:	4619      	mov	r1, r3
 8000628:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 800062c:	f2a3 4302 	subw	r3, r3, #1026	@ 0x402
 8000630:	462a      	mov	r2, r5
 8000632:	801a      	strh	r2, [r3, #0]
 8000634:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8000638:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 800063c:	4622      	mov	r2, r4
 800063e:	801a      	strh	r2, [r3, #0]
 8000640:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8000644:	f2a3 4306 	subw	r3, r3, #1030	@ 0x406
 8000648:	4602      	mov	r2, r0
 800064a:	801a      	strh	r2, [r3, #0]
 800064c:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8000650:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8000654:	460a      	mov	r2, r1
 8000656:	801a      	strh	r2, [r3, #0]
    static uint32_t transmit_count = 0;  // Counter to keep track of transmitted data instances
    char msg[1000];  // Buffer to hold the transmitted message, size increased to accommodate the count
    transmit_count++;  // Increment the counter each time data is transmitted
 8000658:	4b50      	ldr	r3, [pc, #320]	@ (800079c <Transmit_Data+0x184>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	3301      	adds	r3, #1
 800065e:	4a4f      	ldr	r2, [pc, #316]	@ (800079c <Transmit_Data+0x184>)
 8000660:	6013      	str	r3, [r2, #0]

    uint16_t MSB_CH0_masked = MSB_CH0 & 0x0FFF; // because LSB is only 12 bits
 8000662:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8000666:	f2a3 4302 	subw	r3, r3, #1026	@ 0x402
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000670:	f8a7 342e 	strh.w	r3, [r7, #1070]	@ 0x42e
    uint16_t MSB_CH1_masked = MSB_CH1 & 0x0FFF; // because LSB is only 12 bits
 8000674:	f8b7 3448 	ldrh.w	r3, [r7, #1096]	@ 0x448
 8000678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800067c:	f8a7 342c 	strh.w	r3, [r7, #1068]	@ 0x42c
    uint16_t MSB_CH2_masked = MSB_CH2 & 0xFFF; // because LSB is only 12 bits
 8000680:	f8b7 3458 	ldrh.w	r3, [r7, #1112]	@ 0x458
 8000684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000688:	f8a7 342a 	strh.w	r3, [r7, #1066]	@ 0x42a
    uint16_t MSB_CH3_masked = MSB_CH3 & 0xFFF; // because LSB is only 12 bits
 800068c:	f8b7 3468 	ldrh.w	r3, [r7, #1128]	@ 0x468
 8000690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000694:	f8a7 3428 	strh.w	r3, [r7, #1064]	@ 0x428



    uint16_t CH0_FIN_DIVIDER_masked = CH0_FIN_DIVIDER & 0x00FF; // Only the first 8 bits represents the FIN divider.
 8000698:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 800069c:	f2a3 4306 	subw	r3, r3, #1030	@ 0x406
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	f8a7 3426 	strh.w	r3, [r7, #1062]	@ 0x426
    uint16_t CH1_FIN_DIVIDER_masked = CH1_FIN_DIVIDER & 0x00FF; // Only the first 8 bits represents the FIN divider.
 80006a8:	f8b7 3450 	ldrh.w	r3, [r7, #1104]	@ 0x450
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	f8a7 3424 	strh.w	r3, [r7, #1060]	@ 0x424
    uint16_t CH2_FIN_DIVIDER_masked = CH2_FIN_DIVIDER & 0x00FF; // Only the first 8 bits represents the FIN divider.
 80006b2:	f8b7 3460 	ldrh.w	r3, [r7, #1120]	@ 0x460
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	f8a7 3422 	strh.w	r3, [r7, #1058]	@ 0x422
    uint16_t CH3_FIN_DIVIDER_masked = CH3_FIN_DIVIDER & 0x00FF; // Only the first 8 bits represents the FIN divider.
 80006bc:	f8b7 3470 	ldrh.w	r3, [r7, #1136]	@ 0x470
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	f8a7 3420 	strh.w	r3, [r7, #1056]	@ 0x420

    // Format the data as a hexadecimal string along with the counter
    int len = snprintf(msg, sizeof(msg), "CH0 - MSB: %d, LSB: %d, F_DIV: %d, OFFSET: %d | CH1 - MSB: %d, LSB: %d, F_DIV: %d, OFFSET: %d | CH2 - MSB: %d, LSB: %d, F_DIV: %d, OFFSET: %d | CH3 - MSB: %d, LSB: %d, F_DIV: %d, OFFSET: %d - Cycle: %d \r\n", MSB_CH0_masked, LSB_CH0, CH0_FIN_DIVIDER_masked, CH0_OFFSET, MSB_CH1_masked, LSB_CH1, CH1_FIN_DIVIDER_masked, CH1_OFFSET, MSB_CH2_masked, LSB_CH2, CH2_FIN_DIVIDER_masked, CH2_OFFSET, MSB_CH3_masked, LSB_CH3, CH3_FIN_DIVIDER_masked, CH3_OFFSET, transmit_count);
 80006c6:	f8b7 c42e 	ldrh.w	ip, [r7, #1070]	@ 0x42e
 80006ca:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 80006ce:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 80006d2:	881d      	ldrh	r5, [r3, #0]
 80006d4:	f8b7 6426 	ldrh.w	r6, [r7, #1062]	@ 0x426
 80006d8:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 80006dc:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80006e4:	f8b7 242c 	ldrh.w	r2, [r7, #1068]	@ 0x42c
 80006e8:	623a      	str	r2, [r7, #32]
 80006ea:	f8b7 144c 	ldrh.w	r1, [r7, #1100]	@ 0x44c
 80006ee:	61f9      	str	r1, [r7, #28]
 80006f0:	f8b7 0424 	ldrh.w	r0, [r7, #1060]	@ 0x424
 80006f4:	61b8      	str	r0, [r7, #24]
 80006f6:	f8b7 0454 	ldrh.w	r0, [r7, #1108]	@ 0x454
 80006fa:	6178      	str	r0, [r7, #20]
 80006fc:	f8b7 e42a 	ldrh.w	lr, [r7, #1066]	@ 0x42a
 8000700:	4673      	mov	r3, lr
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	f8b7 e45c 	ldrh.w	lr, [r7, #1116]	@ 0x45c
 8000708:	4672      	mov	r2, lr
 800070a:	60fa      	str	r2, [r7, #12]
 800070c:	f8b7 e422 	ldrh.w	lr, [r7, #1058]	@ 0x422
 8000710:	4671      	mov	r1, lr
 8000712:	60b9      	str	r1, [r7, #8]
 8000714:	f8b7 e464 	ldrh.w	lr, [r7, #1124]	@ 0x464
 8000718:	4670      	mov	r0, lr
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	f8b7 e428 	ldrh.w	lr, [r7, #1064]	@ 0x428
 8000720:	4670      	mov	r0, lr
 8000722:	6038      	str	r0, [r7, #0]
 8000724:	f8b7 446c 	ldrh.w	r4, [r7, #1132]	@ 0x46c
 8000728:	f8b7 1420 	ldrh.w	r1, [r7, #1056]	@ 0x420
 800072c:	f8b7 2474 	ldrh.w	r2, [r7, #1140]	@ 0x474
 8000730:	4b1a      	ldr	r3, [pc, #104]	@ (800079c <Transmit_Data+0x184>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8000738:	930f      	str	r3, [sp, #60]	@ 0x3c
 800073a:	920e      	str	r2, [sp, #56]	@ 0x38
 800073c:	910d      	str	r1, [sp, #52]	@ 0x34
 800073e:	940c      	str	r4, [sp, #48]	@ 0x30
 8000740:	683c      	ldr	r4, [r7, #0]
 8000742:	940b      	str	r4, [sp, #44]	@ 0x2c
 8000744:	687c      	ldr	r4, [r7, #4]
 8000746:	940a      	str	r4, [sp, #40]	@ 0x28
 8000748:	68b9      	ldr	r1, [r7, #8]
 800074a:	9109      	str	r1, [sp, #36]	@ 0x24
 800074c:	68fa      	ldr	r2, [r7, #12]
 800074e:	9208      	str	r2, [sp, #32]
 8000750:	693b      	ldr	r3, [r7, #16]
 8000752:	9307      	str	r3, [sp, #28]
 8000754:	697c      	ldr	r4, [r7, #20]
 8000756:	9406      	str	r4, [sp, #24]
 8000758:	69bc      	ldr	r4, [r7, #24]
 800075a:	9405      	str	r4, [sp, #20]
 800075c:	69f9      	ldr	r1, [r7, #28]
 800075e:	9104      	str	r1, [sp, #16]
 8000760:	6a3a      	ldr	r2, [r7, #32]
 8000762:	9203      	str	r2, [sp, #12]
 8000764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000766:	9302      	str	r3, [sp, #8]
 8000768:	9601      	str	r6, [sp, #4]
 800076a:	9500      	str	r5, [sp, #0]
 800076c:	4663      	mov	r3, ip
 800076e:	4a0c      	ldr	r2, [pc, #48]	@ (80007a0 <Transmit_Data+0x188>)
 8000770:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000774:	f003 f8e6 	bl	8003944 <sniprintf>
 8000778:	f8c7 041c 	str.w	r0, [r7, #1052]	@ 0x41c

    // Transmit the formatted message
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
 800077c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000780:	b29a      	uxth	r2, r3
 8000782:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	4806      	ldr	r0, [pc, #24]	@ (80007a4 <Transmit_Data+0x18c>)
 800078c:	f002 fc9a 	bl	80030c4 <HAL_UART_Transmit>
}
 8000790:	bf00      	nop
 8000792:	f207 4734 	addw	r7, r7, #1076	@ 0x434
 8000796:	46bd      	mov	sp, r7
 8000798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800079a:	bf00      	nop
 800079c:	20000174 	.word	0x20000174
 80007a0:	080042cc 	.word	0x080042cc
 80007a4:	200000e8 	.word	0x200000e8

080007a8 <main>:

int main(void)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b097      	sub	sp, #92	@ 0x5c
 80007ac:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ae:	f000 fc63 	bl	8001078 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b2:	f000 f9cf 	bl	8000b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b6:	f000 fa91 	bl	8000cdc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007ba:	f000 fa65 	bl	8000c88 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80007be:	f000 fa35 	bl	8000c2c <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */
  LDC1614_WriteRegister(RESET_DEV, reset_value, 2);
 80007c2:	2202      	movs	r2, #2
 80007c4:	49ab      	ldr	r1, [pc, #684]	@ (8000a74 <main+0x2cc>)
 80007c6:	201c      	movs	r0, #28
 80007c8:	f7ff feee 	bl	80005a8 <LDC1614_WriteRegister>
  LDC1614_WriteRegister(RESET_DEV, active_value, 2);
 80007cc:	2202      	movs	r2, #2
 80007ce:	49aa      	ldr	r1, [pc, #680]	@ (8000a78 <main+0x2d0>)
 80007d0:	201c      	movs	r0, #28
 80007d2:	f7ff fee9 	bl	80005a8 <LDC1614_WriteRegister>


  // Initialising RCOUNT
  LDC1614_WriteRegister(RCOUNT_CH0, R_COUNT_DEFAULT, 2);
 80007d6:	2202      	movs	r2, #2
 80007d8:	49a8      	ldr	r1, [pc, #672]	@ (8000a7c <main+0x2d4>)
 80007da:	2008      	movs	r0, #8
 80007dc:	f7ff fee4 	bl	80005a8 <LDC1614_WriteRegister>
  LDC1614_WriteRegister(RCOUNT_CH1, R_COUNT_DEFAULT, 2);
 80007e0:	2202      	movs	r2, #2
 80007e2:	49a6      	ldr	r1, [pc, #664]	@ (8000a7c <main+0x2d4>)
 80007e4:	2009      	movs	r0, #9
 80007e6:	f7ff fedf 	bl	80005a8 <LDC1614_WriteRegister>
  LDC1614_WriteRegister(RCOUNT_CH2, R_COUNT_DEFAULT, 2);
 80007ea:	2202      	movs	r2, #2
 80007ec:	49a3      	ldr	r1, [pc, #652]	@ (8000a7c <main+0x2d4>)
 80007ee:	200a      	movs	r0, #10
 80007f0:	f7ff feda 	bl	80005a8 <LDC1614_WriteRegister>
  LDC1614_WriteRegister(RCOUNT_CH3, R_COUNT_DEFAULT, 2);
 80007f4:	2202      	movs	r2, #2
 80007f6:	49a1      	ldr	r1, [pc, #644]	@ (8000a7c <main+0x2d4>)
 80007f8:	200b      	movs	r0, #11
 80007fa:	f7ff fed5 	bl	80005a8 <LDC1614_WriteRegister>

  // Initialising SETTLECOUNT
  LDC1614_WriteRegister(SETTLECOUNT_CH0, SETTLECOUNT_DEFAULT, 2);
 80007fe:	2202      	movs	r2, #2
 8000800:	499f      	ldr	r1, [pc, #636]	@ (8000a80 <main+0x2d8>)
 8000802:	2010      	movs	r0, #16
 8000804:	f7ff fed0 	bl	80005a8 <LDC1614_WriteRegister>
  LDC1614_WriteRegister(SETTLECOUNT_CH1, SETTLECOUNT_DEFAULT, 2);
 8000808:	2202      	movs	r2, #2
 800080a:	499d      	ldr	r1, [pc, #628]	@ (8000a80 <main+0x2d8>)
 800080c:	2011      	movs	r0, #17
 800080e:	f7ff fecb 	bl	80005a8 <LDC1614_WriteRegister>
  LDC1614_WriteRegister(SETTLECOUNT_CH2, SETTLECOUNT_DEFAULT, 2);
 8000812:	2202      	movs	r2, #2
 8000814:	499a      	ldr	r1, [pc, #616]	@ (8000a80 <main+0x2d8>)
 8000816:	2012      	movs	r0, #18
 8000818:	f7ff fec6 	bl	80005a8 <LDC1614_WriteRegister>
  LDC1614_WriteRegister(SETTLECOUNT_CH3, SETTLECOUNT_DEFAULT, 2);
 800081c:	2202      	movs	r2, #2
 800081e:	4998      	ldr	r1, [pc, #608]	@ (8000a80 <main+0x2d8>)
 8000820:	2013      	movs	r0, #19
 8000822:	f7ff fec1 	bl	80005a8 <LDC1614_WriteRegister>

  //Frequency divider configuration for the LDC1614
  LDC1614_WriteRegister(LDC1614_CH0_FIN_DIVIDER, DIVIDER_DEFAULT, 2); // Setting the frequency divider as 12 // F_IN = 1 // Equal to resonance frequency + 10%
 8000826:	2202      	movs	r2, #2
 8000828:	4996      	ldr	r1, [pc, #600]	@ (8000a84 <main+0x2dc>)
 800082a:	2014      	movs	r0, #20
 800082c:	f7ff febc 	bl	80005a8 <LDC1614_WriteRegister>
  LDC1614_WriteRegister(LDC1614_CH1_FIN_DIVIDER, DIVIDER_DEFAULT, 2); // Setting the frequency divider as 12 // F_IN = 1 // Equal to resonance frequency + 10%
 8000830:	2202      	movs	r2, #2
 8000832:	4994      	ldr	r1, [pc, #592]	@ (8000a84 <main+0x2dc>)
 8000834:	2015      	movs	r0, #21
 8000836:	f7ff feb7 	bl	80005a8 <LDC1614_WriteRegister>
  LDC1614_WriteRegister(LDC1614_CH2_FIN_DIVIDER, DIVIDER_DEFAULT, 2); // Setting the frequency divider as 12 // F_IN = 1 // Equal to resonance frequency + 10%
 800083a:	2202      	movs	r2, #2
 800083c:	4991      	ldr	r1, [pc, #580]	@ (8000a84 <main+0x2dc>)
 800083e:	2016      	movs	r0, #22
 8000840:	f7ff feb2 	bl	80005a8 <LDC1614_WriteRegister>
  LDC1614_WriteRegister(LDC1614_CH3_FIN_DIVIDER, DIVIDER_DEFAULT, 2); // Setting the frequency divider as 12 // F_IN = 1 // Equal to resonance frequency + 10%
 8000844:	2202      	movs	r2, #2
 8000846:	498f      	ldr	r1, [pc, #572]	@ (8000a84 <main+0x2dc>)
 8000848:	2017      	movs	r0, #23
 800084a:	f7ff fead 	bl	80005a8 <LDC1614_WriteRegister>

  //Clock configuration: Internal clock
  LDC1614_WriteRegister(CONFIG_reg, clk_src, 2);
 800084e:	2202      	movs	r2, #2
 8000850:	498d      	ldr	r1, [pc, #564]	@ (8000a88 <main+0x2e0>)
 8000852:	201a      	movs	r0, #26
 8000854:	f7ff fea8 	bl	80005a8 <LDC1614_WriteRegister>

  //Number of channels configuration for the LDC1614 & Deglitch
  LDC1614_WriteRegister(MUX_reg, config_2Channels_3MHz, 2);
 8000858:	2202      	movs	r2, #2
 800085a:	498c      	ldr	r1, [pc, #560]	@ (8000a8c <main+0x2e4>)
 800085c:	201b      	movs	r0, #27
 800085e:	f7ff fea3 	bl	80005a8 <LDC1614_WriteRegister>

  LDC1614_WriteRegister(DRIVE_CURRENT_CH0, DRIVE_CURRENT_DEFAULT, 2);
 8000862:	2202      	movs	r2, #2
 8000864:	498a      	ldr	r1, [pc, #552]	@ (8000a90 <main+0x2e8>)
 8000866:	201e      	movs	r0, #30
 8000868:	f7ff fe9e 	bl	80005a8 <LDC1614_WriteRegister>
  LDC1614_WriteRegister(DRIVE_CURRENT_CH1, DRIVE_CURRENT_DEFAULT, 2);
 800086c:	2202      	movs	r2, #2
 800086e:	4988      	ldr	r1, [pc, #544]	@ (8000a90 <main+0x2e8>)
 8000870:	201f      	movs	r0, #31
 8000872:	f7ff fe99 	bl	80005a8 <LDC1614_WriteRegister>
  LDC1614_WriteRegister(DRIVE_CURRENT_CH2, DRIVE_CURRENT_DEFAULT, 2);
 8000876:	2202      	movs	r2, #2
 8000878:	4985      	ldr	r1, [pc, #532]	@ (8000a90 <main+0x2e8>)
 800087a:	2020      	movs	r0, #32
 800087c:	f7ff fe94 	bl	80005a8 <LDC1614_WriteRegister>
  LDC1614_WriteRegister(DRIVE_CURRENT_CH3, DRIVE_CURRENT_DEFAULT, 2);
 8000880:	2202      	movs	r2, #2
 8000882:	4983      	ldr	r1, [pc, #524]	@ (8000a90 <main+0x2e8>)
 8000884:	2021      	movs	r0, #33	@ 0x21
 8000886:	f7ff fe8f 	bl	80005a8 <LDC1614_WriteRegister>
  while (1)
  {
    /* USER CODE END WHILE */

    // Read data
    LDC1614_ReadRegister(LDC1614_REG_DATA0_MSB, reg_data_MSB_CH0, 2);
 800088a:	2202      	movs	r2, #2
 800088c:	4981      	ldr	r1, [pc, #516]	@ (8000a94 <main+0x2ec>)
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff fe6e 	bl	8000570 <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_REG_DATA0_LSB, reg_data_LSB_CH0, 2);
 8000894:	2202      	movs	r2, #2
 8000896:	4980      	ldr	r1, [pc, #512]	@ (8000a98 <main+0x2f0>)
 8000898:	2001      	movs	r0, #1
 800089a:	f7ff fe69 	bl	8000570 <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_REG_DATA1_MSB, reg_data_MSB_CH1, 2);
 800089e:	2202      	movs	r2, #2
 80008a0:	497e      	ldr	r1, [pc, #504]	@ (8000a9c <main+0x2f4>)
 80008a2:	2002      	movs	r0, #2
 80008a4:	f7ff fe64 	bl	8000570 <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_REG_DATA1_LSB, reg_data_LSB_CH1, 2);
 80008a8:	2202      	movs	r2, #2
 80008aa:	497d      	ldr	r1, [pc, #500]	@ (8000aa0 <main+0x2f8>)
 80008ac:	2003      	movs	r0, #3
 80008ae:	f7ff fe5f 	bl	8000570 <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_REG_DATA2_MSB, reg_data_MSB_CH2, 2);
 80008b2:	2202      	movs	r2, #2
 80008b4:	497b      	ldr	r1, [pc, #492]	@ (8000aa4 <main+0x2fc>)
 80008b6:	2004      	movs	r0, #4
 80008b8:	f7ff fe5a 	bl	8000570 <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_REG_DATA2_LSB, reg_data_LSB_CH2, 2);
 80008bc:	2202      	movs	r2, #2
 80008be:	497a      	ldr	r1, [pc, #488]	@ (8000aa8 <main+0x300>)
 80008c0:	2005      	movs	r0, #5
 80008c2:	f7ff fe55 	bl	8000570 <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_REG_DATA3_MSB, reg_data_MSB_CH3, 2);
 80008c6:	2202      	movs	r2, #2
 80008c8:	4978      	ldr	r1, [pc, #480]	@ (8000aac <main+0x304>)
 80008ca:	2006      	movs	r0, #6
 80008cc:	f7ff fe50 	bl	8000570 <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_REG_DATA3_LSB, reg_data_LSB_CH3, 2);
 80008d0:	2202      	movs	r2, #2
 80008d2:	4977      	ldr	r1, [pc, #476]	@ (8000ab0 <main+0x308>)
 80008d4:	2007      	movs	r0, #7
 80008d6:	f7ff fe4b 	bl	8000570 <LDC1614_ReadRegister>


    LDC1614_ReadRegister(LDC1614_CH0_OFFSET, reg_CH0_OFFSET, 2);
 80008da:	2202      	movs	r2, #2
 80008dc:	4975      	ldr	r1, [pc, #468]	@ (8000ab4 <main+0x30c>)
 80008de:	200c      	movs	r0, #12
 80008e0:	f7ff fe46 	bl	8000570 <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_CH1_OFFSET, reg_CH1_OFFSET, 2);
 80008e4:	2202      	movs	r2, #2
 80008e6:	4974      	ldr	r1, [pc, #464]	@ (8000ab8 <main+0x310>)
 80008e8:	200d      	movs	r0, #13
 80008ea:	f7ff fe41 	bl	8000570 <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_CH2_OFFSET, reg_CH2_OFFSET, 2);
 80008ee:	2202      	movs	r2, #2
 80008f0:	4972      	ldr	r1, [pc, #456]	@ (8000abc <main+0x314>)
 80008f2:	200e      	movs	r0, #14
 80008f4:	f7ff fe3c 	bl	8000570 <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_CH3_OFFSET, reg_CH3_OFFSET, 2);
 80008f8:	2202      	movs	r2, #2
 80008fa:	4971      	ldr	r1, [pc, #452]	@ (8000ac0 <main+0x318>)
 80008fc:	200f      	movs	r0, #15
 80008fe:	f7ff fe37 	bl	8000570 <LDC1614_ReadRegister>

    LDC1614_ReadRegister(LDC1614_CH0_FIN_DIVIDER, reg_CH0_FIN_DIVIDER, 2);
 8000902:	2202      	movs	r2, #2
 8000904:	496f      	ldr	r1, [pc, #444]	@ (8000ac4 <main+0x31c>)
 8000906:	2014      	movs	r0, #20
 8000908:	f7ff fe32 	bl	8000570 <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_CH1_FIN_DIVIDER, reg_CH1_FIN_DIVIDER, 2);
 800090c:	2202      	movs	r2, #2
 800090e:	496e      	ldr	r1, [pc, #440]	@ (8000ac8 <main+0x320>)
 8000910:	2015      	movs	r0, #21
 8000912:	f7ff fe2d 	bl	8000570 <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_CH2_FIN_DIVIDER, reg_CH2_FIN_DIVIDER, 2);
 8000916:	2202      	movs	r2, #2
 8000918:	496c      	ldr	r1, [pc, #432]	@ (8000acc <main+0x324>)
 800091a:	2016      	movs	r0, #22
 800091c:	f7ff fe28 	bl	8000570 <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_CH3_FIN_DIVIDER, reg_CH3_FIN_DIVIDER, 2);
 8000920:	2202      	movs	r2, #2
 8000922:	496b      	ldr	r1, [pc, #428]	@ (8000ad0 <main+0x328>)
 8000924:	2017      	movs	r0, #23
 8000926:	f7ff fe23 	bl	8000570 <LDC1614_ReadRegister>

    // Combine the two bytes into a single 16-bit value
    uint16_t MSB_CH0 = (reg_data_MSB_CH0[0] << 8) | reg_data_MSB_CH0[1];
 800092a:	4b5a      	ldr	r3, [pc, #360]	@ (8000a94 <main+0x2ec>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	021b      	lsls	r3, r3, #8
 8000930:	b21a      	sxth	r2, r3
 8000932:	4b58      	ldr	r3, [pc, #352]	@ (8000a94 <main+0x2ec>)
 8000934:	785b      	ldrb	r3, [r3, #1]
 8000936:	b21b      	sxth	r3, r3
 8000938:	4313      	orrs	r3, r2
 800093a:	b21b      	sxth	r3, r3
 800093c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t LSB_CH0= (reg_data_LSB_CH0[0] << 8) | reg_data_LSB_CH0[1];
 800093e:	4b56      	ldr	r3, [pc, #344]	@ (8000a98 <main+0x2f0>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	021b      	lsls	r3, r3, #8
 8000944:	b21a      	sxth	r2, r3
 8000946:	4b54      	ldr	r3, [pc, #336]	@ (8000a98 <main+0x2f0>)
 8000948:	785b      	ldrb	r3, [r3, #1]
 800094a:	b21b      	sxth	r3, r3
 800094c:	4313      	orrs	r3, r2
 800094e:	b21b      	sxth	r3, r3
 8000950:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t MSB_CH1 = (reg_data_MSB_CH1[0] << 8) | reg_data_MSB_CH1[1];
 8000952:	4b52      	ldr	r3, [pc, #328]	@ (8000a9c <main+0x2f4>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	021b      	lsls	r3, r3, #8
 8000958:	b21a      	sxth	r2, r3
 800095a:	4b50      	ldr	r3, [pc, #320]	@ (8000a9c <main+0x2f4>)
 800095c:	785b      	ldrb	r3, [r3, #1]
 800095e:	b21b      	sxth	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b21b      	sxth	r3, r3
 8000964:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t LSB_CH1= (reg_data_LSB_CH1[0] << 8) | reg_data_LSB_CH1[1];
 8000966:	4b4e      	ldr	r3, [pc, #312]	@ (8000aa0 <main+0x2f8>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	b21a      	sxth	r2, r3
 800096e:	4b4c      	ldr	r3, [pc, #304]	@ (8000aa0 <main+0x2f8>)
 8000970:	785b      	ldrb	r3, [r3, #1]
 8000972:	b21b      	sxth	r3, r3
 8000974:	4313      	orrs	r3, r2
 8000976:	b21b      	sxth	r3, r3
 8000978:	843b      	strh	r3, [r7, #32]
    uint16_t MSB_CH2 = (reg_data_MSB_CH2[0] << 8) | reg_data_MSB_CH2[1];
 800097a:	4b4a      	ldr	r3, [pc, #296]	@ (8000aa4 <main+0x2fc>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	021b      	lsls	r3, r3, #8
 8000980:	b21a      	sxth	r2, r3
 8000982:	4b48      	ldr	r3, [pc, #288]	@ (8000aa4 <main+0x2fc>)
 8000984:	785b      	ldrb	r3, [r3, #1]
 8000986:	b21b      	sxth	r3, r3
 8000988:	4313      	orrs	r3, r2
 800098a:	b21b      	sxth	r3, r3
 800098c:	83fb      	strh	r3, [r7, #30]
    uint16_t LSB_CH2= (reg_data_LSB_CH2[0] << 8) | reg_data_LSB_CH2[1];
 800098e:	4b46      	ldr	r3, [pc, #280]	@ (8000aa8 <main+0x300>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	021b      	lsls	r3, r3, #8
 8000994:	b21a      	sxth	r2, r3
 8000996:	4b44      	ldr	r3, [pc, #272]	@ (8000aa8 <main+0x300>)
 8000998:	785b      	ldrb	r3, [r3, #1]
 800099a:	b21b      	sxth	r3, r3
 800099c:	4313      	orrs	r3, r2
 800099e:	b21b      	sxth	r3, r3
 80009a0:	83bb      	strh	r3, [r7, #28]
    uint16_t MSB_CH3 = (reg_data_MSB_CH3[0] << 8) | reg_data_MSB_CH3[1];
 80009a2:	4b42      	ldr	r3, [pc, #264]	@ (8000aac <main+0x304>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	021b      	lsls	r3, r3, #8
 80009a8:	b21a      	sxth	r2, r3
 80009aa:	4b40      	ldr	r3, [pc, #256]	@ (8000aac <main+0x304>)
 80009ac:	785b      	ldrb	r3, [r3, #1]
 80009ae:	b21b      	sxth	r3, r3
 80009b0:	4313      	orrs	r3, r2
 80009b2:	b21b      	sxth	r3, r3
 80009b4:	837b      	strh	r3, [r7, #26]
    uint16_t LSB_CH3= (reg_data_LSB_CH3[0] << 8) | reg_data_LSB_CH3[1];
 80009b6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ab0 <main+0x308>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	021b      	lsls	r3, r3, #8
 80009bc:	b21a      	sxth	r2, r3
 80009be:	4b3c      	ldr	r3, [pc, #240]	@ (8000ab0 <main+0x308>)
 80009c0:	785b      	ldrb	r3, [r3, #1]
 80009c2:	b21b      	sxth	r3, r3
 80009c4:	4313      	orrs	r3, r2
 80009c6:	b21b      	sxth	r3, r3
 80009c8:	833b      	strh	r3, [r7, #24]

    uint16_t CH0_OFFSET= (reg_CH0_OFFSET[0] << 8) | reg_CH0_OFFSET[1];
 80009ca:	4b3a      	ldr	r3, [pc, #232]	@ (8000ab4 <main+0x30c>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	021b      	lsls	r3, r3, #8
 80009d0:	b21a      	sxth	r2, r3
 80009d2:	4b38      	ldr	r3, [pc, #224]	@ (8000ab4 <main+0x30c>)
 80009d4:	785b      	ldrb	r3, [r3, #1]
 80009d6:	b21b      	sxth	r3, r3
 80009d8:	4313      	orrs	r3, r2
 80009da:	b21b      	sxth	r3, r3
 80009dc:	82fb      	strh	r3, [r7, #22]
    uint16_t CH1_OFFSET= (reg_CH1_OFFSET[0] << 8) | reg_CH1_OFFSET[1];
 80009de:	4b36      	ldr	r3, [pc, #216]	@ (8000ab8 <main+0x310>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	021b      	lsls	r3, r3, #8
 80009e4:	b21a      	sxth	r2, r3
 80009e6:	4b34      	ldr	r3, [pc, #208]	@ (8000ab8 <main+0x310>)
 80009e8:	785b      	ldrb	r3, [r3, #1]
 80009ea:	b21b      	sxth	r3, r3
 80009ec:	4313      	orrs	r3, r2
 80009ee:	b21b      	sxth	r3, r3
 80009f0:	82bb      	strh	r3, [r7, #20]
    uint16_t CH2_OFFSET= (reg_CH2_OFFSET[0] << 8) | reg_CH2_OFFSET[1];
 80009f2:	4b32      	ldr	r3, [pc, #200]	@ (8000abc <main+0x314>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	021b      	lsls	r3, r3, #8
 80009f8:	b21a      	sxth	r2, r3
 80009fa:	4b30      	ldr	r3, [pc, #192]	@ (8000abc <main+0x314>)
 80009fc:	785b      	ldrb	r3, [r3, #1]
 80009fe:	b21b      	sxth	r3, r3
 8000a00:	4313      	orrs	r3, r2
 8000a02:	b21b      	sxth	r3, r3
 8000a04:	827b      	strh	r3, [r7, #18]
    uint16_t CH3_OFFSET= (reg_CH3_OFFSET[0] << 8) | reg_CH3_OFFSET[1];
 8000a06:	4b2e      	ldr	r3, [pc, #184]	@ (8000ac0 <main+0x318>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	021b      	lsls	r3, r3, #8
 8000a0c:	b21a      	sxth	r2, r3
 8000a0e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac0 <main+0x318>)
 8000a10:	785b      	ldrb	r3, [r3, #1]
 8000a12:	b21b      	sxth	r3, r3
 8000a14:	4313      	orrs	r3, r2
 8000a16:	b21b      	sxth	r3, r3
 8000a18:	823b      	strh	r3, [r7, #16]

    uint16_t CH0_FIN_DIVIDER= (reg_CH0_FIN_DIVIDER[0] << 8) | reg_CH0_FIN_DIVIDER[1];
 8000a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac4 <main+0x31c>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	021b      	lsls	r3, r3, #8
 8000a20:	b21a      	sxth	r2, r3
 8000a22:	4b28      	ldr	r3, [pc, #160]	@ (8000ac4 <main+0x31c>)
 8000a24:	785b      	ldrb	r3, [r3, #1]
 8000a26:	b21b      	sxth	r3, r3
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	b21b      	sxth	r3, r3
 8000a2c:	81fb      	strh	r3, [r7, #14]
    uint16_t CH1_FIN_DIVIDER= (reg_CH1_FIN_DIVIDER[0] << 8) | reg_CH1_FIN_DIVIDER[1];
 8000a2e:	4b26      	ldr	r3, [pc, #152]	@ (8000ac8 <main+0x320>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	021b      	lsls	r3, r3, #8
 8000a34:	b21a      	sxth	r2, r3
 8000a36:	4b24      	ldr	r3, [pc, #144]	@ (8000ac8 <main+0x320>)
 8000a38:	785b      	ldrb	r3, [r3, #1]
 8000a3a:	b21b      	sxth	r3, r3
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	b21b      	sxth	r3, r3
 8000a40:	81bb      	strh	r3, [r7, #12]
    uint16_t CH2_FIN_DIVIDER= (reg_CH2_FIN_DIVIDER[0] << 8) | reg_CH2_FIN_DIVIDER[1];
 8000a42:	4b22      	ldr	r3, [pc, #136]	@ (8000acc <main+0x324>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	021b      	lsls	r3, r3, #8
 8000a48:	b21a      	sxth	r2, r3
 8000a4a:	4b20      	ldr	r3, [pc, #128]	@ (8000acc <main+0x324>)
 8000a4c:	785b      	ldrb	r3, [r3, #1]
 8000a4e:	b21b      	sxth	r3, r3
 8000a50:	4313      	orrs	r3, r2
 8000a52:	b21b      	sxth	r3, r3
 8000a54:	817b      	strh	r3, [r7, #10]
    uint16_t CH3_FIN_DIVIDER= (reg_CH3_FIN_DIVIDER[0] << 8) | reg_CH3_FIN_DIVIDER[1];
 8000a56:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad0 <main+0x328>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	021b      	lsls	r3, r3, #8
 8000a5c:	b21a      	sxth	r2, r3
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad0 <main+0x328>)
 8000a60:	785b      	ldrb	r3, [r3, #1]
 8000a62:	b21b      	sxth	r3, r3
 8000a64:	4313      	orrs	r3, r2
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	813b      	strh	r3, [r7, #8]


    // Data transform for output LED
    int integerValue_MSB_CH0 = hex_to_dec(MSB_CH0);
 8000a6a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fdb7 	bl	80005e0 <hex_to_dec>
 8000a72:	e02f      	b.n	8000ad4 <main+0x32c>
 8000a74:	20000010 	.word	0x20000010
 8000a78:	20000170 	.word	0x20000170
 8000a7c:	20000004 	.word	0x20000004
 8000a80:	20000008 	.word	0x20000008
 8000a84:	20000014 	.word	0x20000014
 8000a88:	2000000c 	.word	0x2000000c
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	20000018 	.word	0x20000018
 8000a94:	20000130 	.word	0x20000130
 8000a98:	20000134 	.word	0x20000134
 8000a9c:	20000138 	.word	0x20000138
 8000aa0:	2000013c 	.word	0x2000013c
 8000aa4:	20000140 	.word	0x20000140
 8000aa8:	20000144 	.word	0x20000144
 8000aac:	20000148 	.word	0x20000148
 8000ab0:	2000014c 	.word	0x2000014c
 8000ab4:	20000150 	.word	0x20000150
 8000ab8:	20000154 	.word	0x20000154
 8000abc:	20000158 	.word	0x20000158
 8000ac0:	2000015c 	.word	0x2000015c
 8000ac4:	20000160 	.word	0x20000160
 8000ac8:	20000164 	.word	0x20000164
 8000acc:	20000168 	.word	0x20000168
 8000ad0:	2000016c 	.word	0x2000016c
 8000ad4:	6078      	str	r0, [r7, #4]
    int integerValue_MSB_CH1 = hex_to_dec(MSB_CH1);
 8000ad6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fd81 	bl	80005e0 <hex_to_dec>
 8000ade:	6038      	str	r0, [r7, #0]


    // Transmit the register value via UART
    Transmit_Data(MSB_CH0, LSB_CH0, CH0_FIN_DIVIDER, CH0_OFFSET, MSB_CH1, LSB_CH1, CH1_FIN_DIVIDER, CH1_OFFSET, MSB_CH2, LSB_CH2, CH2_FIN_DIVIDER, CH2_OFFSET, MSB_CH3, LSB_CH3, CH3_FIN_DIVIDER, CH3_OFFSET);
 8000ae0:	8afc      	ldrh	r4, [r7, #22]
 8000ae2:	89fa      	ldrh	r2, [r7, #14]
 8000ae4:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8000ae6:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8000ae8:	8a3b      	ldrh	r3, [r7, #16]
 8000aea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000aec:	893b      	ldrh	r3, [r7, #8]
 8000aee:	930a      	str	r3, [sp, #40]	@ 0x28
 8000af0:	8b3b      	ldrh	r3, [r7, #24]
 8000af2:	9309      	str	r3, [sp, #36]	@ 0x24
 8000af4:	8b7b      	ldrh	r3, [r7, #26]
 8000af6:	9308      	str	r3, [sp, #32]
 8000af8:	8a7b      	ldrh	r3, [r7, #18]
 8000afa:	9307      	str	r3, [sp, #28]
 8000afc:	897b      	ldrh	r3, [r7, #10]
 8000afe:	9306      	str	r3, [sp, #24]
 8000b00:	8bbb      	ldrh	r3, [r7, #28]
 8000b02:	9305      	str	r3, [sp, #20]
 8000b04:	8bfb      	ldrh	r3, [r7, #30]
 8000b06:	9304      	str	r3, [sp, #16]
 8000b08:	8abb      	ldrh	r3, [r7, #20]
 8000b0a:	9303      	str	r3, [sp, #12]
 8000b0c:	89bb      	ldrh	r3, [r7, #12]
 8000b0e:	9302      	str	r3, [sp, #8]
 8000b10:	8c3b      	ldrh	r3, [r7, #32]
 8000b12:	9301      	str	r3, [sp, #4]
 8000b14:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000b16:	9300      	str	r3, [sp, #0]
 8000b18:	4623      	mov	r3, r4
 8000b1a:	f7ff fd7d 	bl	8000618 <Transmit_Data>

    if (integerValue_MSB_CH0 > 3700 || integerValue_MSB_CH1 > 3700 ){
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	f640 6274 	movw	r2, #3700	@ 0xe74
 8000b24:	4293      	cmp	r3, r2
 8000b26:	dc04      	bgt.n	8000b32 <main+0x38a>
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	f640 6274 	movw	r2, #3700	@ 0xe74
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	dd05      	ble.n	8000b3e <main+0x396>
    	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000b32:	2201      	movs	r2, #1
 8000b34:	2120      	movs	r1, #32
 8000b36:	4806      	ldr	r0, [pc, #24]	@ (8000b50 <main+0x3a8>)
 8000b38:	f000 fd9e 	bl	8001678 <HAL_GPIO_WritePin>
 8000b3c:	e004      	b.n	8000b48 <main+0x3a0>
    }else{
    	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2120      	movs	r1, #32
 8000b42:	4803      	ldr	r0, [pc, #12]	@ (8000b50 <main+0x3a8>)
 8000b44:	f000 fd98 	bl	8001678 <HAL_GPIO_WritePin>
    };
    // Add a delay or condition to control the transmission frequency
    HAL_Delay(100);  // Delay for 1 second, adjust as needed
 8000b48:	2064      	movs	r0, #100	@ 0x64
 8000b4a:	f000 fb07 	bl	800115c <HAL_Delay>
  {
 8000b4e:	e69c      	b.n	800088a <main+0xe2>
 8000b50:	40020000 	.word	0x40020000

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	@ 0x50
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 0320 	add.w	r3, r7, #32
 8000b5e:	2230      	movs	r2, #48	@ 0x30
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f002 ff22 	bl	80039ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	4b29      	ldr	r3, [pc, #164]	@ (8000c24 <SystemClock_Config+0xd0>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b80:	4a28      	ldr	r2, [pc, #160]	@ (8000c24 <SystemClock_Config+0xd0>)
 8000b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b88:	4b26      	ldr	r3, [pc, #152]	@ (8000c24 <SystemClock_Config+0xd0>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	4b23      	ldr	r3, [pc, #140]	@ (8000c28 <SystemClock_Config+0xd4>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ba0:	4a21      	ldr	r2, [pc, #132]	@ (8000c28 <SystemClock_Config+0xd4>)
 8000ba2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c28 <SystemClock_Config+0xd4>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bbc:	2310      	movs	r3, #16
 8000bbe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000bc8:	2310      	movs	r3, #16
 8000bca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bcc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000bd0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bd2:	2304      	movs	r3, #4
 8000bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bd6:	2307      	movs	r3, #7
 8000bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bda:	f107 0320 	add.w	r3, r7, #32
 8000bde:	4618      	mov	r0, r3
 8000be0:	f001 fd88 	bl	80026f4 <HAL_RCC_OscConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bea:	f000 f8e5 	bl	8000db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bee:	230f      	movs	r3, #15
 8000bf0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bfe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c04:	f107 030c 	add.w	r3, r7, #12
 8000c08:	2102      	movs	r1, #2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f001 ffea 	bl	8002be4 <HAL_RCC_ClockConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c16:	f000 f8cf 	bl	8000db8 <Error_Handler>
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	3750      	adds	r7, #80	@ 0x50
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40007000 	.word	0x40007000

08000c2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8000c30:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <MX_I2C1_Init+0x50>)
 8000c32:	4a13      	ldr	r2, [pc, #76]	@ (8000c80 <MX_I2C1_Init+0x54>)
 8000c34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c36:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <MX_I2C1_Init+0x50>)
 8000c38:	4a12      	ldr	r2, [pc, #72]	@ (8000c84 <MX_I2C1_Init+0x58>)
 8000c3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <MX_I2C1_Init+0x50>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <MX_I2C1_Init+0x50>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <MX_I2C1_Init+0x50>)
 8000c4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c50:	4b0a      	ldr	r3, [pc, #40]	@ (8000c7c <MX_I2C1_Init+0x50>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c56:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <MX_I2C1_Init+0x50>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c5c:	4b07      	ldr	r3, [pc, #28]	@ (8000c7c <MX_I2C1_Init+0x50>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c62:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <MX_I2C1_Init+0x50>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c68:	4804      	ldr	r0, [pc, #16]	@ (8000c7c <MX_I2C1_Init+0x50>)
 8000c6a:	f000 fd1f 	bl	80016ac <HAL_I2C_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c74:	f000 f8a0 	bl	8000db8 <Error_Handler>
  }
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000094 	.word	0x20000094
 8000c80:	40005400 	.word	0x40005400
 8000c84:	000186a0 	.word	0x000186a0

08000c88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000c8c:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <MX_USART2_UART_Init+0x4c>)
 8000c8e:	4a12      	ldr	r2, [pc, #72]	@ (8000cd8 <MX_USART2_UART_Init+0x50>)
 8000c90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c92:	4b10      	ldr	r3, [pc, #64]	@ (8000cd4 <MX_USART2_UART_Init+0x4c>)
 8000c94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <MX_USART2_UART_Init+0x4c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd4 <MX_USART2_UART_Init+0x4c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd4 <MX_USART2_UART_Init+0x4c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cac:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <MX_USART2_UART_Init+0x4c>)
 8000cae:	220c      	movs	r2, #12
 8000cb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb2:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <MX_USART2_UART_Init+0x4c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <MX_USART2_UART_Init+0x4c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cbe:	4805      	ldr	r0, [pc, #20]	@ (8000cd4 <MX_USART2_UART_Init+0x4c>)
 8000cc0:	f002 f9b0 	bl	8003024 <HAL_UART_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cca:	f000 f875 	bl	8000db8 <Error_Handler>
  }
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200000e8 	.word	0x200000e8
 8000cd8:	40004400 	.word	0x40004400

08000cdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	@ 0x28
 8000ce0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
 8000cf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	4b2d      	ldr	r3, [pc, #180]	@ (8000dac <MX_GPIO_Init+0xd0>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a2c      	ldr	r2, [pc, #176]	@ (8000dac <MX_GPIO_Init+0xd0>)
 8000cfc:	f043 0304 	orr.w	r3, r3, #4
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b2a      	ldr	r3, [pc, #168]	@ (8000dac <MX_GPIO_Init+0xd0>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f003 0304 	and.w	r3, r3, #4
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b26      	ldr	r3, [pc, #152]	@ (8000dac <MX_GPIO_Init+0xd0>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4a25      	ldr	r2, [pc, #148]	@ (8000dac <MX_GPIO_Init+0xd0>)
 8000d18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4b23      	ldr	r3, [pc, #140]	@ (8000dac <MX_GPIO_Init+0xd0>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dac <MX_GPIO_Init+0xd0>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	4a1e      	ldr	r2, [pc, #120]	@ (8000dac <MX_GPIO_Init+0xd0>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dac <MX_GPIO_Init+0xd0>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	4b18      	ldr	r3, [pc, #96]	@ (8000dac <MX_GPIO_Init+0xd0>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	4a17      	ldr	r2, [pc, #92]	@ (8000dac <MX_GPIO_Init+0xd0>)
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d56:	4b15      	ldr	r3, [pc, #84]	@ (8000dac <MX_GPIO_Init+0xd0>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2120      	movs	r1, #32
 8000d66:	4812      	ldr	r0, [pc, #72]	@ (8000db0 <MX_GPIO_Init+0xd4>)
 8000d68:	f000 fc86 	bl	8001678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d72:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	480c      	ldr	r0, [pc, #48]	@ (8000db4 <MX_GPIO_Init+0xd8>)
 8000d84:	f000 faf4 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d88:	2320      	movs	r3, #32
 8000d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4804      	ldr	r0, [pc, #16]	@ (8000db0 <MX_GPIO_Init+0xd4>)
 8000da0:	f000 fae6 	bl	8001370 <HAL_GPIO_Init>
}
 8000da4:	bf00      	nop
 8000da6:	3728      	adds	r7, #40	@ 0x28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020000 	.word	0x40020000
 8000db4:	40020800 	.word	0x40020800

08000db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dbc:	b672      	cpsid	i
}
 8000dbe:	bf00      	nop
  __disable_irq();
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <Error_Handler+0x8>

08000dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	4b10      	ldr	r3, [pc, #64]	@ (8000e10 <HAL_MspInit+0x4c>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd2:	4a0f      	ldr	r2, [pc, #60]	@ (8000e10 <HAL_MspInit+0x4c>)
 8000dd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dda:	4b0d      	ldr	r3, [pc, #52]	@ (8000e10 <HAL_MspInit+0x4c>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	4b09      	ldr	r3, [pc, #36]	@ (8000e10 <HAL_MspInit+0x4c>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dee:	4a08      	ldr	r2, [pc, #32]	@ (8000e10 <HAL_MspInit+0x4c>)
 8000df0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000df4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000df6:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <HAL_MspInit+0x4c>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e02:	2007      	movs	r0, #7
 8000e04:	f000 fa80 	bl	8001308 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40023800 	.word	0x40023800

08000e14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	@ 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a19      	ldr	r2, [pc, #100]	@ (8000e98 <HAL_I2C_MspInit+0x84>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d12b      	bne.n	8000e8e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	4b18      	ldr	r3, [pc, #96]	@ (8000e9c <HAL_I2C_MspInit+0x88>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	4a17      	ldr	r2, [pc, #92]	@ (8000e9c <HAL_I2C_MspInit+0x88>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e46:	4b15      	ldr	r3, [pc, #84]	@ (8000e9c <HAL_I2C_MspInit+0x88>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e52:	23c0      	movs	r3, #192	@ 0xc0
 8000e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e56:	2312      	movs	r3, #18
 8000e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e62:	2304      	movs	r3, #4
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	480c      	ldr	r0, [pc, #48]	@ (8000ea0 <HAL_I2C_MspInit+0x8c>)
 8000e6e:	f000 fa7f 	bl	8001370 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b09      	ldr	r3, [pc, #36]	@ (8000e9c <HAL_I2C_MspInit+0x88>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7a:	4a08      	ldr	r2, [pc, #32]	@ (8000e9c <HAL_I2C_MspInit+0x88>)
 8000e7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e82:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <HAL_I2C_MspInit+0x88>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e8e:	bf00      	nop
 8000e90:	3728      	adds	r7, #40	@ 0x28
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40005400 	.word	0x40005400
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020400 	.word	0x40020400

08000ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	@ 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a19      	ldr	r2, [pc, #100]	@ (8000f28 <HAL_UART_MspInit+0x84>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d12b      	bne.n	8000f1e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	4b18      	ldr	r3, [pc, #96]	@ (8000f2c <HAL_UART_MspInit+0x88>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ece:	4a17      	ldr	r2, [pc, #92]	@ (8000f2c <HAL_UART_MspInit+0x88>)
 8000ed0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed6:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <HAL_UART_MspInit+0x88>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <HAL_UART_MspInit+0x88>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	4a10      	ldr	r2, [pc, #64]	@ (8000f2c <HAL_UART_MspInit+0x88>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f2c <HAL_UART_MspInit+0x88>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000efe:	230c      	movs	r3, #12
 8000f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f0e:	2307      	movs	r3, #7
 8000f10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	4805      	ldr	r0, [pc, #20]	@ (8000f30 <HAL_UART_MspInit+0x8c>)
 8000f1a:	f000 fa29 	bl	8001370 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f1e:	bf00      	nop
 8000f20:	3728      	adds	r7, #40	@ 0x28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40004400 	.word	0x40004400
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40020000 	.word	0x40020000

08000f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <NMI_Handler+0x4>

08000f3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <HardFault_Handler+0x4>

08000f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <MemManage_Handler+0x4>

08000f4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <BusFault_Handler+0x4>

08000f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <UsageFault_Handler+0x4>

08000f5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8a:	f000 f8c7 	bl	800111c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f9c:	4a14      	ldr	r2, [pc, #80]	@ (8000ff0 <_sbrk+0x5c>)
 8000f9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <_sbrk+0x60>)
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa8:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <_sbrk+0x64>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d102      	bne.n	8000fb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <_sbrk+0x64>)
 8000fb2:	4a12      	ldr	r2, [pc, #72]	@ (8000ffc <_sbrk+0x68>)
 8000fb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d207      	bcs.n	8000fd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc4:	f002 fcfa 	bl	80039bc <__errno>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	220c      	movs	r2, #12
 8000fcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd2:	e009      	b.n	8000fe8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd4:	4b08      	ldr	r3, [pc, #32]	@ (8000ff8 <_sbrk+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fda:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	4a05      	ldr	r2, [pc, #20]	@ (8000ff8 <_sbrk+0x64>)
 8000fe4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20018000 	.word	0x20018000
 8000ff4:	00000400 	.word	0x00000400
 8000ff8:	20000178 	.word	0x20000178
 8000ffc:	200002c8 	.word	0x200002c8

08001000 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <SystemInit+0x20>)
 8001006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800100a:	4a05      	ldr	r2, [pc, #20]	@ (8001020 <SystemInit+0x20>)
 800100c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001010:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800105c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001028:	f7ff ffea 	bl	8001000 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800102c:	480c      	ldr	r0, [pc, #48]	@ (8001060 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800102e:	490d      	ldr	r1, [pc, #52]	@ (8001064 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001030:	4a0d      	ldr	r2, [pc, #52]	@ (8001068 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001034:	e002      	b.n	800103c <LoopCopyDataInit>

08001036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103a:	3304      	adds	r3, #4

0800103c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800103c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001040:	d3f9      	bcc.n	8001036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001042:	4a0a      	ldr	r2, [pc, #40]	@ (800106c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001044:	4c0a      	ldr	r4, [pc, #40]	@ (8001070 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001048:	e001      	b.n	800104e <LoopFillZerobss>

0800104a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800104c:	3204      	adds	r2, #4

0800104e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001050:	d3fb      	bcc.n	800104a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001052:	f002 fcb9 	bl	80039c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001056:	f7ff fba7 	bl	80007a8 <main>
  bx  lr    
 800105a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800105c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001064:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001068:	080044f8 	.word	0x080044f8
  ldr r2, =_sbss
 800106c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001070:	200002c8 	.word	0x200002c8

08001074 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC_IRQHandler>
	...

08001078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800107c:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <HAL_Init+0x40>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0d      	ldr	r2, [pc, #52]	@ (80010b8 <HAL_Init+0x40>)
 8001082:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001086:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001088:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <HAL_Init+0x40>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <HAL_Init+0x40>)
 800108e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001092:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001094:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <HAL_Init+0x40>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a07      	ldr	r2, [pc, #28]	@ (80010b8 <HAL_Init+0x40>)
 800109a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800109e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a0:	2003      	movs	r0, #3
 80010a2:	f000 f931 	bl	8001308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f000 f808 	bl	80010bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ac:	f7ff fe8a 	bl	8000dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023c00 	.word	0x40023c00

080010bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c4:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <HAL_InitTick+0x54>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b12      	ldr	r3, [pc, #72]	@ (8001114 <HAL_InitTick+0x58>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4619      	mov	r1, r3
 80010ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f93b 	bl	8001356 <HAL_SYSTICK_Config>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00e      	b.n	8001108 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	d80a      	bhi.n	8001106 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f0:	2200      	movs	r2, #0
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f000 f911 	bl	800131e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010fc:	4a06      	ldr	r2, [pc, #24]	@ (8001118 <HAL_InitTick+0x5c>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001102:	2300      	movs	r3, #0
 8001104:	e000      	b.n	8001108 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2000001c 	.word	0x2000001c
 8001114:	20000024 	.word	0x20000024
 8001118:	20000020 	.word	0x20000020

0800111c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <HAL_IncTick+0x20>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <HAL_IncTick+0x24>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4413      	add	r3, r2
 800112c:	4a04      	ldr	r2, [pc, #16]	@ (8001140 <HAL_IncTick+0x24>)
 800112e:	6013      	str	r3, [r2, #0]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000024 	.word	0x20000024
 8001140:	2000017c 	.word	0x2000017c

08001144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return uwTick;
 8001148:	4b03      	ldr	r3, [pc, #12]	@ (8001158 <HAL_GetTick+0x14>)
 800114a:	681b      	ldr	r3, [r3, #0]
}
 800114c:	4618      	mov	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	2000017c 	.word	0x2000017c

0800115c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001164:	f7ff ffee 	bl	8001144 <HAL_GetTick>
 8001168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001174:	d005      	beq.n	8001182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001176:	4b0a      	ldr	r3, [pc, #40]	@ (80011a0 <HAL_Delay+0x44>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4413      	add	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001182:	bf00      	nop
 8001184:	f7ff ffde 	bl	8001144 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	429a      	cmp	r2, r3
 8001192:	d8f7      	bhi.n	8001184 <HAL_Delay+0x28>
  {
  }
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000024 	.word	0x20000024

080011a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b4:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <__NVIC_SetPriorityGrouping+0x44>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011c0:	4013      	ands	r3, r2
 80011c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d6:	4a04      	ldr	r2, [pc, #16]	@ (80011e8 <__NVIC_SetPriorityGrouping+0x44>)
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	60d3      	str	r3, [r2, #12]
}
 80011dc:	bf00      	nop
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f0:	4b04      	ldr	r3, [pc, #16]	@ (8001204 <__NVIC_GetPriorityGrouping+0x18>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	0a1b      	lsrs	r3, r3, #8
 80011f6:	f003 0307 	and.w	r3, r3, #7
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	2b00      	cmp	r3, #0
 800121a:	db0a      	blt.n	8001232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	490c      	ldr	r1, [pc, #48]	@ (8001254 <__NVIC_SetPriority+0x4c>)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	0112      	lsls	r2, r2, #4
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	440b      	add	r3, r1
 800122c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001230:	e00a      	b.n	8001248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4908      	ldr	r1, [pc, #32]	@ (8001258 <__NVIC_SetPriority+0x50>)
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	3b04      	subs	r3, #4
 8001240:	0112      	lsls	r2, r2, #4
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	440b      	add	r3, r1
 8001246:	761a      	strb	r2, [r3, #24]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000e100 	.word	0xe000e100
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125c:	b480      	push	{r7}
 800125e:	b089      	sub	sp, #36	@ 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f1c3 0307 	rsb	r3, r3, #7
 8001276:	2b04      	cmp	r3, #4
 8001278:	bf28      	it	cs
 800127a:	2304      	movcs	r3, #4
 800127c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3304      	adds	r3, #4
 8001282:	2b06      	cmp	r3, #6
 8001284:	d902      	bls.n	800128c <NVIC_EncodePriority+0x30>
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3b03      	subs	r3, #3
 800128a:	e000      	b.n	800128e <NVIC_EncodePriority+0x32>
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	f04f 32ff 	mov.w	r2, #4294967295
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43da      	mvns	r2, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	401a      	ands	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a4:	f04f 31ff 	mov.w	r1, #4294967295
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	43d9      	mvns	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	4313      	orrs	r3, r2
         );
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3724      	adds	r7, #36	@ 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012d4:	d301      	bcc.n	80012da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d6:	2301      	movs	r3, #1
 80012d8:	e00f      	b.n	80012fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012da:	4a0a      	ldr	r2, [pc, #40]	@ (8001304 <SysTick_Config+0x40>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e2:	210f      	movs	r1, #15
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295
 80012e8:	f7ff ff8e 	bl	8001208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ec:	4b05      	ldr	r3, [pc, #20]	@ (8001304 <SysTick_Config+0x40>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f2:	4b04      	ldr	r3, [pc, #16]	@ (8001304 <SysTick_Config+0x40>)
 80012f4:	2207      	movs	r2, #7
 80012f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	e000e010 	.word	0xe000e010

08001308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff47 	bl	80011a4 <__NVIC_SetPriorityGrouping>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001330:	f7ff ff5c 	bl	80011ec <__NVIC_GetPriorityGrouping>
 8001334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	68b9      	ldr	r1, [r7, #8]
 800133a:	6978      	ldr	r0, [r7, #20]
 800133c:	f7ff ff8e 	bl	800125c <NVIC_EncodePriority>
 8001340:	4602      	mov	r2, r0
 8001342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001346:	4611      	mov	r1, r2
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff5d 	bl	8001208 <__NVIC_SetPriority>
}
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ffb0 	bl	80012c4 <SysTick_Config>
 8001364:	4603      	mov	r3, r0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001370:	b480      	push	{r7}
 8001372:	b089      	sub	sp, #36	@ 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001382:	2300      	movs	r3, #0
 8001384:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
 800138a:	e159      	b.n	8001640 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800138c:	2201      	movs	r2, #1
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	f040 8148 	bne.w	800163a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d005      	beq.n	80013c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d130      	bne.n	8001424 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	2203      	movs	r2, #3
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	68da      	ldr	r2, [r3, #12]
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013f8:	2201      	movs	r2, #1
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	091b      	lsrs	r3, r3, #4
 800140e:	f003 0201 	and.w	r2, r3, #1
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	2b03      	cmp	r3, #3
 800142e:	d017      	beq.n	8001460 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	2203      	movs	r2, #3
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d123      	bne.n	80014b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	08da      	lsrs	r2, r3, #3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3208      	adds	r2, #8
 8001474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	220f      	movs	r2, #15
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	691a      	ldr	r2, [r3, #16]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	08da      	lsrs	r2, r3, #3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3208      	adds	r2, #8
 80014ae:	69b9      	ldr	r1, [r7, #24]
 80014b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	2203      	movs	r2, #3
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0203 	and.w	r2, r3, #3
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 80a2 	beq.w	800163a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	4b57      	ldr	r3, [pc, #348]	@ (8001658 <HAL_GPIO_Init+0x2e8>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fe:	4a56      	ldr	r2, [pc, #344]	@ (8001658 <HAL_GPIO_Init+0x2e8>)
 8001500:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001504:	6453      	str	r3, [r2, #68]	@ 0x44
 8001506:	4b54      	ldr	r3, [pc, #336]	@ (8001658 <HAL_GPIO_Init+0x2e8>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001512:	4a52      	ldr	r2, [pc, #328]	@ (800165c <HAL_GPIO_Init+0x2ec>)
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	089b      	lsrs	r3, r3, #2
 8001518:	3302      	adds	r3, #2
 800151a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f003 0303 	and.w	r3, r3, #3
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	220f      	movs	r2, #15
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4013      	ands	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a49      	ldr	r2, [pc, #292]	@ (8001660 <HAL_GPIO_Init+0x2f0>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d019      	beq.n	8001572 <HAL_GPIO_Init+0x202>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a48      	ldr	r2, [pc, #288]	@ (8001664 <HAL_GPIO_Init+0x2f4>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d013      	beq.n	800156e <HAL_GPIO_Init+0x1fe>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a47      	ldr	r2, [pc, #284]	@ (8001668 <HAL_GPIO_Init+0x2f8>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d00d      	beq.n	800156a <HAL_GPIO_Init+0x1fa>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a46      	ldr	r2, [pc, #280]	@ (800166c <HAL_GPIO_Init+0x2fc>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d007      	beq.n	8001566 <HAL_GPIO_Init+0x1f6>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a45      	ldr	r2, [pc, #276]	@ (8001670 <HAL_GPIO_Init+0x300>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d101      	bne.n	8001562 <HAL_GPIO_Init+0x1f2>
 800155e:	2304      	movs	r3, #4
 8001560:	e008      	b.n	8001574 <HAL_GPIO_Init+0x204>
 8001562:	2307      	movs	r3, #7
 8001564:	e006      	b.n	8001574 <HAL_GPIO_Init+0x204>
 8001566:	2303      	movs	r3, #3
 8001568:	e004      	b.n	8001574 <HAL_GPIO_Init+0x204>
 800156a:	2302      	movs	r3, #2
 800156c:	e002      	b.n	8001574 <HAL_GPIO_Init+0x204>
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <HAL_GPIO_Init+0x204>
 8001572:	2300      	movs	r3, #0
 8001574:	69fa      	ldr	r2, [r7, #28]
 8001576:	f002 0203 	and.w	r2, r2, #3
 800157a:	0092      	lsls	r2, r2, #2
 800157c:	4093      	lsls	r3, r2
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001584:	4935      	ldr	r1, [pc, #212]	@ (800165c <HAL_GPIO_Init+0x2ec>)
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	089b      	lsrs	r3, r3, #2
 800158a:	3302      	adds	r3, #2
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001592:	4b38      	ldr	r3, [pc, #224]	@ (8001674 <HAL_GPIO_Init+0x304>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001674 <HAL_GPIO_Init+0x304>)
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001674 <HAL_GPIO_Init+0x304>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015e0:	4a24      	ldr	r2, [pc, #144]	@ (8001674 <HAL_GPIO_Init+0x304>)
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015e6:	4b23      	ldr	r3, [pc, #140]	@ (8001674 <HAL_GPIO_Init+0x304>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800160a:	4a1a      	ldr	r2, [pc, #104]	@ (8001674 <HAL_GPIO_Init+0x304>)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001610:	4b18      	ldr	r3, [pc, #96]	@ (8001674 <HAL_GPIO_Init+0x304>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001634:	4a0f      	ldr	r2, [pc, #60]	@ (8001674 <HAL_GPIO_Init+0x304>)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3301      	adds	r3, #1
 800163e:	61fb      	str	r3, [r7, #28]
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	2b0f      	cmp	r3, #15
 8001644:	f67f aea2 	bls.w	800138c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	3724      	adds	r7, #36	@ 0x24
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40023800 	.word	0x40023800
 800165c:	40013800 	.word	0x40013800
 8001660:	40020000 	.word	0x40020000
 8001664:	40020400 	.word	0x40020400
 8001668:	40020800 	.word	0x40020800
 800166c:	40020c00 	.word	0x40020c00
 8001670:	40021000 	.word	0x40021000
 8001674:	40013c00 	.word	0x40013c00

08001678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	807b      	strh	r3, [r7, #2]
 8001684:	4613      	mov	r3, r2
 8001686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001688:	787b      	ldrb	r3, [r7, #1]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800168e:	887a      	ldrh	r2, [r7, #2]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001694:	e003      	b.n	800169e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001696:	887b      	ldrh	r3, [r7, #2]
 8001698:	041a      	lsls	r2, r3, #16
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	619a      	str	r2, [r3, #24]
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
	...

080016ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e12b      	b.n	8001916 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d106      	bne.n	80016d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff fb9e 	bl	8000e14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2224      	movs	r2, #36	@ 0x24
 80016dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0201 	bic.w	r2, r2, #1
 80016ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800170e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001710:	f001 fc60 	bl	8002fd4 <HAL_RCC_GetPCLK1Freq>
 8001714:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	4a81      	ldr	r2, [pc, #516]	@ (8001920 <HAL_I2C_Init+0x274>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d807      	bhi.n	8001730 <HAL_I2C_Init+0x84>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4a80      	ldr	r2, [pc, #512]	@ (8001924 <HAL_I2C_Init+0x278>)
 8001724:	4293      	cmp	r3, r2
 8001726:	bf94      	ite	ls
 8001728:	2301      	movls	r3, #1
 800172a:	2300      	movhi	r3, #0
 800172c:	b2db      	uxtb	r3, r3
 800172e:	e006      	b.n	800173e <HAL_I2C_Init+0x92>
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4a7d      	ldr	r2, [pc, #500]	@ (8001928 <HAL_I2C_Init+0x27c>)
 8001734:	4293      	cmp	r3, r2
 8001736:	bf94      	ite	ls
 8001738:	2301      	movls	r3, #1
 800173a:	2300      	movhi	r3, #0
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e0e7      	b.n	8001916 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	4a78      	ldr	r2, [pc, #480]	@ (800192c <HAL_I2C_Init+0x280>)
 800174a:	fba2 2303 	umull	r2, r3, r2, r3
 800174e:	0c9b      	lsrs	r3, r3, #18
 8001750:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	430a      	orrs	r2, r1
 8001764:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	4a6a      	ldr	r2, [pc, #424]	@ (8001920 <HAL_I2C_Init+0x274>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d802      	bhi.n	8001780 <HAL_I2C_Init+0xd4>
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	3301      	adds	r3, #1
 800177e:	e009      	b.n	8001794 <HAL_I2C_Init+0xe8>
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001786:	fb02 f303 	mul.w	r3, r2, r3
 800178a:	4a69      	ldr	r2, [pc, #420]	@ (8001930 <HAL_I2C_Init+0x284>)
 800178c:	fba2 2303 	umull	r2, r3, r2, r3
 8001790:	099b      	lsrs	r3, r3, #6
 8001792:	3301      	adds	r3, #1
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	430b      	orrs	r3, r1
 800179a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80017a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	495c      	ldr	r1, [pc, #368]	@ (8001920 <HAL_I2C_Init+0x274>)
 80017b0:	428b      	cmp	r3, r1
 80017b2:	d819      	bhi.n	80017e8 <HAL_I2C_Init+0x13c>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	1e59      	subs	r1, r3, #1
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	fbb1 f3f3 	udiv	r3, r1, r3
 80017c2:	1c59      	adds	r1, r3, #1
 80017c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80017c8:	400b      	ands	r3, r1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00a      	beq.n	80017e4 <HAL_I2C_Init+0x138>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	1e59      	subs	r1, r3, #1
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80017dc:	3301      	adds	r3, #1
 80017de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017e2:	e051      	b.n	8001888 <HAL_I2C_Init+0x1dc>
 80017e4:	2304      	movs	r3, #4
 80017e6:	e04f      	b.n	8001888 <HAL_I2C_Init+0x1dc>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d111      	bne.n	8001814 <HAL_I2C_Init+0x168>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	1e58      	subs	r0, r3, #1
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6859      	ldr	r1, [r3, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	440b      	add	r3, r1
 80017fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001802:	3301      	adds	r3, #1
 8001804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001808:	2b00      	cmp	r3, #0
 800180a:	bf0c      	ite	eq
 800180c:	2301      	moveq	r3, #1
 800180e:	2300      	movne	r3, #0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	e012      	b.n	800183a <HAL_I2C_Init+0x18e>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	1e58      	subs	r0, r3, #1
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6859      	ldr	r1, [r3, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	0099      	lsls	r1, r3, #2
 8001824:	440b      	add	r3, r1
 8001826:	fbb0 f3f3 	udiv	r3, r0, r3
 800182a:	3301      	adds	r3, #1
 800182c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001830:	2b00      	cmp	r3, #0
 8001832:	bf0c      	ite	eq
 8001834:	2301      	moveq	r3, #1
 8001836:	2300      	movne	r3, #0
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_I2C_Init+0x196>
 800183e:	2301      	movs	r3, #1
 8001840:	e022      	b.n	8001888 <HAL_I2C_Init+0x1dc>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10e      	bne.n	8001868 <HAL_I2C_Init+0x1bc>
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	1e58      	subs	r0, r3, #1
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6859      	ldr	r1, [r3, #4]
 8001852:	460b      	mov	r3, r1
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	440b      	add	r3, r1
 8001858:	fbb0 f3f3 	udiv	r3, r0, r3
 800185c:	3301      	adds	r3, #1
 800185e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001862:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001866:	e00f      	b.n	8001888 <HAL_I2C_Init+0x1dc>
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	1e58      	subs	r0, r3, #1
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6859      	ldr	r1, [r3, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	440b      	add	r3, r1
 8001876:	0099      	lsls	r1, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	fbb0 f3f3 	udiv	r3, r0, r3
 800187e:	3301      	adds	r3, #1
 8001880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001884:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	6809      	ldr	r1, [r1, #0]
 800188c:	4313      	orrs	r3, r2
 800188e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69da      	ldr	r2, [r3, #28]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80018b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6911      	ldr	r1, [r2, #16]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	68d2      	ldr	r2, [r2, #12]
 80018c2:	4311      	orrs	r1, r2
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	430b      	orrs	r3, r1
 80018ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	695a      	ldr	r2, [r3, #20]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0201 	orr.w	r2, r2, #1
 80018f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2220      	movs	r2, #32
 8001902:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	000186a0 	.word	0x000186a0
 8001924:	001e847f 	.word	0x001e847f
 8001928:	003d08ff 	.word	0x003d08ff
 800192c:	431bde83 	.word	0x431bde83
 8001930:	10624dd3 	.word	0x10624dd3

08001934 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af02      	add	r7, sp, #8
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	4608      	mov	r0, r1
 800193e:	4611      	mov	r1, r2
 8001940:	461a      	mov	r2, r3
 8001942:	4603      	mov	r3, r0
 8001944:	817b      	strh	r3, [r7, #10]
 8001946:	460b      	mov	r3, r1
 8001948:	813b      	strh	r3, [r7, #8]
 800194a:	4613      	mov	r3, r2
 800194c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800194e:	f7ff fbf9 	bl	8001144 <HAL_GetTick>
 8001952:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b20      	cmp	r3, #32
 800195e:	f040 80d9 	bne.w	8001b14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2319      	movs	r3, #25
 8001968:	2201      	movs	r2, #1
 800196a:	496d      	ldr	r1, [pc, #436]	@ (8001b20 <HAL_I2C_Mem_Write+0x1ec>)
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f000 fc8b 	bl	8002288 <I2C_WaitOnFlagUntilTimeout>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001978:	2302      	movs	r3, #2
 800197a:	e0cc      	b.n	8001b16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001982:	2b01      	cmp	r3, #1
 8001984:	d101      	bne.n	800198a <HAL_I2C_Mem_Write+0x56>
 8001986:	2302      	movs	r3, #2
 8001988:	e0c5      	b.n	8001b16 <HAL_I2C_Mem_Write+0x1e2>
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b01      	cmp	r3, #1
 800199e:	d007      	beq.n	80019b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 0201 	orr.w	r2, r2, #1
 80019ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2221      	movs	r2, #33	@ 0x21
 80019c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2240      	movs	r2, #64	@ 0x40
 80019cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2200      	movs	r2, #0
 80019d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6a3a      	ldr	r2, [r7, #32]
 80019da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80019e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4a4d      	ldr	r2, [pc, #308]	@ (8001b24 <HAL_I2C_Mem_Write+0x1f0>)
 80019f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019f2:	88f8      	ldrh	r0, [r7, #6]
 80019f4:	893a      	ldrh	r2, [r7, #8]
 80019f6:	8979      	ldrh	r1, [r7, #10]
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	4603      	mov	r3, r0
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 fac2 	bl	8001f8c <I2C_RequestMemoryWrite>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d052      	beq.n	8001ab4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e081      	b.n	8001b16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f000 fd50 	bl	80024bc <I2C_WaitOnTXEFlagUntilTimeout>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00d      	beq.n	8001a3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d107      	bne.n	8001a3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e06b      	b.n	8001b16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a42:	781a      	ldrb	r2, [r3, #0]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	3b01      	subs	r3, #1
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d11b      	bne.n	8001ab4 <HAL_I2C_Mem_Write+0x180>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d017      	beq.n	8001ab4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a88:	781a      	ldrb	r2, [r3, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	3b01      	subs	r3, #1
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1aa      	bne.n	8001a12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 fd43 	bl	800254c <I2C_WaitOnBTFFlagUntilTimeout>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00d      	beq.n	8001ae8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad0:	2b04      	cmp	r3, #4
 8001ad2:	d107      	bne.n	8001ae4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ae2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e016      	b.n	8001b16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001af6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2220      	movs	r2, #32
 8001afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	e000      	b.n	8001b16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001b14:	2302      	movs	r3, #2
  }
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	00100002 	.word	0x00100002
 8001b24:	ffff0000 	.word	0xffff0000

08001b28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08c      	sub	sp, #48	@ 0x30
 8001b2c:	af02      	add	r7, sp, #8
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	4608      	mov	r0, r1
 8001b32:	4611      	mov	r1, r2
 8001b34:	461a      	mov	r2, r3
 8001b36:	4603      	mov	r3, r0
 8001b38:	817b      	strh	r3, [r7, #10]
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	813b      	strh	r3, [r7, #8]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b42:	f7ff faff 	bl	8001144 <HAL_GetTick>
 8001b46:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b20      	cmp	r3, #32
 8001b52:	f040 8214 	bne.w	8001f7e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	2319      	movs	r3, #25
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	497b      	ldr	r1, [pc, #492]	@ (8001d4c <HAL_I2C_Mem_Read+0x224>)
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 fb91 	bl	8002288 <I2C_WaitOnFlagUntilTimeout>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	e207      	b.n	8001f80 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d101      	bne.n	8001b7e <HAL_I2C_Mem_Read+0x56>
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	e200      	b.n	8001f80 <HAL_I2C_Mem_Read+0x458>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d007      	beq.n	8001ba4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0201 	orr.w	r2, r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2222      	movs	r2, #34	@ 0x22
 8001bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2240      	movs	r2, #64	@ 0x40
 8001bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001bd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4a5b      	ldr	r2, [pc, #364]	@ (8001d50 <HAL_I2C_Mem_Read+0x228>)
 8001be4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001be6:	88f8      	ldrh	r0, [r7, #6]
 8001be8:	893a      	ldrh	r2, [r7, #8]
 8001bea:	8979      	ldrh	r1, [r7, #10]
 8001bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bee:	9301      	str	r3, [sp, #4]
 8001bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 fa5e 	bl	80020b8 <I2C_RequestMemoryRead>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e1bc      	b.n	8001f80 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d113      	bne.n	8001c36 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c0e:	2300      	movs	r3, #0
 8001c10:	623b      	str	r3, [r7, #32]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	623b      	str	r3, [r7, #32]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	623b      	str	r3, [r7, #32]
 8001c22:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	e190      	b.n	8001f58 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d11b      	bne.n	8001c76 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	61fb      	str	r3, [r7, #28]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	61fb      	str	r3, [r7, #28]
 8001c62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	e170      	b.n	8001f58 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d11b      	bne.n	8001cb6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c8c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	61bb      	str	r3, [r7, #24]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	e150      	b.n	8001f58 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001ccc:	e144      	b.n	8001f58 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	f200 80f1 	bhi.w	8001eba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d123      	bne.n	8001d28 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ce0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ce2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f000 fc79 	bl	80025dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e145      	b.n	8001f80 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691a      	ldr	r2, [r3, #16]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d10:	3b01      	subs	r3, #1
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d26:	e117      	b.n	8001f58 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d14e      	bne.n	8001dce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d36:	2200      	movs	r2, #0
 8001d38:	4906      	ldr	r1, [pc, #24]	@ (8001d54 <HAL_I2C_Mem_Read+0x22c>)
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 faa4 	bl	8002288 <I2C_WaitOnFlagUntilTimeout>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d008      	beq.n	8001d58 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e11a      	b.n	8001f80 <HAL_I2C_Mem_Read+0x458>
 8001d4a:	bf00      	nop
 8001d4c:	00100002 	.word	0x00100002
 8001d50:	ffff0000 	.word	0xffff0000
 8001d54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691a      	ldr	r2, [r3, #16]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7a:	1c5a      	adds	r2, r3, #1
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	3b01      	subs	r3, #1
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	691a      	ldr	r2, [r3, #16]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dac:	1c5a      	adds	r2, r3, #1
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001db6:	3b01      	subs	r3, #1
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001dcc:	e0c4      	b.n	8001f58 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	496c      	ldr	r1, [pc, #432]	@ (8001f88 <HAL_I2C_Mem_Read+0x460>)
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 fa55 	bl	8002288 <I2C_WaitOnFlagUntilTimeout>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0cb      	b.n	8001f80 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001df6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691a      	ldr	r2, [r3, #16]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	3b01      	subs	r3, #1
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e30:	2200      	movs	r2, #0
 8001e32:	4955      	ldr	r1, [pc, #340]	@ (8001f88 <HAL_I2C_Mem_Read+0x460>)
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 fa27 	bl	8002288 <I2C_WaitOnFlagUntilTimeout>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e09d      	b.n	8001f80 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691a      	ldr	r2, [r3, #16]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691a      	ldr	r2, [r3, #16]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001eb8:	e04e      	b.n	8001f58 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ebc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f000 fb8c 	bl	80025dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e058      	b.n	8001f80 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eea:	3b01      	subs	r3, #1
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d124      	bne.n	8001f58 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d107      	bne.n	8001f26 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f24:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	691a      	ldr	r2, [r3, #16]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f38:	1c5a      	adds	r2, r3, #1
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f42:	3b01      	subs	r3, #1
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f47f aeb6 	bne.w	8001cce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2220      	movs	r2, #32
 8001f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e000      	b.n	8001f80 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001f7e:	2302      	movs	r3, #2
  }
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3728      	adds	r7, #40	@ 0x28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	00010004 	.word	0x00010004

08001f8c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af02      	add	r7, sp, #8
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	4608      	mov	r0, r1
 8001f96:	4611      	mov	r1, r2
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	817b      	strh	r3, [r7, #10]
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	813b      	strh	r3, [r7, #8]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	6a3b      	ldr	r3, [r7, #32]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f000 f960 	bl	8002288 <I2C_WaitOnFlagUntilTimeout>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00d      	beq.n	8001fea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fdc:	d103      	bne.n	8001fe6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fe4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e05f      	b.n	80020aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fea:	897b      	ldrh	r3, [r7, #10]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	461a      	mov	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ff8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffc:	6a3a      	ldr	r2, [r7, #32]
 8001ffe:	492d      	ldr	r1, [pc, #180]	@ (80020b4 <I2C_RequestMemoryWrite+0x128>)
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 f9bb 	bl	800237c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e04c      	b.n	80020aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002028:	6a39      	ldr	r1, [r7, #32]
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 fa46 	bl	80024bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00d      	beq.n	8002052 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203a:	2b04      	cmp	r3, #4
 800203c:	d107      	bne.n	800204e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800204c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e02b      	b.n	80020aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002052:	88fb      	ldrh	r3, [r7, #6]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d105      	bne.n	8002064 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002058:	893b      	ldrh	r3, [r7, #8]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	611a      	str	r2, [r3, #16]
 8002062:	e021      	b.n	80020a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002064:	893b      	ldrh	r3, [r7, #8]
 8002066:	0a1b      	lsrs	r3, r3, #8
 8002068:	b29b      	uxth	r3, r3
 800206a:	b2da      	uxtb	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002074:	6a39      	ldr	r1, [r7, #32]
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 fa20 	bl	80024bc <I2C_WaitOnTXEFlagUntilTimeout>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00d      	beq.n	800209e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002086:	2b04      	cmp	r3, #4
 8002088:	d107      	bne.n	800209a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002098:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e005      	b.n	80020aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800209e:	893b      	ldrh	r3, [r7, #8]
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	00010002 	.word	0x00010002

080020b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af02      	add	r7, sp, #8
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	4608      	mov	r0, r1
 80020c2:	4611      	mov	r1, r2
 80020c4:	461a      	mov	r2, r3
 80020c6:	4603      	mov	r3, r0
 80020c8:	817b      	strh	r3, [r7, #10]
 80020ca:	460b      	mov	r3, r1
 80020cc:	813b      	strh	r3, [r7, #8]
 80020ce:	4613      	mov	r3, r2
 80020d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80020e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	6a3b      	ldr	r3, [r7, #32]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 f8c2 	bl	8002288 <I2C_WaitOnFlagUntilTimeout>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00d      	beq.n	8002126 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002114:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002118:	d103      	bne.n	8002122 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002120:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e0aa      	b.n	800227c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002126:	897b      	ldrh	r3, [r7, #10]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	461a      	mov	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002134:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002138:	6a3a      	ldr	r2, [r7, #32]
 800213a:	4952      	ldr	r1, [pc, #328]	@ (8002284 <I2C_RequestMemoryRead+0x1cc>)
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f000 f91d 	bl	800237c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e097      	b.n	800227c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002164:	6a39      	ldr	r1, [r7, #32]
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f000 f9a8 	bl	80024bc <I2C_WaitOnTXEFlagUntilTimeout>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00d      	beq.n	800218e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002176:	2b04      	cmp	r3, #4
 8002178:	d107      	bne.n	800218a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002188:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e076      	b.n	800227c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800218e:	88fb      	ldrh	r3, [r7, #6]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d105      	bne.n	80021a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002194:	893b      	ldrh	r3, [r7, #8]
 8002196:	b2da      	uxtb	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	611a      	str	r2, [r3, #16]
 800219e:	e021      	b.n	80021e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80021a0:	893b      	ldrh	r3, [r7, #8]
 80021a2:	0a1b      	lsrs	r3, r3, #8
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021b0:	6a39      	ldr	r1, [r7, #32]
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 f982 	bl	80024bc <I2C_WaitOnTXEFlagUntilTimeout>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00d      	beq.n	80021da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d107      	bne.n	80021d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e050      	b.n	800227c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021da:	893b      	ldrh	r3, [r7, #8]
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021e6:	6a39      	ldr	r1, [r7, #32]
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 f967 	bl	80024bc <I2C_WaitOnTXEFlagUntilTimeout>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00d      	beq.n	8002210 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d107      	bne.n	800220c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800220a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e035      	b.n	800227c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800221e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	2200      	movs	r2, #0
 8002228:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 f82b 	bl	8002288 <I2C_WaitOnFlagUntilTimeout>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00d      	beq.n	8002254 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002242:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002246:	d103      	bne.n	8002250 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800224e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e013      	b.n	800227c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002254:	897b      	ldrh	r3, [r7, #10]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	b2da      	uxtb	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002266:	6a3a      	ldr	r2, [r7, #32]
 8002268:	4906      	ldr	r1, [pc, #24]	@ (8002284 <I2C_RequestMemoryRead+0x1cc>)
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f886 	bl	800237c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	00010002 	.word	0x00010002

08002288 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	4613      	mov	r3, r2
 8002296:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002298:	e048      	b.n	800232c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a0:	d044      	beq.n	800232c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022a2:	f7fe ff4f 	bl	8001144 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d302      	bcc.n	80022b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d139      	bne.n	800232c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	0c1b      	lsrs	r3, r3, #16
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d10d      	bne.n	80022de <I2C_WaitOnFlagUntilTimeout+0x56>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	43da      	mvns	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	4013      	ands	r3, r2
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	bf0c      	ite	eq
 80022d4:	2301      	moveq	r3, #1
 80022d6:	2300      	movne	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	461a      	mov	r2, r3
 80022dc:	e00c      	b.n	80022f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	43da      	mvns	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	4013      	ands	r3, r2
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	bf0c      	ite	eq
 80022f0:	2301      	moveq	r3, #1
 80022f2:	2300      	movne	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	461a      	mov	r2, r3
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d116      	bne.n	800232c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2220      	movs	r2, #32
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002318:	f043 0220 	orr.w	r2, r3, #32
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e023      	b.n	8002374 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	0c1b      	lsrs	r3, r3, #16
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b01      	cmp	r3, #1
 8002334:	d10d      	bne.n	8002352 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	43da      	mvns	r2, r3
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	4013      	ands	r3, r2
 8002342:	b29b      	uxth	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	bf0c      	ite	eq
 8002348:	2301      	moveq	r3, #1
 800234a:	2300      	movne	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	461a      	mov	r2, r3
 8002350:	e00c      	b.n	800236c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	43da      	mvns	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	4013      	ands	r3, r2
 800235e:	b29b      	uxth	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	bf0c      	ite	eq
 8002364:	2301      	moveq	r3, #1
 8002366:	2300      	movne	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	461a      	mov	r2, r3
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	429a      	cmp	r2, r3
 8002370:	d093      	beq.n	800229a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
 8002388:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800238a:	e071      	b.n	8002470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002396:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800239a:	d123      	bne.n	80023e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2220      	movs	r2, #32
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d0:	f043 0204 	orr.w	r2, r3, #4
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e067      	b.n	80024b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ea:	d041      	beq.n	8002470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ec:	f7fe feaa 	bl	8001144 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d302      	bcc.n	8002402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d136      	bne.n	8002470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	0c1b      	lsrs	r3, r3, #16
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b01      	cmp	r3, #1
 800240a:	d10c      	bne.n	8002426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	43da      	mvns	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	4013      	ands	r3, r2
 8002418:	b29b      	uxth	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	bf14      	ite	ne
 800241e:	2301      	movne	r3, #1
 8002420:	2300      	moveq	r3, #0
 8002422:	b2db      	uxtb	r3, r3
 8002424:	e00b      	b.n	800243e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	43da      	mvns	r2, r3
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	4013      	ands	r3, r2
 8002432:	b29b      	uxth	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	bf14      	ite	ne
 8002438:	2301      	movne	r3, #1
 800243a:	2300      	moveq	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d016      	beq.n	8002470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2220      	movs	r2, #32
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245c:	f043 0220 	orr.w	r2, r3, #32
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e021      	b.n	80024b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	0c1b      	lsrs	r3, r3, #16
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b01      	cmp	r3, #1
 8002478:	d10c      	bne.n	8002494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	43da      	mvns	r2, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	4013      	ands	r3, r2
 8002486:	b29b      	uxth	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	bf14      	ite	ne
 800248c:	2301      	movne	r3, #1
 800248e:	2300      	moveq	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	e00b      	b.n	80024ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	43da      	mvns	r2, r3
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	4013      	ands	r3, r2
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	bf14      	ite	ne
 80024a6:	2301      	movne	r3, #1
 80024a8:	2300      	moveq	r3, #0
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f47f af6d 	bne.w	800238c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024c8:	e034      	b.n	8002534 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 f8e3 	bl	8002696 <I2C_IsAcknowledgeFailed>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e034      	b.n	8002544 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e0:	d028      	beq.n	8002534 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e2:	f7fe fe2f 	bl	8001144 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d302      	bcc.n	80024f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d11d      	bne.n	8002534 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002502:	2b80      	cmp	r3, #128	@ 0x80
 8002504:	d016      	beq.n	8002534 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2220      	movs	r2, #32
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002520:	f043 0220 	orr.w	r2, r3, #32
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e007      	b.n	8002544 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800253e:	2b80      	cmp	r3, #128	@ 0x80
 8002540:	d1c3      	bne.n	80024ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002558:	e034      	b.n	80025c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 f89b 	bl	8002696 <I2C_IsAcknowledgeFailed>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e034      	b.n	80025d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002570:	d028      	beq.n	80025c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002572:	f7fe fde7 	bl	8001144 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	429a      	cmp	r2, r3
 8002580:	d302      	bcc.n	8002588 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d11d      	bne.n	80025c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	2b04      	cmp	r3, #4
 8002594:	d016      	beq.n	80025c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2220      	movs	r2, #32
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b0:	f043 0220 	orr.w	r2, r3, #32
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e007      	b.n	80025d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	f003 0304 	and.w	r3, r3, #4
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d1c3      	bne.n	800255a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80025e8:	e049      	b.n	800267e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	f003 0310 	and.w	r3, r3, #16
 80025f4:	2b10      	cmp	r3, #16
 80025f6:	d119      	bne.n	800262c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f06f 0210 	mvn.w	r2, #16
 8002600:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e030      	b.n	800268e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800262c:	f7fe fd8a 	bl	8001144 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	429a      	cmp	r2, r3
 800263a:	d302      	bcc.n	8002642 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d11d      	bne.n	800267e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800264c:	2b40      	cmp	r3, #64	@ 0x40
 800264e:	d016      	beq.n	800267e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2220      	movs	r2, #32
 800265a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	f043 0220 	orr.w	r2, r3, #32
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e007      	b.n	800268e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002688:	2b40      	cmp	r3, #64	@ 0x40
 800268a:	d1ae      	bne.n	80025ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026ac:	d11b      	bne.n	80026e6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026b6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2220      	movs	r2, #32
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	f043 0204 	orr.w	r2, r3, #4
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e267      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d075      	beq.n	80027fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002712:	4b88      	ldr	r3, [pc, #544]	@ (8002934 <HAL_RCC_OscConfig+0x240>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b04      	cmp	r3, #4
 800271c:	d00c      	beq.n	8002738 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800271e:	4b85      	ldr	r3, [pc, #532]	@ (8002934 <HAL_RCC_OscConfig+0x240>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002726:	2b08      	cmp	r3, #8
 8002728:	d112      	bne.n	8002750 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800272a:	4b82      	ldr	r3, [pc, #520]	@ (8002934 <HAL_RCC_OscConfig+0x240>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002732:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002736:	d10b      	bne.n	8002750 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002738:	4b7e      	ldr	r3, [pc, #504]	@ (8002934 <HAL_RCC_OscConfig+0x240>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d05b      	beq.n	80027fc <HAL_RCC_OscConfig+0x108>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d157      	bne.n	80027fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e242      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002758:	d106      	bne.n	8002768 <HAL_RCC_OscConfig+0x74>
 800275a:	4b76      	ldr	r3, [pc, #472]	@ (8002934 <HAL_RCC_OscConfig+0x240>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a75      	ldr	r2, [pc, #468]	@ (8002934 <HAL_RCC_OscConfig+0x240>)
 8002760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	e01d      	b.n	80027a4 <HAL_RCC_OscConfig+0xb0>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002770:	d10c      	bne.n	800278c <HAL_RCC_OscConfig+0x98>
 8002772:	4b70      	ldr	r3, [pc, #448]	@ (8002934 <HAL_RCC_OscConfig+0x240>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a6f      	ldr	r2, [pc, #444]	@ (8002934 <HAL_RCC_OscConfig+0x240>)
 8002778:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	4b6d      	ldr	r3, [pc, #436]	@ (8002934 <HAL_RCC_OscConfig+0x240>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a6c      	ldr	r2, [pc, #432]	@ (8002934 <HAL_RCC_OscConfig+0x240>)
 8002784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	e00b      	b.n	80027a4 <HAL_RCC_OscConfig+0xb0>
 800278c:	4b69      	ldr	r3, [pc, #420]	@ (8002934 <HAL_RCC_OscConfig+0x240>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a68      	ldr	r2, [pc, #416]	@ (8002934 <HAL_RCC_OscConfig+0x240>)
 8002792:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	4b66      	ldr	r3, [pc, #408]	@ (8002934 <HAL_RCC_OscConfig+0x240>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a65      	ldr	r2, [pc, #404]	@ (8002934 <HAL_RCC_OscConfig+0x240>)
 800279e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d013      	beq.n	80027d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ac:	f7fe fcca 	bl	8001144 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b4:	f7fe fcc6 	bl	8001144 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b64      	cmp	r3, #100	@ 0x64
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e207      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c6:	4b5b      	ldr	r3, [pc, #364]	@ (8002934 <HAL_RCC_OscConfig+0x240>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0f0      	beq.n	80027b4 <HAL_RCC_OscConfig+0xc0>
 80027d2:	e014      	b.n	80027fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d4:	f7fe fcb6 	bl	8001144 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027dc:	f7fe fcb2 	bl	8001144 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b64      	cmp	r3, #100	@ 0x64
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e1f3      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ee:	4b51      	ldr	r3, [pc, #324]	@ (8002934 <HAL_RCC_OscConfig+0x240>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0xe8>
 80027fa:	e000      	b.n	80027fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d063      	beq.n	80028d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800280a:	4b4a      	ldr	r3, [pc, #296]	@ (8002934 <HAL_RCC_OscConfig+0x240>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00b      	beq.n	800282e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002816:	4b47      	ldr	r3, [pc, #284]	@ (8002934 <HAL_RCC_OscConfig+0x240>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800281e:	2b08      	cmp	r3, #8
 8002820:	d11c      	bne.n	800285c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002822:	4b44      	ldr	r3, [pc, #272]	@ (8002934 <HAL_RCC_OscConfig+0x240>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d116      	bne.n	800285c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282e:	4b41      	ldr	r3, [pc, #260]	@ (8002934 <HAL_RCC_OscConfig+0x240>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d005      	beq.n	8002846 <HAL_RCC_OscConfig+0x152>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d001      	beq.n	8002846 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e1c7      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002846:	4b3b      	ldr	r3, [pc, #236]	@ (8002934 <HAL_RCC_OscConfig+0x240>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4937      	ldr	r1, [pc, #220]	@ (8002934 <HAL_RCC_OscConfig+0x240>)
 8002856:	4313      	orrs	r3, r2
 8002858:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285a:	e03a      	b.n	80028d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d020      	beq.n	80028a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002864:	4b34      	ldr	r3, [pc, #208]	@ (8002938 <HAL_RCC_OscConfig+0x244>)
 8002866:	2201      	movs	r2, #1
 8002868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286a:	f7fe fc6b 	bl	8001144 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002872:	f7fe fc67 	bl	8001144 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e1a8      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002884:	4b2b      	ldr	r3, [pc, #172]	@ (8002934 <HAL_RCC_OscConfig+0x240>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0f0      	beq.n	8002872 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002890:	4b28      	ldr	r3, [pc, #160]	@ (8002934 <HAL_RCC_OscConfig+0x240>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	4925      	ldr	r1, [pc, #148]	@ (8002934 <HAL_RCC_OscConfig+0x240>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	600b      	str	r3, [r1, #0]
 80028a4:	e015      	b.n	80028d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028a6:	4b24      	ldr	r3, [pc, #144]	@ (8002938 <HAL_RCC_OscConfig+0x244>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ac:	f7fe fc4a 	bl	8001144 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028b4:	f7fe fc46 	bl	8001144 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e187      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002934 <HAL_RCC_OscConfig+0x240>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f0      	bne.n	80028b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d036      	beq.n	800294c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d016      	beq.n	8002914 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028e6:	4b15      	ldr	r3, [pc, #84]	@ (800293c <HAL_RCC_OscConfig+0x248>)
 80028e8:	2201      	movs	r2, #1
 80028ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ec:	f7fe fc2a 	bl	8001144 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028f4:	f7fe fc26 	bl	8001144 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e167      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002906:	4b0b      	ldr	r3, [pc, #44]	@ (8002934 <HAL_RCC_OscConfig+0x240>)
 8002908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCC_OscConfig+0x200>
 8002912:	e01b      	b.n	800294c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002914:	4b09      	ldr	r3, [pc, #36]	@ (800293c <HAL_RCC_OscConfig+0x248>)
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291a:	f7fe fc13 	bl	8001144 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002920:	e00e      	b.n	8002940 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002922:	f7fe fc0f 	bl	8001144 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d907      	bls.n	8002940 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e150      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4e2>
 8002934:	40023800 	.word	0x40023800
 8002938:	42470000 	.word	0x42470000
 800293c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002940:	4b88      	ldr	r3, [pc, #544]	@ (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002942:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1ea      	bne.n	8002922 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 8097 	beq.w	8002a88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800295a:	2300      	movs	r3, #0
 800295c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800295e:	4b81      	ldr	r3, [pc, #516]	@ (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10f      	bne.n	800298a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	4b7d      	ldr	r3, [pc, #500]	@ (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002972:	4a7c      	ldr	r2, [pc, #496]	@ (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002978:	6413      	str	r3, [r2, #64]	@ 0x40
 800297a:	4b7a      	ldr	r3, [pc, #488]	@ (8002b64 <HAL_RCC_OscConfig+0x470>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002986:	2301      	movs	r3, #1
 8002988:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800298a:	4b77      	ldr	r3, [pc, #476]	@ (8002b68 <HAL_RCC_OscConfig+0x474>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002992:	2b00      	cmp	r3, #0
 8002994:	d118      	bne.n	80029c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002996:	4b74      	ldr	r3, [pc, #464]	@ (8002b68 <HAL_RCC_OscConfig+0x474>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a73      	ldr	r2, [pc, #460]	@ (8002b68 <HAL_RCC_OscConfig+0x474>)
 800299c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029a2:	f7fe fbcf 	bl	8001144 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029aa:	f7fe fbcb 	bl	8001144 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e10c      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029bc:	4b6a      	ldr	r3, [pc, #424]	@ (8002b68 <HAL_RCC_OscConfig+0x474>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0f0      	beq.n	80029aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d106      	bne.n	80029de <HAL_RCC_OscConfig+0x2ea>
 80029d0:	4b64      	ldr	r3, [pc, #400]	@ (8002b64 <HAL_RCC_OscConfig+0x470>)
 80029d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d4:	4a63      	ldr	r2, [pc, #396]	@ (8002b64 <HAL_RCC_OscConfig+0x470>)
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	6713      	str	r3, [r2, #112]	@ 0x70
 80029dc:	e01c      	b.n	8002a18 <HAL_RCC_OscConfig+0x324>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b05      	cmp	r3, #5
 80029e4:	d10c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x30c>
 80029e6:	4b5f      	ldr	r3, [pc, #380]	@ (8002b64 <HAL_RCC_OscConfig+0x470>)
 80029e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ea:	4a5e      	ldr	r2, [pc, #376]	@ (8002b64 <HAL_RCC_OscConfig+0x470>)
 80029ec:	f043 0304 	orr.w	r3, r3, #4
 80029f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80029f2:	4b5c      	ldr	r3, [pc, #368]	@ (8002b64 <HAL_RCC_OscConfig+0x470>)
 80029f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002b64 <HAL_RCC_OscConfig+0x470>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80029fe:	e00b      	b.n	8002a18 <HAL_RCC_OscConfig+0x324>
 8002a00:	4b58      	ldr	r3, [pc, #352]	@ (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a04:	4a57      	ldr	r2, [pc, #348]	@ (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002a06:	f023 0301 	bic.w	r3, r3, #1
 8002a0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a0c:	4b55      	ldr	r3, [pc, #340]	@ (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a10:	4a54      	ldr	r2, [pc, #336]	@ (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002a12:	f023 0304 	bic.w	r3, r3, #4
 8002a16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d015      	beq.n	8002a4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a20:	f7fe fb90 	bl	8001144 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a26:	e00a      	b.n	8002a3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a28:	f7fe fb8c 	bl	8001144 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e0cb      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a3e:	4b49      	ldr	r3, [pc, #292]	@ (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0ee      	beq.n	8002a28 <HAL_RCC_OscConfig+0x334>
 8002a4a:	e014      	b.n	8002a76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4c:	f7fe fb7a 	bl	8001144 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a52:	e00a      	b.n	8002a6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a54:	f7fe fb76 	bl	8001144 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e0b5      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a6a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1ee      	bne.n	8002a54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a76:	7dfb      	ldrb	r3, [r7, #23]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d105      	bne.n	8002a88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a7c:	4b39      	ldr	r3, [pc, #228]	@ (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a80:	4a38      	ldr	r2, [pc, #224]	@ (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002a82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a86:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 80a1 	beq.w	8002bd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a92:	4b34      	ldr	r3, [pc, #208]	@ (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 030c 	and.w	r3, r3, #12
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d05c      	beq.n	8002b58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d141      	bne.n	8002b2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa6:	4b31      	ldr	r3, [pc, #196]	@ (8002b6c <HAL_RCC_OscConfig+0x478>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7fe fb4a 	bl	8001144 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab4:	f7fe fb46 	bl	8001144 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e087      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac6:	4b27      	ldr	r3, [pc, #156]	@ (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69da      	ldr	r2, [r3, #28]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae0:	019b      	lsls	r3, r3, #6
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae8:	085b      	lsrs	r3, r3, #1
 8002aea:	3b01      	subs	r3, #1
 8002aec:	041b      	lsls	r3, r3, #16
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af4:	061b      	lsls	r3, r3, #24
 8002af6:	491b      	ldr	r1, [pc, #108]	@ (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002afc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b6c <HAL_RCC_OscConfig+0x478>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b02:	f7fe fb1f 	bl	8001144 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b0a:	f7fe fb1b 	bl	8001144 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e05c      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1c:	4b11      	ldr	r3, [pc, #68]	@ (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <HAL_RCC_OscConfig+0x416>
 8002b28:	e054      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b2a:	4b10      	ldr	r3, [pc, #64]	@ (8002b6c <HAL_RCC_OscConfig+0x478>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7fe fb08 	bl	8001144 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b38:	f7fe fb04 	bl	8001144 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e045      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b4a:	4b06      	ldr	r3, [pc, #24]	@ (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x444>
 8002b56:	e03d      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d107      	bne.n	8002b70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e038      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4e2>
 8002b64:	40023800 	.word	0x40023800
 8002b68:	40007000 	.word	0x40007000
 8002b6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b70:	4b1b      	ldr	r3, [pc, #108]	@ (8002be0 <HAL_RCC_OscConfig+0x4ec>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d028      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d121      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d11a      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ba6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d111      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb6:	085b      	lsrs	r3, r3, #1
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d107      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e000      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40023800 	.word	0x40023800

08002be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0cc      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b68      	ldr	r3, [pc, #416]	@ (8002d9c <HAL_RCC_ClockConfig+0x1b8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d90c      	bls.n	8002c20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b65      	ldr	r3, [pc, #404]	@ (8002d9c <HAL_RCC_ClockConfig+0x1b8>)
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0e:	4b63      	ldr	r3, [pc, #396]	@ (8002d9c <HAL_RCC_ClockConfig+0x1b8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d001      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e0b8      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d020      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c38:	4b59      	ldr	r3, [pc, #356]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	4a58      	ldr	r2, [pc, #352]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0308 	and.w	r3, r3, #8
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d005      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c50:	4b53      	ldr	r3, [pc, #332]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	4a52      	ldr	r2, [pc, #328]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c5c:	4b50      	ldr	r3, [pc, #320]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	494d      	ldr	r1, [pc, #308]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d044      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d107      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c82:	4b47      	ldr	r3, [pc, #284]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d119      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e07f      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d003      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d107      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca2:	4b3f      	ldr	r3, [pc, #252]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d109      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e06f      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb2:	4b3b      	ldr	r3, [pc, #236]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e067      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cc2:	4b37      	ldr	r3, [pc, #220]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f023 0203 	bic.w	r2, r3, #3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	4934      	ldr	r1, [pc, #208]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cd4:	f7fe fa36 	bl	8001144 <HAL_GetTick>
 8002cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cdc:	f7fe fa32 	bl	8001144 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e04f      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf2:	4b2b      	ldr	r3, [pc, #172]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 020c 	and.w	r2, r3, #12
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d1eb      	bne.n	8002cdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d04:	4b25      	ldr	r3, [pc, #148]	@ (8002d9c <HAL_RCC_ClockConfig+0x1b8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d20c      	bcs.n	8002d2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4b22      	ldr	r3, [pc, #136]	@ (8002d9c <HAL_RCC_ClockConfig+0x1b8>)
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1a:	4b20      	ldr	r3, [pc, #128]	@ (8002d9c <HAL_RCC_ClockConfig+0x1b8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d001      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e032      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d38:	4b19      	ldr	r3, [pc, #100]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	4916      	ldr	r1, [pc, #88]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d009      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d56:	4b12      	ldr	r3, [pc, #72]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	490e      	ldr	r1, [pc, #56]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d6a:	f000 f821 	bl	8002db0 <HAL_RCC_GetSysClockFreq>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	4b0b      	ldr	r3, [pc, #44]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	490a      	ldr	r1, [pc, #40]	@ (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d7c:	5ccb      	ldrb	r3, [r1, r3]
 8002d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d82:	4a09      	ldr	r2, [pc, #36]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d86:	4b09      	ldr	r3, [pc, #36]	@ (8002dac <HAL_RCC_ClockConfig+0x1c8>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fe f996 	bl	80010bc <HAL_InitTick>

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40023c00 	.word	0x40023c00
 8002da0:	40023800 	.word	0x40023800
 8002da4:	0800439c 	.word	0x0800439c
 8002da8:	2000001c 	.word	0x2000001c
 8002dac:	20000020 	.word	0x20000020

08002db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002db4:	b094      	sub	sp, #80	@ 0x50
 8002db6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dc8:	4b79      	ldr	r3, [pc, #484]	@ (8002fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 030c 	and.w	r3, r3, #12
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d00d      	beq.n	8002df0 <HAL_RCC_GetSysClockFreq+0x40>
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	f200 80e1 	bhi.w	8002f9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <HAL_RCC_GetSysClockFreq+0x34>
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d003      	beq.n	8002dea <HAL_RCC_GetSysClockFreq+0x3a>
 8002de2:	e0db      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002de4:	4b73      	ldr	r3, [pc, #460]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002de6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002de8:	e0db      	b.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dea:	4b73      	ldr	r3, [pc, #460]	@ (8002fb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002dec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dee:	e0d8      	b.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002df0:	4b6f      	ldr	r3, [pc, #444]	@ (8002fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002df8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dfa:	4b6d      	ldr	r3, [pc, #436]	@ (8002fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d063      	beq.n	8002ece <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e06:	4b6a      	ldr	r3, [pc, #424]	@ (8002fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	099b      	lsrs	r3, r3, #6
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e18:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e22:	4622      	mov	r2, r4
 8002e24:	462b      	mov	r3, r5
 8002e26:	f04f 0000 	mov.w	r0, #0
 8002e2a:	f04f 0100 	mov.w	r1, #0
 8002e2e:	0159      	lsls	r1, r3, #5
 8002e30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e34:	0150      	lsls	r0, r2, #5
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4621      	mov	r1, r4
 8002e3c:	1a51      	subs	r1, r2, r1
 8002e3e:	6139      	str	r1, [r7, #16]
 8002e40:	4629      	mov	r1, r5
 8002e42:	eb63 0301 	sbc.w	r3, r3, r1
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e54:	4659      	mov	r1, fp
 8002e56:	018b      	lsls	r3, r1, #6
 8002e58:	4651      	mov	r1, sl
 8002e5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e5e:	4651      	mov	r1, sl
 8002e60:	018a      	lsls	r2, r1, #6
 8002e62:	4651      	mov	r1, sl
 8002e64:	ebb2 0801 	subs.w	r8, r2, r1
 8002e68:	4659      	mov	r1, fp
 8002e6a:	eb63 0901 	sbc.w	r9, r3, r1
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e82:	4690      	mov	r8, r2
 8002e84:	4699      	mov	r9, r3
 8002e86:	4623      	mov	r3, r4
 8002e88:	eb18 0303 	adds.w	r3, r8, r3
 8002e8c:	60bb      	str	r3, [r7, #8]
 8002e8e:	462b      	mov	r3, r5
 8002e90:	eb49 0303 	adc.w	r3, r9, r3
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ea2:	4629      	mov	r1, r5
 8002ea4:	024b      	lsls	r3, r1, #9
 8002ea6:	4621      	mov	r1, r4
 8002ea8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002eac:	4621      	mov	r1, r4
 8002eae:	024a      	lsls	r2, r1, #9
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ebc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ec0:	f7fd f9de 	bl	8000280 <__aeabi_uldivmod>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4613      	mov	r3, r2
 8002eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ecc:	e058      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ece:	4b38      	ldr	r3, [pc, #224]	@ (8002fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	099b      	lsrs	r3, r3, #6
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	4611      	mov	r1, r2
 8002eda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ede:	623b      	str	r3, [r7, #32]
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ee4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ee8:	4642      	mov	r2, r8
 8002eea:	464b      	mov	r3, r9
 8002eec:	f04f 0000 	mov.w	r0, #0
 8002ef0:	f04f 0100 	mov.w	r1, #0
 8002ef4:	0159      	lsls	r1, r3, #5
 8002ef6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002efa:	0150      	lsls	r0, r2, #5
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4641      	mov	r1, r8
 8002f02:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f06:	4649      	mov	r1, r9
 8002f08:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f20:	ebb2 040a 	subs.w	r4, r2, sl
 8002f24:	eb63 050b 	sbc.w	r5, r3, fp
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	00eb      	lsls	r3, r5, #3
 8002f32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f36:	00e2      	lsls	r2, r4, #3
 8002f38:	4614      	mov	r4, r2
 8002f3a:	461d      	mov	r5, r3
 8002f3c:	4643      	mov	r3, r8
 8002f3e:	18e3      	adds	r3, r4, r3
 8002f40:	603b      	str	r3, [r7, #0]
 8002f42:	464b      	mov	r3, r9
 8002f44:	eb45 0303 	adc.w	r3, r5, r3
 8002f48:	607b      	str	r3, [r7, #4]
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	f04f 0300 	mov.w	r3, #0
 8002f52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f56:	4629      	mov	r1, r5
 8002f58:	028b      	lsls	r3, r1, #10
 8002f5a:	4621      	mov	r1, r4
 8002f5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f60:	4621      	mov	r1, r4
 8002f62:	028a      	lsls	r2, r1, #10
 8002f64:	4610      	mov	r0, r2
 8002f66:	4619      	mov	r1, r3
 8002f68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	61bb      	str	r3, [r7, #24]
 8002f6e:	61fa      	str	r2, [r7, #28]
 8002f70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f74:	f7fd f984 	bl	8000280 <__aeabi_uldivmod>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f80:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	0c1b      	lsrs	r3, r3, #16
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002f90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f9a:	e002      	b.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f9c:	4b05      	ldr	r3, [pc, #20]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3750      	adds	r7, #80	@ 0x50
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fae:	bf00      	nop
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	00f42400 	.word	0x00f42400
 8002fb8:	007a1200 	.word	0x007a1200

08002fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fc0:	4b03      	ldr	r3, [pc, #12]	@ (8002fd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	2000001c 	.word	0x2000001c

08002fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fd8:	f7ff fff0 	bl	8002fbc <HAL_RCC_GetHCLKFreq>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	4b05      	ldr	r3, [pc, #20]	@ (8002ff4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	0a9b      	lsrs	r3, r3, #10
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	4903      	ldr	r1, [pc, #12]	@ (8002ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fea:	5ccb      	ldrb	r3, [r1, r3]
 8002fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	080043ac 	.word	0x080043ac

08002ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003000:	f7ff ffdc 	bl	8002fbc <HAL_RCC_GetHCLKFreq>
 8003004:	4602      	mov	r2, r0
 8003006:	4b05      	ldr	r3, [pc, #20]	@ (800301c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	0b5b      	lsrs	r3, r3, #13
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	4903      	ldr	r1, [pc, #12]	@ (8003020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003012:	5ccb      	ldrb	r3, [r1, r3]
 8003014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003018:	4618      	mov	r0, r3
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40023800 	.word	0x40023800
 8003020:	080043ac 	.word	0x080043ac

08003024 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e042      	b.n	80030bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d106      	bne.n	8003050 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7fd ff2a 	bl	8000ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2224      	movs	r2, #36	@ 0x24
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003066:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f973 	bl	8003354 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800307c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695a      	ldr	r2, [r3, #20]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800308c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800309c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08a      	sub	sp, #40	@ 0x28
 80030c8:	af02      	add	r7, sp, #8
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	603b      	str	r3, [r7, #0]
 80030d0:	4613      	mov	r3, r2
 80030d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	d175      	bne.n	80031d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <HAL_UART_Transmit+0x2c>
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e06e      	b.n	80031d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2221      	movs	r2, #33	@ 0x21
 80030fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003102:	f7fe f81f 	bl	8001144 <HAL_GetTick>
 8003106:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	88fa      	ldrh	r2, [r7, #6]
 800310c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	88fa      	ldrh	r2, [r7, #6]
 8003112:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800311c:	d108      	bne.n	8003130 <HAL_UART_Transmit+0x6c>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d104      	bne.n	8003130 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003126:	2300      	movs	r3, #0
 8003128:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	61bb      	str	r3, [r7, #24]
 800312e:	e003      	b.n	8003138 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003134:	2300      	movs	r3, #0
 8003136:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003138:	e02e      	b.n	8003198 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2200      	movs	r2, #0
 8003142:	2180      	movs	r1, #128	@ 0x80
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f848 	bl	80031da <UART_WaitOnFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d005      	beq.n	800315c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e03a      	b.n	80031d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10b      	bne.n	800317a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003170:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	3302      	adds	r3, #2
 8003176:	61bb      	str	r3, [r7, #24]
 8003178:	e007      	b.n	800318a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	781a      	ldrb	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	3301      	adds	r3, #1
 8003188:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800318e:	b29b      	uxth	r3, r3
 8003190:	3b01      	subs	r3, #1
 8003192:	b29a      	uxth	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800319c:	b29b      	uxth	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1cb      	bne.n	800313a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2200      	movs	r2, #0
 80031aa:	2140      	movs	r1, #64	@ 0x40
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 f814 	bl	80031da <UART_WaitOnFlagUntilTimeout>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e006      	b.n	80031d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80031cc:	2300      	movs	r3, #0
 80031ce:	e000      	b.n	80031d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80031d0:	2302      	movs	r3, #2
  }
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3720      	adds	r7, #32
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b086      	sub	sp, #24
 80031de:	af00      	add	r7, sp, #0
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	603b      	str	r3, [r7, #0]
 80031e6:	4613      	mov	r3, r2
 80031e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ea:	e03b      	b.n	8003264 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f2:	d037      	beq.n	8003264 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f4:	f7fd ffa6 	bl	8001144 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	6a3a      	ldr	r2, [r7, #32]
 8003200:	429a      	cmp	r2, r3
 8003202:	d302      	bcc.n	800320a <UART_WaitOnFlagUntilTimeout+0x30>
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e03a      	b.n	8003284 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d023      	beq.n	8003264 <UART_WaitOnFlagUntilTimeout+0x8a>
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2b80      	cmp	r3, #128	@ 0x80
 8003220:	d020      	beq.n	8003264 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b40      	cmp	r3, #64	@ 0x40
 8003226:	d01d      	beq.n	8003264 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b08      	cmp	r3, #8
 8003234:	d116      	bne.n	8003264 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003236:	2300      	movs	r3, #0
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 f81d 	bl	800328c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2208      	movs	r2, #8
 8003256:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e00f      	b.n	8003284 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	4013      	ands	r3, r2
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	429a      	cmp	r2, r3
 8003272:	bf0c      	ite	eq
 8003274:	2301      	moveq	r3, #1
 8003276:	2300      	movne	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	461a      	mov	r2, r3
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	429a      	cmp	r2, r3
 8003280:	d0b4      	beq.n	80031ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800328c:	b480      	push	{r7}
 800328e:	b095      	sub	sp, #84	@ 0x54
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	330c      	adds	r3, #12
 800329a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800329c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800329e:	e853 3f00 	ldrex	r3, [r3]
 80032a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80032a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	330c      	adds	r3, #12
 80032b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80032b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80032ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032bc:	e841 2300 	strex	r3, r2, [r1]
 80032c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80032c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1e5      	bne.n	8003294 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	3314      	adds	r3, #20
 80032ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	e853 3f00 	ldrex	r3, [r3]
 80032d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f023 0301 	bic.w	r3, r3, #1
 80032de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3314      	adds	r3, #20
 80032e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032f0:	e841 2300 	strex	r3, r2, [r1]
 80032f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80032f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1e5      	bne.n	80032c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003300:	2b01      	cmp	r3, #1
 8003302:	d119      	bne.n	8003338 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	330c      	adds	r3, #12
 800330a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	e853 3f00 	ldrex	r3, [r3]
 8003312:	60bb      	str	r3, [r7, #8]
   return(result);
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f023 0310 	bic.w	r3, r3, #16
 800331a:	647b      	str	r3, [r7, #68]	@ 0x44
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	330c      	adds	r3, #12
 8003322:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003324:	61ba      	str	r2, [r7, #24]
 8003326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003328:	6979      	ldr	r1, [r7, #20]
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	e841 2300 	strex	r3, r2, [r1]
 8003330:	613b      	str	r3, [r7, #16]
   return(result);
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1e5      	bne.n	8003304 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003346:	bf00      	nop
 8003348:	3754      	adds	r7, #84	@ 0x54
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
	...

08003354 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003358:	b0c0      	sub	sp, #256	@ 0x100
 800335a:	af00      	add	r7, sp, #0
 800335c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800336c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003370:	68d9      	ldr	r1, [r3, #12]
 8003372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	ea40 0301 	orr.w	r3, r0, r1
 800337c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800337e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	431a      	orrs	r2, r3
 800338c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	431a      	orrs	r2, r3
 8003394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80033ac:	f021 010c 	bic.w	r1, r1, #12
 80033b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80033ba:	430b      	orrs	r3, r1
 80033bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80033ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ce:	6999      	ldr	r1, [r3, #24]
 80033d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	ea40 0301 	orr.w	r3, r0, r1
 80033da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	4b8f      	ldr	r3, [pc, #572]	@ (8003620 <UART_SetConfig+0x2cc>)
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d005      	beq.n	80033f4 <UART_SetConfig+0xa0>
 80033e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	4b8d      	ldr	r3, [pc, #564]	@ (8003624 <UART_SetConfig+0x2d0>)
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d104      	bne.n	80033fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033f4:	f7ff fe02 	bl	8002ffc <HAL_RCC_GetPCLK2Freq>
 80033f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80033fc:	e003      	b.n	8003406 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033fe:	f7ff fde9 	bl	8002fd4 <HAL_RCC_GetPCLK1Freq>
 8003402:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003410:	f040 810c 	bne.w	800362c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003414:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003418:	2200      	movs	r2, #0
 800341a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800341e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003422:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003426:	4622      	mov	r2, r4
 8003428:	462b      	mov	r3, r5
 800342a:	1891      	adds	r1, r2, r2
 800342c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800342e:	415b      	adcs	r3, r3
 8003430:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003432:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003436:	4621      	mov	r1, r4
 8003438:	eb12 0801 	adds.w	r8, r2, r1
 800343c:	4629      	mov	r1, r5
 800343e:	eb43 0901 	adc.w	r9, r3, r1
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800344e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003452:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003456:	4690      	mov	r8, r2
 8003458:	4699      	mov	r9, r3
 800345a:	4623      	mov	r3, r4
 800345c:	eb18 0303 	adds.w	r3, r8, r3
 8003460:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003464:	462b      	mov	r3, r5
 8003466:	eb49 0303 	adc.w	r3, r9, r3
 800346a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800346e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800347a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800347e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003482:	460b      	mov	r3, r1
 8003484:	18db      	adds	r3, r3, r3
 8003486:	653b      	str	r3, [r7, #80]	@ 0x50
 8003488:	4613      	mov	r3, r2
 800348a:	eb42 0303 	adc.w	r3, r2, r3
 800348e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003490:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003494:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003498:	f7fc fef2 	bl	8000280 <__aeabi_uldivmod>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	4b61      	ldr	r3, [pc, #388]	@ (8003628 <UART_SetConfig+0x2d4>)
 80034a2:	fba3 2302 	umull	r2, r3, r3, r2
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	011c      	lsls	r4, r3, #4
 80034aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034ae:	2200      	movs	r2, #0
 80034b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80034b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80034bc:	4642      	mov	r2, r8
 80034be:	464b      	mov	r3, r9
 80034c0:	1891      	adds	r1, r2, r2
 80034c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80034c4:	415b      	adcs	r3, r3
 80034c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80034cc:	4641      	mov	r1, r8
 80034ce:	eb12 0a01 	adds.w	sl, r2, r1
 80034d2:	4649      	mov	r1, r9
 80034d4:	eb43 0b01 	adc.w	fp, r3, r1
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034ec:	4692      	mov	sl, r2
 80034ee:	469b      	mov	fp, r3
 80034f0:	4643      	mov	r3, r8
 80034f2:	eb1a 0303 	adds.w	r3, sl, r3
 80034f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034fa:	464b      	mov	r3, r9
 80034fc:	eb4b 0303 	adc.w	r3, fp, r3
 8003500:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003510:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003514:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003518:	460b      	mov	r3, r1
 800351a:	18db      	adds	r3, r3, r3
 800351c:	643b      	str	r3, [r7, #64]	@ 0x40
 800351e:	4613      	mov	r3, r2
 8003520:	eb42 0303 	adc.w	r3, r2, r3
 8003524:	647b      	str	r3, [r7, #68]	@ 0x44
 8003526:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800352a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800352e:	f7fc fea7 	bl	8000280 <__aeabi_uldivmod>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	4611      	mov	r1, r2
 8003538:	4b3b      	ldr	r3, [pc, #236]	@ (8003628 <UART_SetConfig+0x2d4>)
 800353a:	fba3 2301 	umull	r2, r3, r3, r1
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	2264      	movs	r2, #100	@ 0x64
 8003542:	fb02 f303 	mul.w	r3, r2, r3
 8003546:	1acb      	subs	r3, r1, r3
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800354e:	4b36      	ldr	r3, [pc, #216]	@ (8003628 <UART_SetConfig+0x2d4>)
 8003550:	fba3 2302 	umull	r2, r3, r3, r2
 8003554:	095b      	lsrs	r3, r3, #5
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800355c:	441c      	add	r4, r3
 800355e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003562:	2200      	movs	r2, #0
 8003564:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003568:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800356c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003570:	4642      	mov	r2, r8
 8003572:	464b      	mov	r3, r9
 8003574:	1891      	adds	r1, r2, r2
 8003576:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003578:	415b      	adcs	r3, r3
 800357a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800357c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003580:	4641      	mov	r1, r8
 8003582:	1851      	adds	r1, r2, r1
 8003584:	6339      	str	r1, [r7, #48]	@ 0x30
 8003586:	4649      	mov	r1, r9
 8003588:	414b      	adcs	r3, r1
 800358a:	637b      	str	r3, [r7, #52]	@ 0x34
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003598:	4659      	mov	r1, fp
 800359a:	00cb      	lsls	r3, r1, #3
 800359c:	4651      	mov	r1, sl
 800359e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035a2:	4651      	mov	r1, sl
 80035a4:	00ca      	lsls	r2, r1, #3
 80035a6:	4610      	mov	r0, r2
 80035a8:	4619      	mov	r1, r3
 80035aa:	4603      	mov	r3, r0
 80035ac:	4642      	mov	r2, r8
 80035ae:	189b      	adds	r3, r3, r2
 80035b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035b4:	464b      	mov	r3, r9
 80035b6:	460a      	mov	r2, r1
 80035b8:	eb42 0303 	adc.w	r3, r2, r3
 80035bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80035cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80035d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80035d4:	460b      	mov	r3, r1
 80035d6:	18db      	adds	r3, r3, r3
 80035d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035da:	4613      	mov	r3, r2
 80035dc:	eb42 0303 	adc.w	r3, r2, r3
 80035e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80035ea:	f7fc fe49 	bl	8000280 <__aeabi_uldivmod>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003628 <UART_SetConfig+0x2d4>)
 80035f4:	fba3 1302 	umull	r1, r3, r3, r2
 80035f8:	095b      	lsrs	r3, r3, #5
 80035fa:	2164      	movs	r1, #100	@ 0x64
 80035fc:	fb01 f303 	mul.w	r3, r1, r3
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	3332      	adds	r3, #50	@ 0x32
 8003606:	4a08      	ldr	r2, [pc, #32]	@ (8003628 <UART_SetConfig+0x2d4>)
 8003608:	fba2 2303 	umull	r2, r3, r2, r3
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	f003 0207 	and.w	r2, r3, #7
 8003612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4422      	add	r2, r4
 800361a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800361c:	e106      	b.n	800382c <UART_SetConfig+0x4d8>
 800361e:	bf00      	nop
 8003620:	40011000 	.word	0x40011000
 8003624:	40011400 	.word	0x40011400
 8003628:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800362c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003630:	2200      	movs	r2, #0
 8003632:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003636:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800363a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800363e:	4642      	mov	r2, r8
 8003640:	464b      	mov	r3, r9
 8003642:	1891      	adds	r1, r2, r2
 8003644:	6239      	str	r1, [r7, #32]
 8003646:	415b      	adcs	r3, r3
 8003648:	627b      	str	r3, [r7, #36]	@ 0x24
 800364a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800364e:	4641      	mov	r1, r8
 8003650:	1854      	adds	r4, r2, r1
 8003652:	4649      	mov	r1, r9
 8003654:	eb43 0501 	adc.w	r5, r3, r1
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	00eb      	lsls	r3, r5, #3
 8003662:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003666:	00e2      	lsls	r2, r4, #3
 8003668:	4614      	mov	r4, r2
 800366a:	461d      	mov	r5, r3
 800366c:	4643      	mov	r3, r8
 800366e:	18e3      	adds	r3, r4, r3
 8003670:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003674:	464b      	mov	r3, r9
 8003676:	eb45 0303 	adc.w	r3, r5, r3
 800367a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800367e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800368a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	f04f 0300 	mov.w	r3, #0
 8003696:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800369a:	4629      	mov	r1, r5
 800369c:	008b      	lsls	r3, r1, #2
 800369e:	4621      	mov	r1, r4
 80036a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036a4:	4621      	mov	r1, r4
 80036a6:	008a      	lsls	r2, r1, #2
 80036a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80036ac:	f7fc fde8 	bl	8000280 <__aeabi_uldivmod>
 80036b0:	4602      	mov	r2, r0
 80036b2:	460b      	mov	r3, r1
 80036b4:	4b60      	ldr	r3, [pc, #384]	@ (8003838 <UART_SetConfig+0x4e4>)
 80036b6:	fba3 2302 	umull	r2, r3, r3, r2
 80036ba:	095b      	lsrs	r3, r3, #5
 80036bc:	011c      	lsls	r4, r3, #4
 80036be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036c2:	2200      	movs	r2, #0
 80036c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80036c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80036cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80036d0:	4642      	mov	r2, r8
 80036d2:	464b      	mov	r3, r9
 80036d4:	1891      	adds	r1, r2, r2
 80036d6:	61b9      	str	r1, [r7, #24]
 80036d8:	415b      	adcs	r3, r3
 80036da:	61fb      	str	r3, [r7, #28]
 80036dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036e0:	4641      	mov	r1, r8
 80036e2:	1851      	adds	r1, r2, r1
 80036e4:	6139      	str	r1, [r7, #16]
 80036e6:	4649      	mov	r1, r9
 80036e8:	414b      	adcs	r3, r1
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	f04f 0300 	mov.w	r3, #0
 80036f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036f8:	4659      	mov	r1, fp
 80036fa:	00cb      	lsls	r3, r1, #3
 80036fc:	4651      	mov	r1, sl
 80036fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003702:	4651      	mov	r1, sl
 8003704:	00ca      	lsls	r2, r1, #3
 8003706:	4610      	mov	r0, r2
 8003708:	4619      	mov	r1, r3
 800370a:	4603      	mov	r3, r0
 800370c:	4642      	mov	r2, r8
 800370e:	189b      	adds	r3, r3, r2
 8003710:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003714:	464b      	mov	r3, r9
 8003716:	460a      	mov	r2, r1
 8003718:	eb42 0303 	adc.w	r3, r2, r3
 800371c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	67bb      	str	r3, [r7, #120]	@ 0x78
 800372a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003738:	4649      	mov	r1, r9
 800373a:	008b      	lsls	r3, r1, #2
 800373c:	4641      	mov	r1, r8
 800373e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003742:	4641      	mov	r1, r8
 8003744:	008a      	lsls	r2, r1, #2
 8003746:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800374a:	f7fc fd99 	bl	8000280 <__aeabi_uldivmod>
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	4611      	mov	r1, r2
 8003754:	4b38      	ldr	r3, [pc, #224]	@ (8003838 <UART_SetConfig+0x4e4>)
 8003756:	fba3 2301 	umull	r2, r3, r3, r1
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	2264      	movs	r2, #100	@ 0x64
 800375e:	fb02 f303 	mul.w	r3, r2, r3
 8003762:	1acb      	subs	r3, r1, r3
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	3332      	adds	r3, #50	@ 0x32
 8003768:	4a33      	ldr	r2, [pc, #204]	@ (8003838 <UART_SetConfig+0x4e4>)
 800376a:	fba2 2303 	umull	r2, r3, r2, r3
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003774:	441c      	add	r4, r3
 8003776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800377a:	2200      	movs	r2, #0
 800377c:	673b      	str	r3, [r7, #112]	@ 0x70
 800377e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003780:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003784:	4642      	mov	r2, r8
 8003786:	464b      	mov	r3, r9
 8003788:	1891      	adds	r1, r2, r2
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	415b      	adcs	r3, r3
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003794:	4641      	mov	r1, r8
 8003796:	1851      	adds	r1, r2, r1
 8003798:	6039      	str	r1, [r7, #0]
 800379a:	4649      	mov	r1, r9
 800379c:	414b      	adcs	r3, r1
 800379e:	607b      	str	r3, [r7, #4]
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037ac:	4659      	mov	r1, fp
 80037ae:	00cb      	lsls	r3, r1, #3
 80037b0:	4651      	mov	r1, sl
 80037b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037b6:	4651      	mov	r1, sl
 80037b8:	00ca      	lsls	r2, r1, #3
 80037ba:	4610      	mov	r0, r2
 80037bc:	4619      	mov	r1, r3
 80037be:	4603      	mov	r3, r0
 80037c0:	4642      	mov	r2, r8
 80037c2:	189b      	adds	r3, r3, r2
 80037c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037c6:	464b      	mov	r3, r9
 80037c8:	460a      	mov	r2, r1
 80037ca:	eb42 0303 	adc.w	r3, r2, r3
 80037ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80037da:	667a      	str	r2, [r7, #100]	@ 0x64
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80037e8:	4649      	mov	r1, r9
 80037ea:	008b      	lsls	r3, r1, #2
 80037ec:	4641      	mov	r1, r8
 80037ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037f2:	4641      	mov	r1, r8
 80037f4:	008a      	lsls	r2, r1, #2
 80037f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80037fa:	f7fc fd41 	bl	8000280 <__aeabi_uldivmod>
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	4b0d      	ldr	r3, [pc, #52]	@ (8003838 <UART_SetConfig+0x4e4>)
 8003804:	fba3 1302 	umull	r1, r3, r3, r2
 8003808:	095b      	lsrs	r3, r3, #5
 800380a:	2164      	movs	r1, #100	@ 0x64
 800380c:	fb01 f303 	mul.w	r3, r1, r3
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	3332      	adds	r3, #50	@ 0x32
 8003816:	4a08      	ldr	r2, [pc, #32]	@ (8003838 <UART_SetConfig+0x4e4>)
 8003818:	fba2 2303 	umull	r2, r3, r2, r3
 800381c:	095b      	lsrs	r3, r3, #5
 800381e:	f003 020f 	and.w	r2, r3, #15
 8003822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4422      	add	r2, r4
 800382a:	609a      	str	r2, [r3, #8]
}
 800382c:	bf00      	nop
 800382e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003832:	46bd      	mov	sp, r7
 8003834:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003838:	51eb851f 	.word	0x51eb851f

0800383c <_strtol_l.constprop.0>:
 800383c:	2b24      	cmp	r3, #36	@ 0x24
 800383e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003842:	4686      	mov	lr, r0
 8003844:	4690      	mov	r8, r2
 8003846:	d801      	bhi.n	800384c <_strtol_l.constprop.0+0x10>
 8003848:	2b01      	cmp	r3, #1
 800384a:	d106      	bne.n	800385a <_strtol_l.constprop.0+0x1e>
 800384c:	f000 f8b6 	bl	80039bc <__errno>
 8003850:	2316      	movs	r3, #22
 8003852:	6003      	str	r3, [r0, #0]
 8003854:	2000      	movs	r0, #0
 8003856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800385a:	4834      	ldr	r0, [pc, #208]	@ (800392c <_strtol_l.constprop.0+0xf0>)
 800385c:	460d      	mov	r5, r1
 800385e:	462a      	mov	r2, r5
 8003860:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003864:	5d06      	ldrb	r6, [r0, r4]
 8003866:	f016 0608 	ands.w	r6, r6, #8
 800386a:	d1f8      	bne.n	800385e <_strtol_l.constprop.0+0x22>
 800386c:	2c2d      	cmp	r4, #45	@ 0x2d
 800386e:	d12d      	bne.n	80038cc <_strtol_l.constprop.0+0x90>
 8003870:	782c      	ldrb	r4, [r5, #0]
 8003872:	2601      	movs	r6, #1
 8003874:	1c95      	adds	r5, r2, #2
 8003876:	f033 0210 	bics.w	r2, r3, #16
 800387a:	d109      	bne.n	8003890 <_strtol_l.constprop.0+0x54>
 800387c:	2c30      	cmp	r4, #48	@ 0x30
 800387e:	d12a      	bne.n	80038d6 <_strtol_l.constprop.0+0x9a>
 8003880:	782a      	ldrb	r2, [r5, #0]
 8003882:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003886:	2a58      	cmp	r2, #88	@ 0x58
 8003888:	d125      	bne.n	80038d6 <_strtol_l.constprop.0+0x9a>
 800388a:	786c      	ldrb	r4, [r5, #1]
 800388c:	2310      	movs	r3, #16
 800388e:	3502      	adds	r5, #2
 8003890:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003894:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003898:	2200      	movs	r2, #0
 800389a:	fbbc f9f3 	udiv	r9, ip, r3
 800389e:	4610      	mov	r0, r2
 80038a0:	fb03 ca19 	mls	sl, r3, r9, ip
 80038a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80038a8:	2f09      	cmp	r7, #9
 80038aa:	d81b      	bhi.n	80038e4 <_strtol_l.constprop.0+0xa8>
 80038ac:	463c      	mov	r4, r7
 80038ae:	42a3      	cmp	r3, r4
 80038b0:	dd27      	ble.n	8003902 <_strtol_l.constprop.0+0xc6>
 80038b2:	1c57      	adds	r7, r2, #1
 80038b4:	d007      	beq.n	80038c6 <_strtol_l.constprop.0+0x8a>
 80038b6:	4581      	cmp	r9, r0
 80038b8:	d320      	bcc.n	80038fc <_strtol_l.constprop.0+0xc0>
 80038ba:	d101      	bne.n	80038c0 <_strtol_l.constprop.0+0x84>
 80038bc:	45a2      	cmp	sl, r4
 80038be:	db1d      	blt.n	80038fc <_strtol_l.constprop.0+0xc0>
 80038c0:	fb00 4003 	mla	r0, r0, r3, r4
 80038c4:	2201      	movs	r2, #1
 80038c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80038ca:	e7eb      	b.n	80038a4 <_strtol_l.constprop.0+0x68>
 80038cc:	2c2b      	cmp	r4, #43	@ 0x2b
 80038ce:	bf04      	itt	eq
 80038d0:	782c      	ldrbeq	r4, [r5, #0]
 80038d2:	1c95      	addeq	r5, r2, #2
 80038d4:	e7cf      	b.n	8003876 <_strtol_l.constprop.0+0x3a>
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1da      	bne.n	8003890 <_strtol_l.constprop.0+0x54>
 80038da:	2c30      	cmp	r4, #48	@ 0x30
 80038dc:	bf0c      	ite	eq
 80038de:	2308      	moveq	r3, #8
 80038e0:	230a      	movne	r3, #10
 80038e2:	e7d5      	b.n	8003890 <_strtol_l.constprop.0+0x54>
 80038e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80038e8:	2f19      	cmp	r7, #25
 80038ea:	d801      	bhi.n	80038f0 <_strtol_l.constprop.0+0xb4>
 80038ec:	3c37      	subs	r4, #55	@ 0x37
 80038ee:	e7de      	b.n	80038ae <_strtol_l.constprop.0+0x72>
 80038f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80038f4:	2f19      	cmp	r7, #25
 80038f6:	d804      	bhi.n	8003902 <_strtol_l.constprop.0+0xc6>
 80038f8:	3c57      	subs	r4, #87	@ 0x57
 80038fa:	e7d8      	b.n	80038ae <_strtol_l.constprop.0+0x72>
 80038fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003900:	e7e1      	b.n	80038c6 <_strtol_l.constprop.0+0x8a>
 8003902:	1c53      	adds	r3, r2, #1
 8003904:	d108      	bne.n	8003918 <_strtol_l.constprop.0+0xdc>
 8003906:	2322      	movs	r3, #34	@ 0x22
 8003908:	f8ce 3000 	str.w	r3, [lr]
 800390c:	4660      	mov	r0, ip
 800390e:	f1b8 0f00 	cmp.w	r8, #0
 8003912:	d0a0      	beq.n	8003856 <_strtol_l.constprop.0+0x1a>
 8003914:	1e69      	subs	r1, r5, #1
 8003916:	e006      	b.n	8003926 <_strtol_l.constprop.0+0xea>
 8003918:	b106      	cbz	r6, 800391c <_strtol_l.constprop.0+0xe0>
 800391a:	4240      	negs	r0, r0
 800391c:	f1b8 0f00 	cmp.w	r8, #0
 8003920:	d099      	beq.n	8003856 <_strtol_l.constprop.0+0x1a>
 8003922:	2a00      	cmp	r2, #0
 8003924:	d1f6      	bne.n	8003914 <_strtol_l.constprop.0+0xd8>
 8003926:	f8c8 1000 	str.w	r1, [r8]
 800392a:	e794      	b.n	8003856 <_strtol_l.constprop.0+0x1a>
 800392c:	080043b5 	.word	0x080043b5

08003930 <strtol>:
 8003930:	4613      	mov	r3, r2
 8003932:	460a      	mov	r2, r1
 8003934:	4601      	mov	r1, r0
 8003936:	4802      	ldr	r0, [pc, #8]	@ (8003940 <strtol+0x10>)
 8003938:	6800      	ldr	r0, [r0, #0]
 800393a:	f7ff bf7f 	b.w	800383c <_strtol_l.constprop.0>
 800393e:	bf00      	nop
 8003940:	20000028 	.word	0x20000028

08003944 <sniprintf>:
 8003944:	b40c      	push	{r2, r3}
 8003946:	b530      	push	{r4, r5, lr}
 8003948:	4b17      	ldr	r3, [pc, #92]	@ (80039a8 <sniprintf+0x64>)
 800394a:	1e0c      	subs	r4, r1, #0
 800394c:	681d      	ldr	r5, [r3, #0]
 800394e:	b09d      	sub	sp, #116	@ 0x74
 8003950:	da08      	bge.n	8003964 <sniprintf+0x20>
 8003952:	238b      	movs	r3, #139	@ 0x8b
 8003954:	602b      	str	r3, [r5, #0]
 8003956:	f04f 30ff 	mov.w	r0, #4294967295
 800395a:	b01d      	add	sp, #116	@ 0x74
 800395c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003960:	b002      	add	sp, #8
 8003962:	4770      	bx	lr
 8003964:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003968:	f8ad 3014 	strh.w	r3, [sp, #20]
 800396c:	bf14      	ite	ne
 800396e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003972:	4623      	moveq	r3, r4
 8003974:	9304      	str	r3, [sp, #16]
 8003976:	9307      	str	r3, [sp, #28]
 8003978:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800397c:	9002      	str	r0, [sp, #8]
 800397e:	9006      	str	r0, [sp, #24]
 8003980:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003984:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003986:	ab21      	add	r3, sp, #132	@ 0x84
 8003988:	a902      	add	r1, sp, #8
 800398a:	4628      	mov	r0, r5
 800398c:	9301      	str	r3, [sp, #4]
 800398e:	f000 f995 	bl	8003cbc <_svfiprintf_r>
 8003992:	1c43      	adds	r3, r0, #1
 8003994:	bfbc      	itt	lt
 8003996:	238b      	movlt	r3, #139	@ 0x8b
 8003998:	602b      	strlt	r3, [r5, #0]
 800399a:	2c00      	cmp	r4, #0
 800399c:	d0dd      	beq.n	800395a <sniprintf+0x16>
 800399e:	9b02      	ldr	r3, [sp, #8]
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
 80039a4:	e7d9      	b.n	800395a <sniprintf+0x16>
 80039a6:	bf00      	nop
 80039a8:	20000028 	.word	0x20000028

080039ac <memset>:
 80039ac:	4402      	add	r2, r0
 80039ae:	4603      	mov	r3, r0
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d100      	bne.n	80039b6 <memset+0xa>
 80039b4:	4770      	bx	lr
 80039b6:	f803 1b01 	strb.w	r1, [r3], #1
 80039ba:	e7f9      	b.n	80039b0 <memset+0x4>

080039bc <__errno>:
 80039bc:	4b01      	ldr	r3, [pc, #4]	@ (80039c4 <__errno+0x8>)
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	20000028 	.word	0x20000028

080039c8 <__libc_init_array>:
 80039c8:	b570      	push	{r4, r5, r6, lr}
 80039ca:	4d0d      	ldr	r5, [pc, #52]	@ (8003a00 <__libc_init_array+0x38>)
 80039cc:	4c0d      	ldr	r4, [pc, #52]	@ (8003a04 <__libc_init_array+0x3c>)
 80039ce:	1b64      	subs	r4, r4, r5
 80039d0:	10a4      	asrs	r4, r4, #2
 80039d2:	2600      	movs	r6, #0
 80039d4:	42a6      	cmp	r6, r4
 80039d6:	d109      	bne.n	80039ec <__libc_init_array+0x24>
 80039d8:	4d0b      	ldr	r5, [pc, #44]	@ (8003a08 <__libc_init_array+0x40>)
 80039da:	4c0c      	ldr	r4, [pc, #48]	@ (8003a0c <__libc_init_array+0x44>)
 80039dc:	f000 fc66 	bl	80042ac <_init>
 80039e0:	1b64      	subs	r4, r4, r5
 80039e2:	10a4      	asrs	r4, r4, #2
 80039e4:	2600      	movs	r6, #0
 80039e6:	42a6      	cmp	r6, r4
 80039e8:	d105      	bne.n	80039f6 <__libc_init_array+0x2e>
 80039ea:	bd70      	pop	{r4, r5, r6, pc}
 80039ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f0:	4798      	blx	r3
 80039f2:	3601      	adds	r6, #1
 80039f4:	e7ee      	b.n	80039d4 <__libc_init_array+0xc>
 80039f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80039fa:	4798      	blx	r3
 80039fc:	3601      	adds	r6, #1
 80039fe:	e7f2      	b.n	80039e6 <__libc_init_array+0x1e>
 8003a00:	080044f0 	.word	0x080044f0
 8003a04:	080044f0 	.word	0x080044f0
 8003a08:	080044f0 	.word	0x080044f0
 8003a0c:	080044f4 	.word	0x080044f4

08003a10 <__retarget_lock_acquire_recursive>:
 8003a10:	4770      	bx	lr

08003a12 <__retarget_lock_release_recursive>:
 8003a12:	4770      	bx	lr

08003a14 <_free_r>:
 8003a14:	b538      	push	{r3, r4, r5, lr}
 8003a16:	4605      	mov	r5, r0
 8003a18:	2900      	cmp	r1, #0
 8003a1a:	d041      	beq.n	8003aa0 <_free_r+0x8c>
 8003a1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a20:	1f0c      	subs	r4, r1, #4
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	bfb8      	it	lt
 8003a26:	18e4      	addlt	r4, r4, r3
 8003a28:	f000 f8e0 	bl	8003bec <__malloc_lock>
 8003a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003aa4 <_free_r+0x90>)
 8003a2e:	6813      	ldr	r3, [r2, #0]
 8003a30:	b933      	cbnz	r3, 8003a40 <_free_r+0x2c>
 8003a32:	6063      	str	r3, [r4, #4]
 8003a34:	6014      	str	r4, [r2, #0]
 8003a36:	4628      	mov	r0, r5
 8003a38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a3c:	f000 b8dc 	b.w	8003bf8 <__malloc_unlock>
 8003a40:	42a3      	cmp	r3, r4
 8003a42:	d908      	bls.n	8003a56 <_free_r+0x42>
 8003a44:	6820      	ldr	r0, [r4, #0]
 8003a46:	1821      	adds	r1, r4, r0
 8003a48:	428b      	cmp	r3, r1
 8003a4a:	bf01      	itttt	eq
 8003a4c:	6819      	ldreq	r1, [r3, #0]
 8003a4e:	685b      	ldreq	r3, [r3, #4]
 8003a50:	1809      	addeq	r1, r1, r0
 8003a52:	6021      	streq	r1, [r4, #0]
 8003a54:	e7ed      	b.n	8003a32 <_free_r+0x1e>
 8003a56:	461a      	mov	r2, r3
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	b10b      	cbz	r3, 8003a60 <_free_r+0x4c>
 8003a5c:	42a3      	cmp	r3, r4
 8003a5e:	d9fa      	bls.n	8003a56 <_free_r+0x42>
 8003a60:	6811      	ldr	r1, [r2, #0]
 8003a62:	1850      	adds	r0, r2, r1
 8003a64:	42a0      	cmp	r0, r4
 8003a66:	d10b      	bne.n	8003a80 <_free_r+0x6c>
 8003a68:	6820      	ldr	r0, [r4, #0]
 8003a6a:	4401      	add	r1, r0
 8003a6c:	1850      	adds	r0, r2, r1
 8003a6e:	4283      	cmp	r3, r0
 8003a70:	6011      	str	r1, [r2, #0]
 8003a72:	d1e0      	bne.n	8003a36 <_free_r+0x22>
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	6053      	str	r3, [r2, #4]
 8003a7a:	4408      	add	r0, r1
 8003a7c:	6010      	str	r0, [r2, #0]
 8003a7e:	e7da      	b.n	8003a36 <_free_r+0x22>
 8003a80:	d902      	bls.n	8003a88 <_free_r+0x74>
 8003a82:	230c      	movs	r3, #12
 8003a84:	602b      	str	r3, [r5, #0]
 8003a86:	e7d6      	b.n	8003a36 <_free_r+0x22>
 8003a88:	6820      	ldr	r0, [r4, #0]
 8003a8a:	1821      	adds	r1, r4, r0
 8003a8c:	428b      	cmp	r3, r1
 8003a8e:	bf04      	itt	eq
 8003a90:	6819      	ldreq	r1, [r3, #0]
 8003a92:	685b      	ldreq	r3, [r3, #4]
 8003a94:	6063      	str	r3, [r4, #4]
 8003a96:	bf04      	itt	eq
 8003a98:	1809      	addeq	r1, r1, r0
 8003a9a:	6021      	streq	r1, [r4, #0]
 8003a9c:	6054      	str	r4, [r2, #4]
 8003a9e:	e7ca      	b.n	8003a36 <_free_r+0x22>
 8003aa0:	bd38      	pop	{r3, r4, r5, pc}
 8003aa2:	bf00      	nop
 8003aa4:	200002c4 	.word	0x200002c4

08003aa8 <sbrk_aligned>:
 8003aa8:	b570      	push	{r4, r5, r6, lr}
 8003aaa:	4e0f      	ldr	r6, [pc, #60]	@ (8003ae8 <sbrk_aligned+0x40>)
 8003aac:	460c      	mov	r4, r1
 8003aae:	6831      	ldr	r1, [r6, #0]
 8003ab0:	4605      	mov	r5, r0
 8003ab2:	b911      	cbnz	r1, 8003aba <sbrk_aligned+0x12>
 8003ab4:	f000 fba6 	bl	8004204 <_sbrk_r>
 8003ab8:	6030      	str	r0, [r6, #0]
 8003aba:	4621      	mov	r1, r4
 8003abc:	4628      	mov	r0, r5
 8003abe:	f000 fba1 	bl	8004204 <_sbrk_r>
 8003ac2:	1c43      	adds	r3, r0, #1
 8003ac4:	d103      	bne.n	8003ace <sbrk_aligned+0x26>
 8003ac6:	f04f 34ff 	mov.w	r4, #4294967295
 8003aca:	4620      	mov	r0, r4
 8003acc:	bd70      	pop	{r4, r5, r6, pc}
 8003ace:	1cc4      	adds	r4, r0, #3
 8003ad0:	f024 0403 	bic.w	r4, r4, #3
 8003ad4:	42a0      	cmp	r0, r4
 8003ad6:	d0f8      	beq.n	8003aca <sbrk_aligned+0x22>
 8003ad8:	1a21      	subs	r1, r4, r0
 8003ada:	4628      	mov	r0, r5
 8003adc:	f000 fb92 	bl	8004204 <_sbrk_r>
 8003ae0:	3001      	adds	r0, #1
 8003ae2:	d1f2      	bne.n	8003aca <sbrk_aligned+0x22>
 8003ae4:	e7ef      	b.n	8003ac6 <sbrk_aligned+0x1e>
 8003ae6:	bf00      	nop
 8003ae8:	200002c0 	.word	0x200002c0

08003aec <_malloc_r>:
 8003aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003af0:	1ccd      	adds	r5, r1, #3
 8003af2:	f025 0503 	bic.w	r5, r5, #3
 8003af6:	3508      	adds	r5, #8
 8003af8:	2d0c      	cmp	r5, #12
 8003afa:	bf38      	it	cc
 8003afc:	250c      	movcc	r5, #12
 8003afe:	2d00      	cmp	r5, #0
 8003b00:	4606      	mov	r6, r0
 8003b02:	db01      	blt.n	8003b08 <_malloc_r+0x1c>
 8003b04:	42a9      	cmp	r1, r5
 8003b06:	d904      	bls.n	8003b12 <_malloc_r+0x26>
 8003b08:	230c      	movs	r3, #12
 8003b0a:	6033      	str	r3, [r6, #0]
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003be8 <_malloc_r+0xfc>
 8003b16:	f000 f869 	bl	8003bec <__malloc_lock>
 8003b1a:	f8d8 3000 	ldr.w	r3, [r8]
 8003b1e:	461c      	mov	r4, r3
 8003b20:	bb44      	cbnz	r4, 8003b74 <_malloc_r+0x88>
 8003b22:	4629      	mov	r1, r5
 8003b24:	4630      	mov	r0, r6
 8003b26:	f7ff ffbf 	bl	8003aa8 <sbrk_aligned>
 8003b2a:	1c43      	adds	r3, r0, #1
 8003b2c:	4604      	mov	r4, r0
 8003b2e:	d158      	bne.n	8003be2 <_malloc_r+0xf6>
 8003b30:	f8d8 4000 	ldr.w	r4, [r8]
 8003b34:	4627      	mov	r7, r4
 8003b36:	2f00      	cmp	r7, #0
 8003b38:	d143      	bne.n	8003bc2 <_malloc_r+0xd6>
 8003b3a:	2c00      	cmp	r4, #0
 8003b3c:	d04b      	beq.n	8003bd6 <_malloc_r+0xea>
 8003b3e:	6823      	ldr	r3, [r4, #0]
 8003b40:	4639      	mov	r1, r7
 8003b42:	4630      	mov	r0, r6
 8003b44:	eb04 0903 	add.w	r9, r4, r3
 8003b48:	f000 fb5c 	bl	8004204 <_sbrk_r>
 8003b4c:	4581      	cmp	r9, r0
 8003b4e:	d142      	bne.n	8003bd6 <_malloc_r+0xea>
 8003b50:	6821      	ldr	r1, [r4, #0]
 8003b52:	1a6d      	subs	r5, r5, r1
 8003b54:	4629      	mov	r1, r5
 8003b56:	4630      	mov	r0, r6
 8003b58:	f7ff ffa6 	bl	8003aa8 <sbrk_aligned>
 8003b5c:	3001      	adds	r0, #1
 8003b5e:	d03a      	beq.n	8003bd6 <_malloc_r+0xea>
 8003b60:	6823      	ldr	r3, [r4, #0]
 8003b62:	442b      	add	r3, r5
 8003b64:	6023      	str	r3, [r4, #0]
 8003b66:	f8d8 3000 	ldr.w	r3, [r8]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	bb62      	cbnz	r2, 8003bc8 <_malloc_r+0xdc>
 8003b6e:	f8c8 7000 	str.w	r7, [r8]
 8003b72:	e00f      	b.n	8003b94 <_malloc_r+0xa8>
 8003b74:	6822      	ldr	r2, [r4, #0]
 8003b76:	1b52      	subs	r2, r2, r5
 8003b78:	d420      	bmi.n	8003bbc <_malloc_r+0xd0>
 8003b7a:	2a0b      	cmp	r2, #11
 8003b7c:	d917      	bls.n	8003bae <_malloc_r+0xc2>
 8003b7e:	1961      	adds	r1, r4, r5
 8003b80:	42a3      	cmp	r3, r4
 8003b82:	6025      	str	r5, [r4, #0]
 8003b84:	bf18      	it	ne
 8003b86:	6059      	strne	r1, [r3, #4]
 8003b88:	6863      	ldr	r3, [r4, #4]
 8003b8a:	bf08      	it	eq
 8003b8c:	f8c8 1000 	streq.w	r1, [r8]
 8003b90:	5162      	str	r2, [r4, r5]
 8003b92:	604b      	str	r3, [r1, #4]
 8003b94:	4630      	mov	r0, r6
 8003b96:	f000 f82f 	bl	8003bf8 <__malloc_unlock>
 8003b9a:	f104 000b 	add.w	r0, r4, #11
 8003b9e:	1d23      	adds	r3, r4, #4
 8003ba0:	f020 0007 	bic.w	r0, r0, #7
 8003ba4:	1ac2      	subs	r2, r0, r3
 8003ba6:	bf1c      	itt	ne
 8003ba8:	1a1b      	subne	r3, r3, r0
 8003baa:	50a3      	strne	r3, [r4, r2]
 8003bac:	e7af      	b.n	8003b0e <_malloc_r+0x22>
 8003bae:	6862      	ldr	r2, [r4, #4]
 8003bb0:	42a3      	cmp	r3, r4
 8003bb2:	bf0c      	ite	eq
 8003bb4:	f8c8 2000 	streq.w	r2, [r8]
 8003bb8:	605a      	strne	r2, [r3, #4]
 8003bba:	e7eb      	b.n	8003b94 <_malloc_r+0xa8>
 8003bbc:	4623      	mov	r3, r4
 8003bbe:	6864      	ldr	r4, [r4, #4]
 8003bc0:	e7ae      	b.n	8003b20 <_malloc_r+0x34>
 8003bc2:	463c      	mov	r4, r7
 8003bc4:	687f      	ldr	r7, [r7, #4]
 8003bc6:	e7b6      	b.n	8003b36 <_malloc_r+0x4a>
 8003bc8:	461a      	mov	r2, r3
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	42a3      	cmp	r3, r4
 8003bce:	d1fb      	bne.n	8003bc8 <_malloc_r+0xdc>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	6053      	str	r3, [r2, #4]
 8003bd4:	e7de      	b.n	8003b94 <_malloc_r+0xa8>
 8003bd6:	230c      	movs	r3, #12
 8003bd8:	6033      	str	r3, [r6, #0]
 8003bda:	4630      	mov	r0, r6
 8003bdc:	f000 f80c 	bl	8003bf8 <__malloc_unlock>
 8003be0:	e794      	b.n	8003b0c <_malloc_r+0x20>
 8003be2:	6005      	str	r5, [r0, #0]
 8003be4:	e7d6      	b.n	8003b94 <_malloc_r+0xa8>
 8003be6:	bf00      	nop
 8003be8:	200002c4 	.word	0x200002c4

08003bec <__malloc_lock>:
 8003bec:	4801      	ldr	r0, [pc, #4]	@ (8003bf4 <__malloc_lock+0x8>)
 8003bee:	f7ff bf0f 	b.w	8003a10 <__retarget_lock_acquire_recursive>
 8003bf2:	bf00      	nop
 8003bf4:	200002bc 	.word	0x200002bc

08003bf8 <__malloc_unlock>:
 8003bf8:	4801      	ldr	r0, [pc, #4]	@ (8003c00 <__malloc_unlock+0x8>)
 8003bfa:	f7ff bf0a 	b.w	8003a12 <__retarget_lock_release_recursive>
 8003bfe:	bf00      	nop
 8003c00:	200002bc 	.word	0x200002bc

08003c04 <__ssputs_r>:
 8003c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c08:	688e      	ldr	r6, [r1, #8]
 8003c0a:	461f      	mov	r7, r3
 8003c0c:	42be      	cmp	r6, r7
 8003c0e:	680b      	ldr	r3, [r1, #0]
 8003c10:	4682      	mov	sl, r0
 8003c12:	460c      	mov	r4, r1
 8003c14:	4690      	mov	r8, r2
 8003c16:	d82d      	bhi.n	8003c74 <__ssputs_r+0x70>
 8003c18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003c20:	d026      	beq.n	8003c70 <__ssputs_r+0x6c>
 8003c22:	6965      	ldr	r5, [r4, #20]
 8003c24:	6909      	ldr	r1, [r1, #16]
 8003c26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c2a:	eba3 0901 	sub.w	r9, r3, r1
 8003c2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c32:	1c7b      	adds	r3, r7, #1
 8003c34:	444b      	add	r3, r9
 8003c36:	106d      	asrs	r5, r5, #1
 8003c38:	429d      	cmp	r5, r3
 8003c3a:	bf38      	it	cc
 8003c3c:	461d      	movcc	r5, r3
 8003c3e:	0553      	lsls	r3, r2, #21
 8003c40:	d527      	bpl.n	8003c92 <__ssputs_r+0x8e>
 8003c42:	4629      	mov	r1, r5
 8003c44:	f7ff ff52 	bl	8003aec <_malloc_r>
 8003c48:	4606      	mov	r6, r0
 8003c4a:	b360      	cbz	r0, 8003ca6 <__ssputs_r+0xa2>
 8003c4c:	6921      	ldr	r1, [r4, #16]
 8003c4e:	464a      	mov	r2, r9
 8003c50:	f000 fae8 	bl	8004224 <memcpy>
 8003c54:	89a3      	ldrh	r3, [r4, #12]
 8003c56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003c5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c5e:	81a3      	strh	r3, [r4, #12]
 8003c60:	6126      	str	r6, [r4, #16]
 8003c62:	6165      	str	r5, [r4, #20]
 8003c64:	444e      	add	r6, r9
 8003c66:	eba5 0509 	sub.w	r5, r5, r9
 8003c6a:	6026      	str	r6, [r4, #0]
 8003c6c:	60a5      	str	r5, [r4, #8]
 8003c6e:	463e      	mov	r6, r7
 8003c70:	42be      	cmp	r6, r7
 8003c72:	d900      	bls.n	8003c76 <__ssputs_r+0x72>
 8003c74:	463e      	mov	r6, r7
 8003c76:	6820      	ldr	r0, [r4, #0]
 8003c78:	4632      	mov	r2, r6
 8003c7a:	4641      	mov	r1, r8
 8003c7c:	f000 faa8 	bl	80041d0 <memmove>
 8003c80:	68a3      	ldr	r3, [r4, #8]
 8003c82:	1b9b      	subs	r3, r3, r6
 8003c84:	60a3      	str	r3, [r4, #8]
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	4433      	add	r3, r6
 8003c8a:	6023      	str	r3, [r4, #0]
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c92:	462a      	mov	r2, r5
 8003c94:	f000 fad4 	bl	8004240 <_realloc_r>
 8003c98:	4606      	mov	r6, r0
 8003c9a:	2800      	cmp	r0, #0
 8003c9c:	d1e0      	bne.n	8003c60 <__ssputs_r+0x5c>
 8003c9e:	6921      	ldr	r1, [r4, #16]
 8003ca0:	4650      	mov	r0, sl
 8003ca2:	f7ff feb7 	bl	8003a14 <_free_r>
 8003ca6:	230c      	movs	r3, #12
 8003ca8:	f8ca 3000 	str.w	r3, [sl]
 8003cac:	89a3      	ldrh	r3, [r4, #12]
 8003cae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cb2:	81a3      	strh	r3, [r4, #12]
 8003cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb8:	e7e9      	b.n	8003c8e <__ssputs_r+0x8a>
	...

08003cbc <_svfiprintf_r>:
 8003cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cc0:	4698      	mov	r8, r3
 8003cc2:	898b      	ldrh	r3, [r1, #12]
 8003cc4:	061b      	lsls	r3, r3, #24
 8003cc6:	b09d      	sub	sp, #116	@ 0x74
 8003cc8:	4607      	mov	r7, r0
 8003cca:	460d      	mov	r5, r1
 8003ccc:	4614      	mov	r4, r2
 8003cce:	d510      	bpl.n	8003cf2 <_svfiprintf_r+0x36>
 8003cd0:	690b      	ldr	r3, [r1, #16]
 8003cd2:	b973      	cbnz	r3, 8003cf2 <_svfiprintf_r+0x36>
 8003cd4:	2140      	movs	r1, #64	@ 0x40
 8003cd6:	f7ff ff09 	bl	8003aec <_malloc_r>
 8003cda:	6028      	str	r0, [r5, #0]
 8003cdc:	6128      	str	r0, [r5, #16]
 8003cde:	b930      	cbnz	r0, 8003cee <_svfiprintf_r+0x32>
 8003ce0:	230c      	movs	r3, #12
 8003ce2:	603b      	str	r3, [r7, #0]
 8003ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce8:	b01d      	add	sp, #116	@ 0x74
 8003cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cee:	2340      	movs	r3, #64	@ 0x40
 8003cf0:	616b      	str	r3, [r5, #20]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cf6:	2320      	movs	r3, #32
 8003cf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003cfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d00:	2330      	movs	r3, #48	@ 0x30
 8003d02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003ea0 <_svfiprintf_r+0x1e4>
 8003d06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003d0a:	f04f 0901 	mov.w	r9, #1
 8003d0e:	4623      	mov	r3, r4
 8003d10:	469a      	mov	sl, r3
 8003d12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d16:	b10a      	cbz	r2, 8003d1c <_svfiprintf_r+0x60>
 8003d18:	2a25      	cmp	r2, #37	@ 0x25
 8003d1a:	d1f9      	bne.n	8003d10 <_svfiprintf_r+0x54>
 8003d1c:	ebba 0b04 	subs.w	fp, sl, r4
 8003d20:	d00b      	beq.n	8003d3a <_svfiprintf_r+0x7e>
 8003d22:	465b      	mov	r3, fp
 8003d24:	4622      	mov	r2, r4
 8003d26:	4629      	mov	r1, r5
 8003d28:	4638      	mov	r0, r7
 8003d2a:	f7ff ff6b 	bl	8003c04 <__ssputs_r>
 8003d2e:	3001      	adds	r0, #1
 8003d30:	f000 80a7 	beq.w	8003e82 <_svfiprintf_r+0x1c6>
 8003d34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d36:	445a      	add	r2, fp
 8003d38:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d3a:	f89a 3000 	ldrb.w	r3, [sl]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f000 809f 	beq.w	8003e82 <_svfiprintf_r+0x1c6>
 8003d44:	2300      	movs	r3, #0
 8003d46:	f04f 32ff 	mov.w	r2, #4294967295
 8003d4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d4e:	f10a 0a01 	add.w	sl, sl, #1
 8003d52:	9304      	str	r3, [sp, #16]
 8003d54:	9307      	str	r3, [sp, #28]
 8003d56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d5c:	4654      	mov	r4, sl
 8003d5e:	2205      	movs	r2, #5
 8003d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d64:	484e      	ldr	r0, [pc, #312]	@ (8003ea0 <_svfiprintf_r+0x1e4>)
 8003d66:	f7fc fa3b 	bl	80001e0 <memchr>
 8003d6a:	9a04      	ldr	r2, [sp, #16]
 8003d6c:	b9d8      	cbnz	r0, 8003da6 <_svfiprintf_r+0xea>
 8003d6e:	06d0      	lsls	r0, r2, #27
 8003d70:	bf44      	itt	mi
 8003d72:	2320      	movmi	r3, #32
 8003d74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d78:	0711      	lsls	r1, r2, #28
 8003d7a:	bf44      	itt	mi
 8003d7c:	232b      	movmi	r3, #43	@ 0x2b
 8003d7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d82:	f89a 3000 	ldrb.w	r3, [sl]
 8003d86:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d88:	d015      	beq.n	8003db6 <_svfiprintf_r+0xfa>
 8003d8a:	9a07      	ldr	r2, [sp, #28]
 8003d8c:	4654      	mov	r4, sl
 8003d8e:	2000      	movs	r0, #0
 8003d90:	f04f 0c0a 	mov.w	ip, #10
 8003d94:	4621      	mov	r1, r4
 8003d96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d9a:	3b30      	subs	r3, #48	@ 0x30
 8003d9c:	2b09      	cmp	r3, #9
 8003d9e:	d94b      	bls.n	8003e38 <_svfiprintf_r+0x17c>
 8003da0:	b1b0      	cbz	r0, 8003dd0 <_svfiprintf_r+0x114>
 8003da2:	9207      	str	r2, [sp, #28]
 8003da4:	e014      	b.n	8003dd0 <_svfiprintf_r+0x114>
 8003da6:	eba0 0308 	sub.w	r3, r0, r8
 8003daa:	fa09 f303 	lsl.w	r3, r9, r3
 8003dae:	4313      	orrs	r3, r2
 8003db0:	9304      	str	r3, [sp, #16]
 8003db2:	46a2      	mov	sl, r4
 8003db4:	e7d2      	b.n	8003d5c <_svfiprintf_r+0xa0>
 8003db6:	9b03      	ldr	r3, [sp, #12]
 8003db8:	1d19      	adds	r1, r3, #4
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	9103      	str	r1, [sp, #12]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	bfbb      	ittet	lt
 8003dc2:	425b      	neglt	r3, r3
 8003dc4:	f042 0202 	orrlt.w	r2, r2, #2
 8003dc8:	9307      	strge	r3, [sp, #28]
 8003dca:	9307      	strlt	r3, [sp, #28]
 8003dcc:	bfb8      	it	lt
 8003dce:	9204      	strlt	r2, [sp, #16]
 8003dd0:	7823      	ldrb	r3, [r4, #0]
 8003dd2:	2b2e      	cmp	r3, #46	@ 0x2e
 8003dd4:	d10a      	bne.n	8003dec <_svfiprintf_r+0x130>
 8003dd6:	7863      	ldrb	r3, [r4, #1]
 8003dd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003dda:	d132      	bne.n	8003e42 <_svfiprintf_r+0x186>
 8003ddc:	9b03      	ldr	r3, [sp, #12]
 8003dde:	1d1a      	adds	r2, r3, #4
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	9203      	str	r2, [sp, #12]
 8003de4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003de8:	3402      	adds	r4, #2
 8003dea:	9305      	str	r3, [sp, #20]
 8003dec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003eb0 <_svfiprintf_r+0x1f4>
 8003df0:	7821      	ldrb	r1, [r4, #0]
 8003df2:	2203      	movs	r2, #3
 8003df4:	4650      	mov	r0, sl
 8003df6:	f7fc f9f3 	bl	80001e0 <memchr>
 8003dfa:	b138      	cbz	r0, 8003e0c <_svfiprintf_r+0x150>
 8003dfc:	9b04      	ldr	r3, [sp, #16]
 8003dfe:	eba0 000a 	sub.w	r0, r0, sl
 8003e02:	2240      	movs	r2, #64	@ 0x40
 8003e04:	4082      	lsls	r2, r0
 8003e06:	4313      	orrs	r3, r2
 8003e08:	3401      	adds	r4, #1
 8003e0a:	9304      	str	r3, [sp, #16]
 8003e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e10:	4824      	ldr	r0, [pc, #144]	@ (8003ea4 <_svfiprintf_r+0x1e8>)
 8003e12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003e16:	2206      	movs	r2, #6
 8003e18:	f7fc f9e2 	bl	80001e0 <memchr>
 8003e1c:	2800      	cmp	r0, #0
 8003e1e:	d036      	beq.n	8003e8e <_svfiprintf_r+0x1d2>
 8003e20:	4b21      	ldr	r3, [pc, #132]	@ (8003ea8 <_svfiprintf_r+0x1ec>)
 8003e22:	bb1b      	cbnz	r3, 8003e6c <_svfiprintf_r+0x1b0>
 8003e24:	9b03      	ldr	r3, [sp, #12]
 8003e26:	3307      	adds	r3, #7
 8003e28:	f023 0307 	bic.w	r3, r3, #7
 8003e2c:	3308      	adds	r3, #8
 8003e2e:	9303      	str	r3, [sp, #12]
 8003e30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e32:	4433      	add	r3, r6
 8003e34:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e36:	e76a      	b.n	8003d0e <_svfiprintf_r+0x52>
 8003e38:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e3c:	460c      	mov	r4, r1
 8003e3e:	2001      	movs	r0, #1
 8003e40:	e7a8      	b.n	8003d94 <_svfiprintf_r+0xd8>
 8003e42:	2300      	movs	r3, #0
 8003e44:	3401      	adds	r4, #1
 8003e46:	9305      	str	r3, [sp, #20]
 8003e48:	4619      	mov	r1, r3
 8003e4a:	f04f 0c0a 	mov.w	ip, #10
 8003e4e:	4620      	mov	r0, r4
 8003e50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e54:	3a30      	subs	r2, #48	@ 0x30
 8003e56:	2a09      	cmp	r2, #9
 8003e58:	d903      	bls.n	8003e62 <_svfiprintf_r+0x1a6>
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0c6      	beq.n	8003dec <_svfiprintf_r+0x130>
 8003e5e:	9105      	str	r1, [sp, #20]
 8003e60:	e7c4      	b.n	8003dec <_svfiprintf_r+0x130>
 8003e62:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e66:	4604      	mov	r4, r0
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e7f0      	b.n	8003e4e <_svfiprintf_r+0x192>
 8003e6c:	ab03      	add	r3, sp, #12
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	462a      	mov	r2, r5
 8003e72:	4b0e      	ldr	r3, [pc, #56]	@ (8003eac <_svfiprintf_r+0x1f0>)
 8003e74:	a904      	add	r1, sp, #16
 8003e76:	4638      	mov	r0, r7
 8003e78:	f3af 8000 	nop.w
 8003e7c:	1c42      	adds	r2, r0, #1
 8003e7e:	4606      	mov	r6, r0
 8003e80:	d1d6      	bne.n	8003e30 <_svfiprintf_r+0x174>
 8003e82:	89ab      	ldrh	r3, [r5, #12]
 8003e84:	065b      	lsls	r3, r3, #25
 8003e86:	f53f af2d 	bmi.w	8003ce4 <_svfiprintf_r+0x28>
 8003e8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003e8c:	e72c      	b.n	8003ce8 <_svfiprintf_r+0x2c>
 8003e8e:	ab03      	add	r3, sp, #12
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	462a      	mov	r2, r5
 8003e94:	4b05      	ldr	r3, [pc, #20]	@ (8003eac <_svfiprintf_r+0x1f0>)
 8003e96:	a904      	add	r1, sp, #16
 8003e98:	4638      	mov	r0, r7
 8003e9a:	f000 f879 	bl	8003f90 <_printf_i>
 8003e9e:	e7ed      	b.n	8003e7c <_svfiprintf_r+0x1c0>
 8003ea0:	080044b5 	.word	0x080044b5
 8003ea4:	080044bf 	.word	0x080044bf
 8003ea8:	00000000 	.word	0x00000000
 8003eac:	08003c05 	.word	0x08003c05
 8003eb0:	080044bb 	.word	0x080044bb

08003eb4 <_printf_common>:
 8003eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eb8:	4616      	mov	r6, r2
 8003eba:	4698      	mov	r8, r3
 8003ebc:	688a      	ldr	r2, [r1, #8]
 8003ebe:	690b      	ldr	r3, [r1, #16]
 8003ec0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	bfb8      	it	lt
 8003ec8:	4613      	movlt	r3, r2
 8003eca:	6033      	str	r3, [r6, #0]
 8003ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003ed0:	4607      	mov	r7, r0
 8003ed2:	460c      	mov	r4, r1
 8003ed4:	b10a      	cbz	r2, 8003eda <_printf_common+0x26>
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	6033      	str	r3, [r6, #0]
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	0699      	lsls	r1, r3, #26
 8003ede:	bf42      	ittt	mi
 8003ee0:	6833      	ldrmi	r3, [r6, #0]
 8003ee2:	3302      	addmi	r3, #2
 8003ee4:	6033      	strmi	r3, [r6, #0]
 8003ee6:	6825      	ldr	r5, [r4, #0]
 8003ee8:	f015 0506 	ands.w	r5, r5, #6
 8003eec:	d106      	bne.n	8003efc <_printf_common+0x48>
 8003eee:	f104 0a19 	add.w	sl, r4, #25
 8003ef2:	68e3      	ldr	r3, [r4, #12]
 8003ef4:	6832      	ldr	r2, [r6, #0]
 8003ef6:	1a9b      	subs	r3, r3, r2
 8003ef8:	42ab      	cmp	r3, r5
 8003efa:	dc26      	bgt.n	8003f4a <_printf_common+0x96>
 8003efc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f00:	6822      	ldr	r2, [r4, #0]
 8003f02:	3b00      	subs	r3, #0
 8003f04:	bf18      	it	ne
 8003f06:	2301      	movne	r3, #1
 8003f08:	0692      	lsls	r2, r2, #26
 8003f0a:	d42b      	bmi.n	8003f64 <_printf_common+0xb0>
 8003f0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f10:	4641      	mov	r1, r8
 8003f12:	4638      	mov	r0, r7
 8003f14:	47c8      	blx	r9
 8003f16:	3001      	adds	r0, #1
 8003f18:	d01e      	beq.n	8003f58 <_printf_common+0xa4>
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	6922      	ldr	r2, [r4, #16]
 8003f1e:	f003 0306 	and.w	r3, r3, #6
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	bf02      	ittt	eq
 8003f26:	68e5      	ldreq	r5, [r4, #12]
 8003f28:	6833      	ldreq	r3, [r6, #0]
 8003f2a:	1aed      	subeq	r5, r5, r3
 8003f2c:	68a3      	ldr	r3, [r4, #8]
 8003f2e:	bf0c      	ite	eq
 8003f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f34:	2500      	movne	r5, #0
 8003f36:	4293      	cmp	r3, r2
 8003f38:	bfc4      	itt	gt
 8003f3a:	1a9b      	subgt	r3, r3, r2
 8003f3c:	18ed      	addgt	r5, r5, r3
 8003f3e:	2600      	movs	r6, #0
 8003f40:	341a      	adds	r4, #26
 8003f42:	42b5      	cmp	r5, r6
 8003f44:	d11a      	bne.n	8003f7c <_printf_common+0xc8>
 8003f46:	2000      	movs	r0, #0
 8003f48:	e008      	b.n	8003f5c <_printf_common+0xa8>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	4652      	mov	r2, sl
 8003f4e:	4641      	mov	r1, r8
 8003f50:	4638      	mov	r0, r7
 8003f52:	47c8      	blx	r9
 8003f54:	3001      	adds	r0, #1
 8003f56:	d103      	bne.n	8003f60 <_printf_common+0xac>
 8003f58:	f04f 30ff 	mov.w	r0, #4294967295
 8003f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f60:	3501      	adds	r5, #1
 8003f62:	e7c6      	b.n	8003ef2 <_printf_common+0x3e>
 8003f64:	18e1      	adds	r1, r4, r3
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	2030      	movs	r0, #48	@ 0x30
 8003f6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f6e:	4422      	add	r2, r4
 8003f70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003f78:	3302      	adds	r3, #2
 8003f7a:	e7c7      	b.n	8003f0c <_printf_common+0x58>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	4622      	mov	r2, r4
 8003f80:	4641      	mov	r1, r8
 8003f82:	4638      	mov	r0, r7
 8003f84:	47c8      	blx	r9
 8003f86:	3001      	adds	r0, #1
 8003f88:	d0e6      	beq.n	8003f58 <_printf_common+0xa4>
 8003f8a:	3601      	adds	r6, #1
 8003f8c:	e7d9      	b.n	8003f42 <_printf_common+0x8e>
	...

08003f90 <_printf_i>:
 8003f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f94:	7e0f      	ldrb	r7, [r1, #24]
 8003f96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f98:	2f78      	cmp	r7, #120	@ 0x78
 8003f9a:	4691      	mov	r9, r2
 8003f9c:	4680      	mov	r8, r0
 8003f9e:	460c      	mov	r4, r1
 8003fa0:	469a      	mov	sl, r3
 8003fa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003fa6:	d807      	bhi.n	8003fb8 <_printf_i+0x28>
 8003fa8:	2f62      	cmp	r7, #98	@ 0x62
 8003faa:	d80a      	bhi.n	8003fc2 <_printf_i+0x32>
 8003fac:	2f00      	cmp	r7, #0
 8003fae:	f000 80d2 	beq.w	8004156 <_printf_i+0x1c6>
 8003fb2:	2f58      	cmp	r7, #88	@ 0x58
 8003fb4:	f000 80b9 	beq.w	800412a <_printf_i+0x19a>
 8003fb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003fbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003fc0:	e03a      	b.n	8004038 <_printf_i+0xa8>
 8003fc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003fc6:	2b15      	cmp	r3, #21
 8003fc8:	d8f6      	bhi.n	8003fb8 <_printf_i+0x28>
 8003fca:	a101      	add	r1, pc, #4	@ (adr r1, 8003fd0 <_printf_i+0x40>)
 8003fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fd0:	08004029 	.word	0x08004029
 8003fd4:	0800403d 	.word	0x0800403d
 8003fd8:	08003fb9 	.word	0x08003fb9
 8003fdc:	08003fb9 	.word	0x08003fb9
 8003fe0:	08003fb9 	.word	0x08003fb9
 8003fe4:	08003fb9 	.word	0x08003fb9
 8003fe8:	0800403d 	.word	0x0800403d
 8003fec:	08003fb9 	.word	0x08003fb9
 8003ff0:	08003fb9 	.word	0x08003fb9
 8003ff4:	08003fb9 	.word	0x08003fb9
 8003ff8:	08003fb9 	.word	0x08003fb9
 8003ffc:	0800413d 	.word	0x0800413d
 8004000:	08004067 	.word	0x08004067
 8004004:	080040f7 	.word	0x080040f7
 8004008:	08003fb9 	.word	0x08003fb9
 800400c:	08003fb9 	.word	0x08003fb9
 8004010:	0800415f 	.word	0x0800415f
 8004014:	08003fb9 	.word	0x08003fb9
 8004018:	08004067 	.word	0x08004067
 800401c:	08003fb9 	.word	0x08003fb9
 8004020:	08003fb9 	.word	0x08003fb9
 8004024:	080040ff 	.word	0x080040ff
 8004028:	6833      	ldr	r3, [r6, #0]
 800402a:	1d1a      	adds	r2, r3, #4
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6032      	str	r2, [r6, #0]
 8004030:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004034:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004038:	2301      	movs	r3, #1
 800403a:	e09d      	b.n	8004178 <_printf_i+0x1e8>
 800403c:	6833      	ldr	r3, [r6, #0]
 800403e:	6820      	ldr	r0, [r4, #0]
 8004040:	1d19      	adds	r1, r3, #4
 8004042:	6031      	str	r1, [r6, #0]
 8004044:	0606      	lsls	r6, r0, #24
 8004046:	d501      	bpl.n	800404c <_printf_i+0xbc>
 8004048:	681d      	ldr	r5, [r3, #0]
 800404a:	e003      	b.n	8004054 <_printf_i+0xc4>
 800404c:	0645      	lsls	r5, r0, #25
 800404e:	d5fb      	bpl.n	8004048 <_printf_i+0xb8>
 8004050:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004054:	2d00      	cmp	r5, #0
 8004056:	da03      	bge.n	8004060 <_printf_i+0xd0>
 8004058:	232d      	movs	r3, #45	@ 0x2d
 800405a:	426d      	negs	r5, r5
 800405c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004060:	4859      	ldr	r0, [pc, #356]	@ (80041c8 <_printf_i+0x238>)
 8004062:	230a      	movs	r3, #10
 8004064:	e011      	b.n	800408a <_printf_i+0xfa>
 8004066:	6821      	ldr	r1, [r4, #0]
 8004068:	6833      	ldr	r3, [r6, #0]
 800406a:	0608      	lsls	r0, r1, #24
 800406c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004070:	d402      	bmi.n	8004078 <_printf_i+0xe8>
 8004072:	0649      	lsls	r1, r1, #25
 8004074:	bf48      	it	mi
 8004076:	b2ad      	uxthmi	r5, r5
 8004078:	2f6f      	cmp	r7, #111	@ 0x6f
 800407a:	4853      	ldr	r0, [pc, #332]	@ (80041c8 <_printf_i+0x238>)
 800407c:	6033      	str	r3, [r6, #0]
 800407e:	bf14      	ite	ne
 8004080:	230a      	movne	r3, #10
 8004082:	2308      	moveq	r3, #8
 8004084:	2100      	movs	r1, #0
 8004086:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800408a:	6866      	ldr	r6, [r4, #4]
 800408c:	60a6      	str	r6, [r4, #8]
 800408e:	2e00      	cmp	r6, #0
 8004090:	bfa2      	ittt	ge
 8004092:	6821      	ldrge	r1, [r4, #0]
 8004094:	f021 0104 	bicge.w	r1, r1, #4
 8004098:	6021      	strge	r1, [r4, #0]
 800409a:	b90d      	cbnz	r5, 80040a0 <_printf_i+0x110>
 800409c:	2e00      	cmp	r6, #0
 800409e:	d04b      	beq.n	8004138 <_printf_i+0x1a8>
 80040a0:	4616      	mov	r6, r2
 80040a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80040a6:	fb03 5711 	mls	r7, r3, r1, r5
 80040aa:	5dc7      	ldrb	r7, [r0, r7]
 80040ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040b0:	462f      	mov	r7, r5
 80040b2:	42bb      	cmp	r3, r7
 80040b4:	460d      	mov	r5, r1
 80040b6:	d9f4      	bls.n	80040a2 <_printf_i+0x112>
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d10b      	bne.n	80040d4 <_printf_i+0x144>
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	07df      	lsls	r7, r3, #31
 80040c0:	d508      	bpl.n	80040d4 <_printf_i+0x144>
 80040c2:	6923      	ldr	r3, [r4, #16]
 80040c4:	6861      	ldr	r1, [r4, #4]
 80040c6:	4299      	cmp	r1, r3
 80040c8:	bfde      	ittt	le
 80040ca:	2330      	movle	r3, #48	@ 0x30
 80040cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80040d4:	1b92      	subs	r2, r2, r6
 80040d6:	6122      	str	r2, [r4, #16]
 80040d8:	f8cd a000 	str.w	sl, [sp]
 80040dc:	464b      	mov	r3, r9
 80040de:	aa03      	add	r2, sp, #12
 80040e0:	4621      	mov	r1, r4
 80040e2:	4640      	mov	r0, r8
 80040e4:	f7ff fee6 	bl	8003eb4 <_printf_common>
 80040e8:	3001      	adds	r0, #1
 80040ea:	d14a      	bne.n	8004182 <_printf_i+0x1f2>
 80040ec:	f04f 30ff 	mov.w	r0, #4294967295
 80040f0:	b004      	add	sp, #16
 80040f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	f043 0320 	orr.w	r3, r3, #32
 80040fc:	6023      	str	r3, [r4, #0]
 80040fe:	4833      	ldr	r0, [pc, #204]	@ (80041cc <_printf_i+0x23c>)
 8004100:	2778      	movs	r7, #120	@ 0x78
 8004102:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	6831      	ldr	r1, [r6, #0]
 800410a:	061f      	lsls	r7, r3, #24
 800410c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004110:	d402      	bmi.n	8004118 <_printf_i+0x188>
 8004112:	065f      	lsls	r7, r3, #25
 8004114:	bf48      	it	mi
 8004116:	b2ad      	uxthmi	r5, r5
 8004118:	6031      	str	r1, [r6, #0]
 800411a:	07d9      	lsls	r1, r3, #31
 800411c:	bf44      	itt	mi
 800411e:	f043 0320 	orrmi.w	r3, r3, #32
 8004122:	6023      	strmi	r3, [r4, #0]
 8004124:	b11d      	cbz	r5, 800412e <_printf_i+0x19e>
 8004126:	2310      	movs	r3, #16
 8004128:	e7ac      	b.n	8004084 <_printf_i+0xf4>
 800412a:	4827      	ldr	r0, [pc, #156]	@ (80041c8 <_printf_i+0x238>)
 800412c:	e7e9      	b.n	8004102 <_printf_i+0x172>
 800412e:	6823      	ldr	r3, [r4, #0]
 8004130:	f023 0320 	bic.w	r3, r3, #32
 8004134:	6023      	str	r3, [r4, #0]
 8004136:	e7f6      	b.n	8004126 <_printf_i+0x196>
 8004138:	4616      	mov	r6, r2
 800413a:	e7bd      	b.n	80040b8 <_printf_i+0x128>
 800413c:	6833      	ldr	r3, [r6, #0]
 800413e:	6825      	ldr	r5, [r4, #0]
 8004140:	6961      	ldr	r1, [r4, #20]
 8004142:	1d18      	adds	r0, r3, #4
 8004144:	6030      	str	r0, [r6, #0]
 8004146:	062e      	lsls	r6, r5, #24
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	d501      	bpl.n	8004150 <_printf_i+0x1c0>
 800414c:	6019      	str	r1, [r3, #0]
 800414e:	e002      	b.n	8004156 <_printf_i+0x1c6>
 8004150:	0668      	lsls	r0, r5, #25
 8004152:	d5fb      	bpl.n	800414c <_printf_i+0x1bc>
 8004154:	8019      	strh	r1, [r3, #0]
 8004156:	2300      	movs	r3, #0
 8004158:	6123      	str	r3, [r4, #16]
 800415a:	4616      	mov	r6, r2
 800415c:	e7bc      	b.n	80040d8 <_printf_i+0x148>
 800415e:	6833      	ldr	r3, [r6, #0]
 8004160:	1d1a      	adds	r2, r3, #4
 8004162:	6032      	str	r2, [r6, #0]
 8004164:	681e      	ldr	r6, [r3, #0]
 8004166:	6862      	ldr	r2, [r4, #4]
 8004168:	2100      	movs	r1, #0
 800416a:	4630      	mov	r0, r6
 800416c:	f7fc f838 	bl	80001e0 <memchr>
 8004170:	b108      	cbz	r0, 8004176 <_printf_i+0x1e6>
 8004172:	1b80      	subs	r0, r0, r6
 8004174:	6060      	str	r0, [r4, #4]
 8004176:	6863      	ldr	r3, [r4, #4]
 8004178:	6123      	str	r3, [r4, #16]
 800417a:	2300      	movs	r3, #0
 800417c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004180:	e7aa      	b.n	80040d8 <_printf_i+0x148>
 8004182:	6923      	ldr	r3, [r4, #16]
 8004184:	4632      	mov	r2, r6
 8004186:	4649      	mov	r1, r9
 8004188:	4640      	mov	r0, r8
 800418a:	47d0      	blx	sl
 800418c:	3001      	adds	r0, #1
 800418e:	d0ad      	beq.n	80040ec <_printf_i+0x15c>
 8004190:	6823      	ldr	r3, [r4, #0]
 8004192:	079b      	lsls	r3, r3, #30
 8004194:	d413      	bmi.n	80041be <_printf_i+0x22e>
 8004196:	68e0      	ldr	r0, [r4, #12]
 8004198:	9b03      	ldr	r3, [sp, #12]
 800419a:	4298      	cmp	r0, r3
 800419c:	bfb8      	it	lt
 800419e:	4618      	movlt	r0, r3
 80041a0:	e7a6      	b.n	80040f0 <_printf_i+0x160>
 80041a2:	2301      	movs	r3, #1
 80041a4:	4632      	mov	r2, r6
 80041a6:	4649      	mov	r1, r9
 80041a8:	4640      	mov	r0, r8
 80041aa:	47d0      	blx	sl
 80041ac:	3001      	adds	r0, #1
 80041ae:	d09d      	beq.n	80040ec <_printf_i+0x15c>
 80041b0:	3501      	adds	r5, #1
 80041b2:	68e3      	ldr	r3, [r4, #12]
 80041b4:	9903      	ldr	r1, [sp, #12]
 80041b6:	1a5b      	subs	r3, r3, r1
 80041b8:	42ab      	cmp	r3, r5
 80041ba:	dcf2      	bgt.n	80041a2 <_printf_i+0x212>
 80041bc:	e7eb      	b.n	8004196 <_printf_i+0x206>
 80041be:	2500      	movs	r5, #0
 80041c0:	f104 0619 	add.w	r6, r4, #25
 80041c4:	e7f5      	b.n	80041b2 <_printf_i+0x222>
 80041c6:	bf00      	nop
 80041c8:	080044c6 	.word	0x080044c6
 80041cc:	080044d7 	.word	0x080044d7

080041d0 <memmove>:
 80041d0:	4288      	cmp	r0, r1
 80041d2:	b510      	push	{r4, lr}
 80041d4:	eb01 0402 	add.w	r4, r1, r2
 80041d8:	d902      	bls.n	80041e0 <memmove+0x10>
 80041da:	4284      	cmp	r4, r0
 80041dc:	4623      	mov	r3, r4
 80041de:	d807      	bhi.n	80041f0 <memmove+0x20>
 80041e0:	1e43      	subs	r3, r0, #1
 80041e2:	42a1      	cmp	r1, r4
 80041e4:	d008      	beq.n	80041f8 <memmove+0x28>
 80041e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041ee:	e7f8      	b.n	80041e2 <memmove+0x12>
 80041f0:	4402      	add	r2, r0
 80041f2:	4601      	mov	r1, r0
 80041f4:	428a      	cmp	r2, r1
 80041f6:	d100      	bne.n	80041fa <memmove+0x2a>
 80041f8:	bd10      	pop	{r4, pc}
 80041fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004202:	e7f7      	b.n	80041f4 <memmove+0x24>

08004204 <_sbrk_r>:
 8004204:	b538      	push	{r3, r4, r5, lr}
 8004206:	4d06      	ldr	r5, [pc, #24]	@ (8004220 <_sbrk_r+0x1c>)
 8004208:	2300      	movs	r3, #0
 800420a:	4604      	mov	r4, r0
 800420c:	4608      	mov	r0, r1
 800420e:	602b      	str	r3, [r5, #0]
 8004210:	f7fc fec0 	bl	8000f94 <_sbrk>
 8004214:	1c43      	adds	r3, r0, #1
 8004216:	d102      	bne.n	800421e <_sbrk_r+0x1a>
 8004218:	682b      	ldr	r3, [r5, #0]
 800421a:	b103      	cbz	r3, 800421e <_sbrk_r+0x1a>
 800421c:	6023      	str	r3, [r4, #0]
 800421e:	bd38      	pop	{r3, r4, r5, pc}
 8004220:	200002b8 	.word	0x200002b8

08004224 <memcpy>:
 8004224:	440a      	add	r2, r1
 8004226:	4291      	cmp	r1, r2
 8004228:	f100 33ff 	add.w	r3, r0, #4294967295
 800422c:	d100      	bne.n	8004230 <memcpy+0xc>
 800422e:	4770      	bx	lr
 8004230:	b510      	push	{r4, lr}
 8004232:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004236:	f803 4f01 	strb.w	r4, [r3, #1]!
 800423a:	4291      	cmp	r1, r2
 800423c:	d1f9      	bne.n	8004232 <memcpy+0xe>
 800423e:	bd10      	pop	{r4, pc}

08004240 <_realloc_r>:
 8004240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004244:	4680      	mov	r8, r0
 8004246:	4615      	mov	r5, r2
 8004248:	460c      	mov	r4, r1
 800424a:	b921      	cbnz	r1, 8004256 <_realloc_r+0x16>
 800424c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004250:	4611      	mov	r1, r2
 8004252:	f7ff bc4b 	b.w	8003aec <_malloc_r>
 8004256:	b92a      	cbnz	r2, 8004264 <_realloc_r+0x24>
 8004258:	f7ff fbdc 	bl	8003a14 <_free_r>
 800425c:	2400      	movs	r4, #0
 800425e:	4620      	mov	r0, r4
 8004260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004264:	f000 f81a 	bl	800429c <_malloc_usable_size_r>
 8004268:	4285      	cmp	r5, r0
 800426a:	4606      	mov	r6, r0
 800426c:	d802      	bhi.n	8004274 <_realloc_r+0x34>
 800426e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004272:	d8f4      	bhi.n	800425e <_realloc_r+0x1e>
 8004274:	4629      	mov	r1, r5
 8004276:	4640      	mov	r0, r8
 8004278:	f7ff fc38 	bl	8003aec <_malloc_r>
 800427c:	4607      	mov	r7, r0
 800427e:	2800      	cmp	r0, #0
 8004280:	d0ec      	beq.n	800425c <_realloc_r+0x1c>
 8004282:	42b5      	cmp	r5, r6
 8004284:	462a      	mov	r2, r5
 8004286:	4621      	mov	r1, r4
 8004288:	bf28      	it	cs
 800428a:	4632      	movcs	r2, r6
 800428c:	f7ff ffca 	bl	8004224 <memcpy>
 8004290:	4621      	mov	r1, r4
 8004292:	4640      	mov	r0, r8
 8004294:	f7ff fbbe 	bl	8003a14 <_free_r>
 8004298:	463c      	mov	r4, r7
 800429a:	e7e0      	b.n	800425e <_realloc_r+0x1e>

0800429c <_malloc_usable_size_r>:
 800429c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042a0:	1f18      	subs	r0, r3, #4
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	bfbc      	itt	lt
 80042a6:	580b      	ldrlt	r3, [r1, r0]
 80042a8:	18c0      	addlt	r0, r0, r3
 80042aa:	4770      	bx	lr

080042ac <_init>:
 80042ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ae:	bf00      	nop
 80042b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042b2:	bc08      	pop	{r3}
 80042b4:	469e      	mov	lr, r3
 80042b6:	4770      	bx	lr

080042b8 <_fini>:
 80042b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ba:	bf00      	nop
 80042bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042be:	bc08      	pop	{r3}
 80042c0:	469e      	mov	lr, r3
 80042c2:	4770      	bx	lr
