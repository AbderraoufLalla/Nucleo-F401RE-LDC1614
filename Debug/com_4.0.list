
com_4.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000403c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  080041dc  080041dc  000051dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004400  08004400  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004400  08004400  00005400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004408  08004408  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004408  08004408  00005408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800440c  0800440c  0000540c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004410  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000060  08004470  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08004470  000062ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1a8  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016f0  00000000  00000000  00010238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  00011928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000723  00000000  00000000  00012240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b31  00000000  00000000  00012963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be7a  00000000  00000000  00028494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087a55  00000000  00000000  0003430e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bbd63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b54  00000000  00000000  000bbda8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000be8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080041c4 	.word	0x080041c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080041c4 	.word	0x080041c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <LDC1614_ReadRegister>:
  * @brief  The application entry point.
  * @retval int
  */

// Function to read a register from LDC1614
void LDC1614_ReadRegister(uint8_t reg, uint8_t* buffer, uint16_t size) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af04      	add	r7, sp, #16
 8000576:	4603      	mov	r3, r0
 8000578:	6039      	str	r1, [r7, #0]
 800057a:	71fb      	strb	r3, [r7, #7]
 800057c:	4613      	mov	r3, r2
 800057e:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hi2c1, LDC1614_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, buffer, size, HAL_MAX_DELAY);
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	b29a      	uxth	r2, r3
 8000584:	f04f 33ff 	mov.w	r3, #4294967295
 8000588:	9302      	str	r3, [sp, #8]
 800058a:	88bb      	ldrh	r3, [r7, #4]
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2301      	movs	r3, #1
 8000594:	2154      	movs	r1, #84	@ 0x54
 8000596:	4803      	ldr	r0, [pc, #12]	@ (80005a4 <LDC1614_ReadRegister+0x34>)
 8000598:	f001 fa52 	bl	8001a40 <HAL_I2C_Mem_Read>
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	2000007c 	.word	0x2000007c

080005a8 <LDC1614_WriteRegister>:

void LDC1614_WriteRegister(uint8_t reg, uint8_t* data, uint16_t size) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af04      	add	r7, sp, #16
 80005ae:	4603      	mov	r3, r0
 80005b0:	6039      	str	r1, [r7, #0]
 80005b2:	71fb      	strb	r3, [r7, #7]
 80005b4:	4613      	mov	r3, r2
 80005b6:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Write(&hi2c1, LDC1614_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, size, HAL_MAX_DELAY);
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295
 80005c0:	9302      	str	r3, [sp, #8]
 80005c2:	88bb      	ldrh	r3, [r7, #4]
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2301      	movs	r3, #1
 80005cc:	2154      	movs	r1, #84	@ 0x54
 80005ce:	4803      	ldr	r0, [pc, #12]	@ (80005dc <LDC1614_WriteRegister+0x34>)
 80005d0:	f001 f93c 	bl	800184c <HAL_I2C_Mem_Write>
}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	2000007c 	.word	0x2000007c

080005e0 <hex_to_dec>:

// Function to transform hex to dec
int hex_to_dec(uint16_t hex) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]
	char hexString_CH0[5];
	snprintf(hexString_CH0, sizeof(hexString_CH0), "%04X", hex);
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	f107 000c 	add.w	r0, r7, #12
 80005f0:	4a08      	ldr	r2, [pc, #32]	@ (8000614 <hex_to_dec+0x34>)
 80005f2:	2105      	movs	r1, #5
 80005f4:	f003 f932 	bl	800385c <sniprintf>
	int integerValue = (int)strtol(hexString_CH0, NULL, 16);
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2210      	movs	r2, #16
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f003 f921 	bl	8003848 <strtol>
 8000606:	6178      	str	r0, [r7, #20]
	return integerValue;
 8000608:	697b      	ldr	r3, [r7, #20]
}
 800060a:	4618      	mov	r0, r3
 800060c:	3718      	adds	r7, #24
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	080041dc 	.word	0x080041dc

08000618 <Transmit_Data>:

// Function to transmit data via UART
void Transmit_Data(uint16_t MSB_CH0, uint16_t LSB_CH0, uint16_t CH0_FIN_DIVIDER, uint16_t CH0_OFFSET, uint16_t MSB_CH1, uint16_t LSB_CH1, uint16_t CH1_FIN_DIVIDER, uint16_t CH1_OFFSET, uint16_t MSB_CH2, uint16_t LSB_CH2, uint16_t CH2_FIN_DIVIDER, uint16_t CH2_OFFSET, uint16_t MSB_CH3, uint16_t LSB_CH3, uint16_t CH3_FIN_DIVIDER, uint16_t CH3_OFFSET) {
 8000618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800061a:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 800061e:	af10      	add	r7, sp, #64	@ 0x40
 8000620:	4605      	mov	r5, r0
 8000622:	460c      	mov	r4, r1
 8000624:	4610      	mov	r0, r2
 8000626:	4619      	mov	r1, r3
 8000628:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800062c:	f2a3 33fa 	subw	r3, r3, #1018	@ 0x3fa
 8000630:	462a      	mov	r2, r5
 8000632:	801a      	strh	r2, [r3, #0]
 8000634:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000638:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 800063c:	4622      	mov	r2, r4
 800063e:	801a      	strh	r2, [r3, #0]
 8000640:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000644:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8000648:	4602      	mov	r2, r0
 800064a:	801a      	strh	r2, [r3, #0]
 800064c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000650:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8000654:	460a      	mov	r2, r1
 8000656:	801a      	strh	r2, [r3, #0]
    static uint32_t transmit_count = 0;  // Counter to keep track of transmitted data instances
    char msg[1000];  // Buffer to hold the transmitted message, size increased to accommodate the count
    transmit_count++;  // Increment the counter each time data is transmitted
 8000658:	4b4c      	ldr	r3, [pc, #304]	@ (800078c <Transmit_Data+0x174>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	3301      	adds	r3, #1
 800065e:	4a4b      	ldr	r2, [pc, #300]	@ (800078c <Transmit_Data+0x174>)
 8000660:	6013      	str	r3, [r2, #0]

    uint16_t LSB_CH0_masked = LSB_CH0 & 0x0FFF; // because LSB is only 12 bits
 8000662:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000666:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000670:	f8a7 3426 	strh.w	r3, [r7, #1062]	@ 0x426
    uint16_t LSB_CH1_masked = LSB_CH1 & 0x0FFF; // because LSB is only 12 bits
 8000674:	f8b7 3444 	ldrh.w	r3, [r7, #1092]	@ 0x444
 8000678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800067c:	f8a7 3424 	strh.w	r3, [r7, #1060]	@ 0x424
    //uint16_t LSB_CH2_masked = LSB_CH2 & 0xFFF; // because LSB is only 12 bits
    //uint16_t LSB_CH3_masked = LSB_CH3 & 0xFFF; // because LSB is only 12 bits



    uint16_t CH0_FIN_DIVIDER_masked = CH0_FIN_DIVIDER & 0x00FF; // Only the first 2 bytes represents the FIN divider.
 8000680:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000684:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8000688:	881b      	ldrh	r3, [r3, #0]
 800068a:	b2db      	uxtb	r3, r3
 800068c:	f8a7 3422 	strh.w	r3, [r7, #1058]	@ 0x422
    uint16_t CH1_FIN_DIVIDER_masked = CH1_FIN_DIVIDER & 0x00FF; // Only the first 2 bytes represents the FIN divider.
 8000690:	f8b7 3448 	ldrh.w	r3, [r7, #1096]	@ 0x448
 8000694:	b2db      	uxtb	r3, r3
 8000696:	f8a7 3420 	strh.w	r3, [r7, #1056]	@ 0x420
    uint16_t CH2_FIN_DIVIDER_masked = CH2_FIN_DIVIDER & 0x00FF; // Only the first 2 bytes represents the FIN divider.
 800069a:	f8b7 3458 	ldrh.w	r3, [r7, #1112]	@ 0x458
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	f8a7 341e 	strh.w	r3, [r7, #1054]	@ 0x41e
    uint16_t CH3_FIN_DIVIDER_masked = CH3_FIN_DIVIDER & 0x00FF; // Only the first 2 bytes represents the FIN divider.
 80006a4:	f8b7 3468 	ldrh.w	r3, [r7, #1128]	@ 0x468
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	f8a7 341c 	strh.w	r3, [r7, #1052]	@ 0x41c


    //int f_sensor_CH1 = integer_reg_CH1_FIN_DIVIDER * 40000000 * ((DATA_CH1 / 268435456) + (integer_reg_CH1_OFFSET / 65536));

    // Format the data as a hexadecimal string along with the counter
    int len = snprintf(msg, sizeof(msg), "CH0 - MSB: %d, LSB: %d, F_DIV: %d, OFFSET: %d | CH1 - MSB: %d, LSB: %d, F_DIV: %d, OFFSET: %d | CH2 - MSB: %d, LSB: %d, F_DIV: %d, OFFSET: %d | CH3 - MSB: %d, LSB: %d, F_DIV: %d, OFFSET: %d - Cycle: %d \r\n", MSB_CH0, LSB_CH0, CH0_FIN_DIVIDER_masked, CH0_OFFSET, MSB_CH1, LSB_CH1, CH1_FIN_DIVIDER_masked, CH1_OFFSET, MSB_CH2, LSB_CH2, CH2_FIN_DIVIDER_masked, CH2_OFFSET, MSB_CH3, LSB_CH3, CH3_FIN_DIVIDER_masked, CH3_OFFSET, transmit_count);
 80006ae:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80006b2:	f2a3 33fa 	subw	r3, r3, #1018	@ 0x3fa
 80006b6:	f8b3 c000 	ldrh.w	ip, [r3]
 80006ba:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80006be:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80006c2:	881d      	ldrh	r5, [r3, #0]
 80006c4:	f8b7 6422 	ldrh.w	r6, [r7, #1058]	@ 0x422
 80006c8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80006cc:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80006d4:	f8b7 2440 	ldrh.w	r2, [r7, #1088]	@ 0x440
 80006d8:	623a      	str	r2, [r7, #32]
 80006da:	f8b7 1444 	ldrh.w	r1, [r7, #1092]	@ 0x444
 80006de:	61f9      	str	r1, [r7, #28]
 80006e0:	f8b7 0420 	ldrh.w	r0, [r7, #1056]	@ 0x420
 80006e4:	61b8      	str	r0, [r7, #24]
 80006e6:	f8b7 044c 	ldrh.w	r0, [r7, #1100]	@ 0x44c
 80006ea:	6178      	str	r0, [r7, #20]
 80006ec:	f8b7 e450 	ldrh.w	lr, [r7, #1104]	@ 0x450
 80006f0:	4673      	mov	r3, lr
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	f8b7 e454 	ldrh.w	lr, [r7, #1108]	@ 0x454
 80006f8:	4672      	mov	r2, lr
 80006fa:	60fa      	str	r2, [r7, #12]
 80006fc:	f8b7 e41e 	ldrh.w	lr, [r7, #1054]	@ 0x41e
 8000700:	4671      	mov	r1, lr
 8000702:	60b9      	str	r1, [r7, #8]
 8000704:	f8b7 e45c 	ldrh.w	lr, [r7, #1116]	@ 0x45c
 8000708:	4670      	mov	r0, lr
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	f8b7 e460 	ldrh.w	lr, [r7, #1120]	@ 0x460
 8000710:	4670      	mov	r0, lr
 8000712:	6038      	str	r0, [r7, #0]
 8000714:	f8b7 4464 	ldrh.w	r4, [r7, #1124]	@ 0x464
 8000718:	f8b7 141c 	ldrh.w	r1, [r7, #1052]	@ 0x41c
 800071c:	f8b7 246c 	ldrh.w	r2, [r7, #1132]	@ 0x46c
 8000720:	4b1a      	ldr	r3, [pc, #104]	@ (800078c <Transmit_Data+0x174>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000728:	930f      	str	r3, [sp, #60]	@ 0x3c
 800072a:	920e      	str	r2, [sp, #56]	@ 0x38
 800072c:	910d      	str	r1, [sp, #52]	@ 0x34
 800072e:	940c      	str	r4, [sp, #48]	@ 0x30
 8000730:	683c      	ldr	r4, [r7, #0]
 8000732:	940b      	str	r4, [sp, #44]	@ 0x2c
 8000734:	687c      	ldr	r4, [r7, #4]
 8000736:	940a      	str	r4, [sp, #40]	@ 0x28
 8000738:	68b9      	ldr	r1, [r7, #8]
 800073a:	9109      	str	r1, [sp, #36]	@ 0x24
 800073c:	68fa      	ldr	r2, [r7, #12]
 800073e:	9208      	str	r2, [sp, #32]
 8000740:	693b      	ldr	r3, [r7, #16]
 8000742:	9307      	str	r3, [sp, #28]
 8000744:	697c      	ldr	r4, [r7, #20]
 8000746:	9406      	str	r4, [sp, #24]
 8000748:	69bc      	ldr	r4, [r7, #24]
 800074a:	9405      	str	r4, [sp, #20]
 800074c:	69f9      	ldr	r1, [r7, #28]
 800074e:	9104      	str	r1, [sp, #16]
 8000750:	6a3a      	ldr	r2, [r7, #32]
 8000752:	9203      	str	r2, [sp, #12]
 8000754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000756:	9302      	str	r3, [sp, #8]
 8000758:	9601      	str	r6, [sp, #4]
 800075a:	9500      	str	r5, [sp, #0]
 800075c:	4663      	mov	r3, ip
 800075e:	4a0c      	ldr	r2, [pc, #48]	@ (8000790 <Transmit_Data+0x178>)
 8000760:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000764:	f003 f87a 	bl	800385c <sniprintf>
 8000768:	f8c7 0418 	str.w	r0, [r7, #1048]	@ 0x418

    // Transmit the formatted message
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
 800076c:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8000770:	b29a      	uxth	r2, r3
 8000772:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
 800077a:	4806      	ldr	r0, [pc, #24]	@ (8000794 <Transmit_Data+0x17c>)
 800077c:	f002 fc2e 	bl	8002fdc <HAL_UART_Transmit>
}
 8000780:	bf00      	nop
 8000782:	f207 472c 	addw	r7, r7, #1068	@ 0x42c
 8000786:	46bd      	mov	sp, r7
 8000788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800078a:	bf00      	nop
 800078c:	20000158 	.word	0x20000158
 8000790:	080041e4 	.word	0x080041e4
 8000794:	200000d0 	.word	0x200000d0

08000798 <main>:
//        value >>= 1; // Right shift by 1 bit
//    }
//    return bits;
//}
int main(void)
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b097      	sub	sp, #92	@ 0x5c
 800079c:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079e:	f000 fbf7 	bl	8000f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a2:	f000 f963 	bl	8000a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a6:	f000 fa25 	bl	8000bf4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007aa:	f000 f9f9 	bl	8000ba0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80007ae:	f000 f9c9 	bl	8000b44 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  LDC1614_WriteRegister(config_reg, config_data_4_Channels, 2);
 80007b2:	4b9b      	ldr	r3, [pc, #620]	@ (8000a20 <main+0x288>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2202      	movs	r2, #2
 80007b8:	499a      	ldr	r1, [pc, #616]	@ (8000a24 <main+0x28c>)
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fef4 	bl	80005a8 <LDC1614_WriteRegister>
  while (1)
  {
    /* USER CODE END WHILE */

    // Read data
    LDC1614_ReadRegister(LDC1614_REG_DATA0_MSB, reg_data_MSB_CH0, 2);
 80007c0:	2202      	movs	r2, #2
 80007c2:	4999      	ldr	r1, [pc, #612]	@ (8000a28 <main+0x290>)
 80007c4:	2000      	movs	r0, #0
 80007c6:	f7ff fed3 	bl	8000570 <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_REG_DATA0_LSB, reg_data_LSB_CH0, 2);
 80007ca:	2202      	movs	r2, #2
 80007cc:	4997      	ldr	r1, [pc, #604]	@ (8000a2c <main+0x294>)
 80007ce:	2001      	movs	r0, #1
 80007d0:	f7ff fece 	bl	8000570 <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_REG_DATA1_MSB, reg_data_MSB_CH1, 2);
 80007d4:	2202      	movs	r2, #2
 80007d6:	4996      	ldr	r1, [pc, #600]	@ (8000a30 <main+0x298>)
 80007d8:	2002      	movs	r0, #2
 80007da:	f7ff fec9 	bl	8000570 <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_REG_DATA1_LSB, reg_data_LSB_CH1, 2);
 80007de:	2202      	movs	r2, #2
 80007e0:	4994      	ldr	r1, [pc, #592]	@ (8000a34 <main+0x29c>)
 80007e2:	2003      	movs	r0, #3
 80007e4:	f7ff fec4 	bl	8000570 <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_REG_DATA2_MSB, reg_data_MSB_CH2, 2);
 80007e8:	2202      	movs	r2, #2
 80007ea:	4993      	ldr	r1, [pc, #588]	@ (8000a38 <main+0x2a0>)
 80007ec:	2004      	movs	r0, #4
 80007ee:	f7ff febf 	bl	8000570 <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_REG_DATA2_LSB, reg_data_LSB_CH2, 2);
 80007f2:	2202      	movs	r2, #2
 80007f4:	4991      	ldr	r1, [pc, #580]	@ (8000a3c <main+0x2a4>)
 80007f6:	2005      	movs	r0, #5
 80007f8:	f7ff feba 	bl	8000570 <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_REG_DATA3_MSB, reg_data_MSB_CH3, 2);
 80007fc:	2202      	movs	r2, #2
 80007fe:	4990      	ldr	r1, [pc, #576]	@ (8000a40 <main+0x2a8>)
 8000800:	2006      	movs	r0, #6
 8000802:	f7ff feb5 	bl	8000570 <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_REG_DATA3_LSB, reg_data_LSB_CH3, 2);
 8000806:	2202      	movs	r2, #2
 8000808:	498e      	ldr	r1, [pc, #568]	@ (8000a44 <main+0x2ac>)
 800080a:	2007      	movs	r0, #7
 800080c:	f7ff feb0 	bl	8000570 <LDC1614_ReadRegister>


    LDC1614_ReadRegister(LDC1614_CH0_OFFSET, reg_CH0_OFFSET, 2);
 8000810:	2202      	movs	r2, #2
 8000812:	498d      	ldr	r1, [pc, #564]	@ (8000a48 <main+0x2b0>)
 8000814:	200c      	movs	r0, #12
 8000816:	f7ff feab 	bl	8000570 <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_CH1_OFFSET, reg_CH1_OFFSET, 2);
 800081a:	2202      	movs	r2, #2
 800081c:	498b      	ldr	r1, [pc, #556]	@ (8000a4c <main+0x2b4>)
 800081e:	200d      	movs	r0, #13
 8000820:	f7ff fea6 	bl	8000570 <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_CH2_OFFSET, reg_CH2_OFFSET, 2);
 8000824:	2202      	movs	r2, #2
 8000826:	498a      	ldr	r1, [pc, #552]	@ (8000a50 <main+0x2b8>)
 8000828:	200e      	movs	r0, #14
 800082a:	f7ff fea1 	bl	8000570 <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_CH3_OFFSET, reg_CH3_OFFSET, 2);
 800082e:	2202      	movs	r2, #2
 8000830:	4988      	ldr	r1, [pc, #544]	@ (8000a54 <main+0x2bc>)
 8000832:	200f      	movs	r0, #15
 8000834:	f7ff fe9c 	bl	8000570 <LDC1614_ReadRegister>

    LDC1614_ReadRegister(LDC1614_CH0_FIN_DIVIDER, reg_CH0_FIN_DIVIDER, 2);
 8000838:	2202      	movs	r2, #2
 800083a:	4987      	ldr	r1, [pc, #540]	@ (8000a58 <main+0x2c0>)
 800083c:	2014      	movs	r0, #20
 800083e:	f7ff fe97 	bl	8000570 <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_CH1_FIN_DIVIDER, reg_CH1_FIN_DIVIDER, 2);
 8000842:	2202      	movs	r2, #2
 8000844:	4985      	ldr	r1, [pc, #532]	@ (8000a5c <main+0x2c4>)
 8000846:	2015      	movs	r0, #21
 8000848:	f7ff fe92 	bl	8000570 <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_CH2_FIN_DIVIDER, reg_CH2_FIN_DIVIDER, 2);
 800084c:	2202      	movs	r2, #2
 800084e:	4984      	ldr	r1, [pc, #528]	@ (8000a60 <main+0x2c8>)
 8000850:	2016      	movs	r0, #22
 8000852:	f7ff fe8d 	bl	8000570 <LDC1614_ReadRegister>
    LDC1614_ReadRegister(LDC1614_CH3_FIN_DIVIDER, reg_CH3_FIN_DIVIDER, 2);
 8000856:	2202      	movs	r2, #2
 8000858:	4982      	ldr	r1, [pc, #520]	@ (8000a64 <main+0x2cc>)
 800085a:	2017      	movs	r0, #23
 800085c:	f7ff fe88 	bl	8000570 <LDC1614_ReadRegister>


    // Combine the two bytes into a single 16-bit value
    uint16_t MSB_CH0 = (reg_data_MSB_CH0[0] << 8) | reg_data_MSB_CH0[1];
 8000860:	4b71      	ldr	r3, [pc, #452]	@ (8000a28 <main+0x290>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	021b      	lsls	r3, r3, #8
 8000866:	b21a      	sxth	r2, r3
 8000868:	4b6f      	ldr	r3, [pc, #444]	@ (8000a28 <main+0x290>)
 800086a:	785b      	ldrb	r3, [r3, #1]
 800086c:	b21b      	sxth	r3, r3
 800086e:	4313      	orrs	r3, r2
 8000870:	b21b      	sxth	r3, r3
 8000872:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t LSB_CH0= (reg_data_LSB_CH0[0] << 8) | reg_data_LSB_CH0[1];
 8000874:	4b6d      	ldr	r3, [pc, #436]	@ (8000a2c <main+0x294>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	021b      	lsls	r3, r3, #8
 800087a:	b21a      	sxth	r2, r3
 800087c:	4b6b      	ldr	r3, [pc, #428]	@ (8000a2c <main+0x294>)
 800087e:	785b      	ldrb	r3, [r3, #1]
 8000880:	b21b      	sxth	r3, r3
 8000882:	4313      	orrs	r3, r2
 8000884:	b21b      	sxth	r3, r3
 8000886:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t MSB_CH1 = (reg_data_MSB_CH1[0] << 8) | reg_data_MSB_CH1[1];
 8000888:	4b69      	ldr	r3, [pc, #420]	@ (8000a30 <main+0x298>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	021b      	lsls	r3, r3, #8
 800088e:	b21a      	sxth	r2, r3
 8000890:	4b67      	ldr	r3, [pc, #412]	@ (8000a30 <main+0x298>)
 8000892:	785b      	ldrb	r3, [r3, #1]
 8000894:	b21b      	sxth	r3, r3
 8000896:	4313      	orrs	r3, r2
 8000898:	b21b      	sxth	r3, r3
 800089a:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t LSB_CH1= (reg_data_LSB_CH1[0] << 8) | reg_data_LSB_CH1[1];
 800089c:	4b65      	ldr	r3, [pc, #404]	@ (8000a34 <main+0x29c>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	021b      	lsls	r3, r3, #8
 80008a2:	b21a      	sxth	r2, r3
 80008a4:	4b63      	ldr	r3, [pc, #396]	@ (8000a34 <main+0x29c>)
 80008a6:	785b      	ldrb	r3, [r3, #1]
 80008a8:	b21b      	sxth	r3, r3
 80008aa:	4313      	orrs	r3, r2
 80008ac:	b21b      	sxth	r3, r3
 80008ae:	843b      	strh	r3, [r7, #32]
    uint16_t MSB_CH2 = (reg_data_MSB_CH2[0] << 8) | reg_data_MSB_CH2[1];
 80008b0:	4b61      	ldr	r3, [pc, #388]	@ (8000a38 <main+0x2a0>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	b21a      	sxth	r2, r3
 80008b8:	4b5f      	ldr	r3, [pc, #380]	@ (8000a38 <main+0x2a0>)
 80008ba:	785b      	ldrb	r3, [r3, #1]
 80008bc:	b21b      	sxth	r3, r3
 80008be:	4313      	orrs	r3, r2
 80008c0:	b21b      	sxth	r3, r3
 80008c2:	83fb      	strh	r3, [r7, #30]
    uint16_t LSB_CH2= (reg_data_LSB_CH2[0] << 8) | reg_data_LSB_CH2[1];
 80008c4:	4b5d      	ldr	r3, [pc, #372]	@ (8000a3c <main+0x2a4>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	021b      	lsls	r3, r3, #8
 80008ca:	b21a      	sxth	r2, r3
 80008cc:	4b5b      	ldr	r3, [pc, #364]	@ (8000a3c <main+0x2a4>)
 80008ce:	785b      	ldrb	r3, [r3, #1]
 80008d0:	b21b      	sxth	r3, r3
 80008d2:	4313      	orrs	r3, r2
 80008d4:	b21b      	sxth	r3, r3
 80008d6:	83bb      	strh	r3, [r7, #28]
    uint16_t MSB_CH3 = (reg_data_MSB_CH3[0] << 8) | reg_data_MSB_CH3[1];
 80008d8:	4b59      	ldr	r3, [pc, #356]	@ (8000a40 <main+0x2a8>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	021b      	lsls	r3, r3, #8
 80008de:	b21a      	sxth	r2, r3
 80008e0:	4b57      	ldr	r3, [pc, #348]	@ (8000a40 <main+0x2a8>)
 80008e2:	785b      	ldrb	r3, [r3, #1]
 80008e4:	b21b      	sxth	r3, r3
 80008e6:	4313      	orrs	r3, r2
 80008e8:	b21b      	sxth	r3, r3
 80008ea:	837b      	strh	r3, [r7, #26]
    uint16_t LSB_CH3= (reg_data_LSB_CH3[0] << 8) | reg_data_LSB_CH3[1];
 80008ec:	4b55      	ldr	r3, [pc, #340]	@ (8000a44 <main+0x2ac>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	021b      	lsls	r3, r3, #8
 80008f2:	b21a      	sxth	r2, r3
 80008f4:	4b53      	ldr	r3, [pc, #332]	@ (8000a44 <main+0x2ac>)
 80008f6:	785b      	ldrb	r3, [r3, #1]
 80008f8:	b21b      	sxth	r3, r3
 80008fa:	4313      	orrs	r3, r2
 80008fc:	b21b      	sxth	r3, r3
 80008fe:	833b      	strh	r3, [r7, #24]

    uint16_t CH0_OFFSET= (reg_CH0_OFFSET[0] << 8) | reg_CH0_OFFSET[1];
 8000900:	4b51      	ldr	r3, [pc, #324]	@ (8000a48 <main+0x2b0>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	021b      	lsls	r3, r3, #8
 8000906:	b21a      	sxth	r2, r3
 8000908:	4b4f      	ldr	r3, [pc, #316]	@ (8000a48 <main+0x2b0>)
 800090a:	785b      	ldrb	r3, [r3, #1]
 800090c:	b21b      	sxth	r3, r3
 800090e:	4313      	orrs	r3, r2
 8000910:	b21b      	sxth	r3, r3
 8000912:	82fb      	strh	r3, [r7, #22]
    uint16_t CH1_OFFSET= (reg_CH1_OFFSET[0] << 8) | reg_CH1_OFFSET[1];
 8000914:	4b4d      	ldr	r3, [pc, #308]	@ (8000a4c <main+0x2b4>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	021b      	lsls	r3, r3, #8
 800091a:	b21a      	sxth	r2, r3
 800091c:	4b4b      	ldr	r3, [pc, #300]	@ (8000a4c <main+0x2b4>)
 800091e:	785b      	ldrb	r3, [r3, #1]
 8000920:	b21b      	sxth	r3, r3
 8000922:	4313      	orrs	r3, r2
 8000924:	b21b      	sxth	r3, r3
 8000926:	82bb      	strh	r3, [r7, #20]
    uint16_t CH2_OFFSET= (reg_CH2_OFFSET[0] << 8) | reg_CH2_OFFSET[1];
 8000928:	4b49      	ldr	r3, [pc, #292]	@ (8000a50 <main+0x2b8>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	021b      	lsls	r3, r3, #8
 800092e:	b21a      	sxth	r2, r3
 8000930:	4b47      	ldr	r3, [pc, #284]	@ (8000a50 <main+0x2b8>)
 8000932:	785b      	ldrb	r3, [r3, #1]
 8000934:	b21b      	sxth	r3, r3
 8000936:	4313      	orrs	r3, r2
 8000938:	b21b      	sxth	r3, r3
 800093a:	827b      	strh	r3, [r7, #18]
    uint16_t CH3_OFFSET= (reg_CH3_OFFSET[0] << 8) | reg_CH3_OFFSET[1];
 800093c:	4b45      	ldr	r3, [pc, #276]	@ (8000a54 <main+0x2bc>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	021b      	lsls	r3, r3, #8
 8000942:	b21a      	sxth	r2, r3
 8000944:	4b43      	ldr	r3, [pc, #268]	@ (8000a54 <main+0x2bc>)
 8000946:	785b      	ldrb	r3, [r3, #1]
 8000948:	b21b      	sxth	r3, r3
 800094a:	4313      	orrs	r3, r2
 800094c:	b21b      	sxth	r3, r3
 800094e:	823b      	strh	r3, [r7, #16]

    uint16_t CH0_FIN_DIVIDER= (reg_CH0_FIN_DIVIDER[0] << 8) | reg_CH0_FIN_DIVIDER[1];
 8000950:	4b41      	ldr	r3, [pc, #260]	@ (8000a58 <main+0x2c0>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	021b      	lsls	r3, r3, #8
 8000956:	b21a      	sxth	r2, r3
 8000958:	4b3f      	ldr	r3, [pc, #252]	@ (8000a58 <main+0x2c0>)
 800095a:	785b      	ldrb	r3, [r3, #1]
 800095c:	b21b      	sxth	r3, r3
 800095e:	4313      	orrs	r3, r2
 8000960:	b21b      	sxth	r3, r3
 8000962:	81fb      	strh	r3, [r7, #14]
    uint16_t CH1_FIN_DIVIDER= (reg_CH1_FIN_DIVIDER[0] << 8) | reg_CH1_FIN_DIVIDER[1];
 8000964:	4b3d      	ldr	r3, [pc, #244]	@ (8000a5c <main+0x2c4>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	021b      	lsls	r3, r3, #8
 800096a:	b21a      	sxth	r2, r3
 800096c:	4b3b      	ldr	r3, [pc, #236]	@ (8000a5c <main+0x2c4>)
 800096e:	785b      	ldrb	r3, [r3, #1]
 8000970:	b21b      	sxth	r3, r3
 8000972:	4313      	orrs	r3, r2
 8000974:	b21b      	sxth	r3, r3
 8000976:	81bb      	strh	r3, [r7, #12]
    uint16_t CH2_FIN_DIVIDER= (reg_CH2_FIN_DIVIDER[0] << 8) | reg_CH2_FIN_DIVIDER[1];
 8000978:	4b39      	ldr	r3, [pc, #228]	@ (8000a60 <main+0x2c8>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	b21a      	sxth	r2, r3
 8000980:	4b37      	ldr	r3, [pc, #220]	@ (8000a60 <main+0x2c8>)
 8000982:	785b      	ldrb	r3, [r3, #1]
 8000984:	b21b      	sxth	r3, r3
 8000986:	4313      	orrs	r3, r2
 8000988:	b21b      	sxth	r3, r3
 800098a:	817b      	strh	r3, [r7, #10]
    uint16_t CH3_FIN_DIVIDER= (reg_CH3_FIN_DIVIDER[0] << 8) | reg_CH3_FIN_DIVIDER[1];
 800098c:	4b35      	ldr	r3, [pc, #212]	@ (8000a64 <main+0x2cc>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	021b      	lsls	r3, r3, #8
 8000992:	b21a      	sxth	r2, r3
 8000994:	4b33      	ldr	r3, [pc, #204]	@ (8000a64 <main+0x2cc>)
 8000996:	785b      	ldrb	r3, [r3, #1]
 8000998:	b21b      	sxth	r3, r3
 800099a:	4313      	orrs	r3, r2
 800099c:	b21b      	sxth	r3, r3
 800099e:	813b      	strh	r3, [r7, #8]


    // Data transform for output
    int integerValue_MSB_CH0 = hex_to_dec(MSB_CH0);
 80009a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff fe1c 	bl	80005e0 <hex_to_dec>
 80009a8:	6078      	str	r0, [r7, #4]
    int integerValue_MSB_CH1 = hex_to_dec(MSB_CH1);
 80009aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fe17 	bl	80005e0 <hex_to_dec>
 80009b2:	6038      	str	r0, [r7, #0]


    // Transmit the register value via UART
    Transmit_Data(MSB_CH0, LSB_CH0, CH0_FIN_DIVIDER, CH0_OFFSET, MSB_CH1, LSB_CH1, CH1_FIN_DIVIDER, CH1_OFFSET, MSB_CH2, LSB_CH2, CH2_FIN_DIVIDER, CH2_OFFSET, MSB_CH3, LSB_CH3, CH3_FIN_DIVIDER, CH3_OFFSET);
 80009b4:	8afc      	ldrh	r4, [r7, #22]
 80009b6:	89fa      	ldrh	r2, [r7, #14]
 80009b8:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80009ba:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 80009bc:	8a3b      	ldrh	r3, [r7, #16]
 80009be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80009c0:	893b      	ldrh	r3, [r7, #8]
 80009c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80009c4:	8b3b      	ldrh	r3, [r7, #24]
 80009c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80009c8:	8b7b      	ldrh	r3, [r7, #26]
 80009ca:	9308      	str	r3, [sp, #32]
 80009cc:	8a7b      	ldrh	r3, [r7, #18]
 80009ce:	9307      	str	r3, [sp, #28]
 80009d0:	897b      	ldrh	r3, [r7, #10]
 80009d2:	9306      	str	r3, [sp, #24]
 80009d4:	8bbb      	ldrh	r3, [r7, #28]
 80009d6:	9305      	str	r3, [sp, #20]
 80009d8:	8bfb      	ldrh	r3, [r7, #30]
 80009da:	9304      	str	r3, [sp, #16]
 80009dc:	8abb      	ldrh	r3, [r7, #20]
 80009de:	9303      	str	r3, [sp, #12]
 80009e0:	89bb      	ldrh	r3, [r7, #12]
 80009e2:	9302      	str	r3, [sp, #8]
 80009e4:	8c3b      	ldrh	r3, [r7, #32]
 80009e6:	9301      	str	r3, [sp, #4]
 80009e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	4623      	mov	r3, r4
 80009ee:	f7ff fe13 	bl	8000618 <Transmit_Data>

    if (integerValue_MSB_CH0 > 312 || integerValue_MSB_CH1 > 310 ){
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 80009f8:	dc03      	bgt.n	8000a02 <main+0x26a>
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 8000a00:	dd05      	ble.n	8000a0e <main+0x276>
    	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000a02:	2201      	movs	r2, #1
 8000a04:	2120      	movs	r1, #32
 8000a06:	4818      	ldr	r0, [pc, #96]	@ (8000a68 <main+0x2d0>)
 8000a08:	f000 fdc2 	bl	8001590 <HAL_GPIO_WritePin>
 8000a0c:	e004      	b.n	8000a18 <main+0x280>
    }else{
    	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2120      	movs	r1, #32
 8000a12:	4815      	ldr	r0, [pc, #84]	@ (8000a68 <main+0x2d0>)
 8000a14:	f000 fdbc 	bl	8001590 <HAL_GPIO_WritePin>
    };
    // Add a delay or condition to control the transmission frequency
    HAL_Delay(100);  // Delay for 1 second, adjust as needed
 8000a18:	2064      	movs	r0, #100	@ 0x64
 8000a1a:	f000 fb2b 	bl	8001074 <HAL_Delay>
  {
 8000a1e:	e6cf      	b.n	80007c0 <main+0x28>
 8000a20:	20000002 	.word	0x20000002
 8000a24:	20000000 	.word	0x20000000
 8000a28:	20000118 	.word	0x20000118
 8000a2c:	2000011c 	.word	0x2000011c
 8000a30:	20000120 	.word	0x20000120
 8000a34:	20000124 	.word	0x20000124
 8000a38:	20000128 	.word	0x20000128
 8000a3c:	2000012c 	.word	0x2000012c
 8000a40:	20000130 	.word	0x20000130
 8000a44:	20000134 	.word	0x20000134
 8000a48:	20000138 	.word	0x20000138
 8000a4c:	2000013c 	.word	0x2000013c
 8000a50:	20000140 	.word	0x20000140
 8000a54:	20000144 	.word	0x20000144
 8000a58:	20000148 	.word	0x20000148
 8000a5c:	2000014c 	.word	0x2000014c
 8000a60:	20000150 	.word	0x20000150
 8000a64:	20000154 	.word	0x20000154
 8000a68:	40020000 	.word	0x40020000

08000a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b094      	sub	sp, #80	@ 0x50
 8000a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a72:	f107 0320 	add.w	r3, r7, #32
 8000a76:	2230      	movs	r2, #48	@ 0x30
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 ff22 	bl	80038c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a90:	2300      	movs	r3, #0
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	4b29      	ldr	r3, [pc, #164]	@ (8000b3c <SystemClock_Config+0xd0>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a98:	4a28      	ldr	r2, [pc, #160]	@ (8000b3c <SystemClock_Config+0xd0>)
 8000a9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa0:	4b26      	ldr	r3, [pc, #152]	@ (8000b3c <SystemClock_Config+0xd0>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000aac:	2300      	movs	r3, #0
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	4b23      	ldr	r3, [pc, #140]	@ (8000b40 <SystemClock_Config+0xd4>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ab8:	4a21      	ldr	r2, [pc, #132]	@ (8000b40 <SystemClock_Config+0xd4>)
 8000aba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b40 <SystemClock_Config+0xd4>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000acc:	2302      	movs	r3, #2
 8000ace:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad4:	2310      	movs	r3, #16
 8000ad6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000adc:	2300      	movs	r3, #0
 8000ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ae0:	2310      	movs	r3, #16
 8000ae2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ae4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ae8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aea:	2304      	movs	r3, #4
 8000aec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000aee:	2307      	movs	r3, #7
 8000af0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af2:	f107 0320 	add.w	r3, r7, #32
 8000af6:	4618      	mov	r0, r3
 8000af8:	f001 fd88 	bl	800260c <HAL_RCC_OscConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b02:	f000 f8e5 	bl	8000cd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b06:	230f      	movs	r3, #15
 8000b08:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	2102      	movs	r1, #2
 8000b22:	4618      	mov	r0, r3
 8000b24:	f001 ffea 	bl	8002afc <HAL_RCC_ClockConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b2e:	f000 f8cf 	bl	8000cd0 <Error_Handler>
  }
}
 8000b32:	bf00      	nop
 8000b34:	3750      	adds	r7, #80	@ 0x50
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40007000 	.word	0x40007000

08000b44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8000b48:	4b12      	ldr	r3, [pc, #72]	@ (8000b94 <MX_I2C1_Init+0x50>)
 8000b4a:	4a13      	ldr	r2, [pc, #76]	@ (8000b98 <MX_I2C1_Init+0x54>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <MX_I2C1_Init+0x50>)
 8000b50:	4a12      	ldr	r2, [pc, #72]	@ (8000b9c <MX_I2C1_Init+0x58>)
 8000b52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	@ (8000b94 <MX_I2C1_Init+0x50>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <MX_I2C1_Init+0x50>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	@ (8000b94 <MX_I2C1_Init+0x50>)
 8000b62:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b68:	4b0a      	ldr	r3, [pc, #40]	@ (8000b94 <MX_I2C1_Init+0x50>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b6e:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <MX_I2C1_Init+0x50>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b74:	4b07      	ldr	r3, [pc, #28]	@ (8000b94 <MX_I2C1_Init+0x50>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b7a:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <MX_I2C1_Init+0x50>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b80:	4804      	ldr	r0, [pc, #16]	@ (8000b94 <MX_I2C1_Init+0x50>)
 8000b82:	f000 fd1f 	bl	80015c4 <HAL_I2C_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b8c:	f000 f8a0 	bl	8000cd0 <Error_Handler>
  }
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	2000007c 	.word	0x2000007c
 8000b98:	40005400 	.word	0x40005400
 8000b9c:	000186a0 	.word	0x000186a0

08000ba0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <MX_USART2_UART_Init+0x4c>)
 8000ba6:	4a12      	ldr	r2, [pc, #72]	@ (8000bf0 <MX_USART2_UART_Init+0x50>)
 8000ba8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000baa:	4b10      	ldr	r3, [pc, #64]	@ (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	@ (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bca:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bd6:	4805      	ldr	r0, [pc, #20]	@ (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bd8:	f002 f9b0 	bl	8002f3c <HAL_UART_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000be2:	f000 f875 	bl	8000cd0 <Error_Handler>
  }
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200000d0 	.word	0x200000d0
 8000bf0:	40004400 	.word	0x40004400

08000bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	@ 0x28
 8000bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc4 <MX_GPIO_Init+0xd0>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a2c      	ldr	r2, [pc, #176]	@ (8000cc4 <MX_GPIO_Init+0xd0>)
 8000c14:	f043 0304 	orr.w	r3, r3, #4
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc4 <MX_GPIO_Init+0xd0>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	f003 0304 	and.w	r3, r3, #4
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b26      	ldr	r3, [pc, #152]	@ (8000cc4 <MX_GPIO_Init+0xd0>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	4a25      	ldr	r2, [pc, #148]	@ (8000cc4 <MX_GPIO_Init+0xd0>)
 8000c30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c36:	4b23      	ldr	r3, [pc, #140]	@ (8000cc4 <MX_GPIO_Init+0xd0>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc4 <MX_GPIO_Init+0xd0>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	4a1e      	ldr	r2, [pc, #120]	@ (8000cc4 <MX_GPIO_Init+0xd0>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c52:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc4 <MX_GPIO_Init+0xd0>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <MX_GPIO_Init+0xd0>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	4a17      	ldr	r2, [pc, #92]	@ (8000cc4 <MX_GPIO_Init+0xd0>)
 8000c68:	f043 0302 	orr.w	r3, r3, #2
 8000c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6e:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <MX_GPIO_Init+0xd0>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2120      	movs	r1, #32
 8000c7e:	4812      	ldr	r0, [pc, #72]	@ (8000cc8 <MX_GPIO_Init+0xd4>)
 8000c80:	f000 fc86 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c8a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480c      	ldr	r0, [pc, #48]	@ (8000ccc <MX_GPIO_Init+0xd8>)
 8000c9c:	f000 faf4 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ca0:	2320      	movs	r3, #32
 8000ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4804      	ldr	r0, [pc, #16]	@ (8000cc8 <MX_GPIO_Init+0xd4>)
 8000cb8:	f000 fae6 	bl	8001288 <HAL_GPIO_Init>
}
 8000cbc:	bf00      	nop
 8000cbe:	3728      	adds	r7, #40	@ 0x28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020000 	.word	0x40020000
 8000ccc:	40020800 	.word	0x40020800

08000cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd4:	b672      	cpsid	i
}
 8000cd6:	bf00      	nop
  __disable_irq();
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <Error_Handler+0x8>

08000cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	4b10      	ldr	r3, [pc, #64]	@ (8000d28 <HAL_MspInit+0x4c>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cea:	4a0f      	ldr	r2, [pc, #60]	@ (8000d28 <HAL_MspInit+0x4c>)
 8000cec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d28 <HAL_MspInit+0x4c>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <HAL_MspInit+0x4c>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d06:	4a08      	ldr	r2, [pc, #32]	@ (8000d28 <HAL_MspInit+0x4c>)
 8000d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d0e:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <HAL_MspInit+0x4c>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d1a:	2007      	movs	r0, #7
 8000d1c:	f000 fa80 	bl	8001220 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40023800 	.word	0x40023800

08000d2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	@ 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a19      	ldr	r2, [pc, #100]	@ (8000db0 <HAL_I2C_MspInit+0x84>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d12b      	bne.n	8000da6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <HAL_I2C_MspInit+0x88>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	4a17      	ldr	r2, [pc, #92]	@ (8000db4 <HAL_I2C_MspInit+0x88>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5e:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <HAL_I2C_MspInit+0x88>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d6a:	23c0      	movs	r3, #192	@ 0xc0
 8000d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d6e:	2312      	movs	r3, #18
 8000d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	480c      	ldr	r0, [pc, #48]	@ (8000db8 <HAL_I2C_MspInit+0x8c>)
 8000d86:	f000 fa7f 	bl	8001288 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <HAL_I2C_MspInit+0x88>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d92:	4a08      	ldr	r2, [pc, #32]	@ (8000db4 <HAL_I2C_MspInit+0x88>)
 8000d94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9a:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <HAL_I2C_MspInit+0x88>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	@ 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40005400 	.word	0x40005400
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020400 	.word	0x40020400

08000dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	@ 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a19      	ldr	r2, [pc, #100]	@ (8000e40 <HAL_UART_MspInit+0x84>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d12b      	bne.n	8000e36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	4b18      	ldr	r3, [pc, #96]	@ (8000e44 <HAL_UART_MspInit+0x88>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de6:	4a17      	ldr	r2, [pc, #92]	@ (8000e44 <HAL_UART_MspInit+0x88>)
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dee:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <HAL_UART_MspInit+0x88>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <HAL_UART_MspInit+0x88>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	4a10      	ldr	r2, [pc, #64]	@ (8000e44 <HAL_UART_MspInit+0x88>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e44 <HAL_UART_MspInit+0x88>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e16:	230c      	movs	r3, #12
 8000e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e26:	2307      	movs	r3, #7
 8000e28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4805      	ldr	r0, [pc, #20]	@ (8000e48 <HAL_UART_MspInit+0x8c>)
 8000e32:	f000 fa29 	bl	8001288 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e36:	bf00      	nop
 8000e38:	3728      	adds	r7, #40	@ 0x28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40004400 	.word	0x40004400
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40020000 	.word	0x40020000

08000e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <NMI_Handler+0x4>

08000e54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <HardFault_Handler+0x4>

08000e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <MemManage_Handler+0x4>

08000e64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <BusFault_Handler+0x4>

08000e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <UsageFault_Handler+0x4>

08000e74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea2:	f000 f8c7 	bl	8001034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb4:	4a14      	ldr	r2, [pc, #80]	@ (8000f08 <_sbrk+0x5c>)
 8000eb6:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <_sbrk+0x60>)
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec0:	4b13      	ldr	r3, [pc, #76]	@ (8000f10 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d102      	bne.n	8000ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <_sbrk+0x64>)
 8000eca:	4a12      	ldr	r2, [pc, #72]	@ (8000f14 <_sbrk+0x68>)
 8000ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ece:	4b10      	ldr	r3, [pc, #64]	@ (8000f10 <_sbrk+0x64>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d207      	bcs.n	8000eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000edc:	f002 fcfa 	bl	80038d4 <__errno>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eea:	e009      	b.n	8000f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eec:	4b08      	ldr	r3, [pc, #32]	@ (8000f10 <_sbrk+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef2:	4b07      	ldr	r3, [pc, #28]	@ (8000f10 <_sbrk+0x64>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	4a05      	ldr	r2, [pc, #20]	@ (8000f10 <_sbrk+0x64>)
 8000efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000efe:	68fb      	ldr	r3, [r7, #12]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20018000 	.word	0x20018000
 8000f0c:	00000400 	.word	0x00000400
 8000f10:	2000015c 	.word	0x2000015c
 8000f14:	200002b0 	.word	0x200002b0

08000f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <SystemInit+0x20>)
 8000f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f22:	4a05      	ldr	r2, [pc, #20]	@ (8000f38 <SystemInit+0x20>)
 8000f24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f40:	f7ff ffea 	bl	8000f18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f44:	480c      	ldr	r0, [pc, #48]	@ (8000f78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f46:	490d      	ldr	r1, [pc, #52]	@ (8000f7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f48:	4a0d      	ldr	r2, [pc, #52]	@ (8000f80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f4c:	e002      	b.n	8000f54 <LoopCopyDataInit>

08000f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f52:	3304      	adds	r3, #4

08000f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f58:	d3f9      	bcc.n	8000f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f60:	e001      	b.n	8000f66 <LoopFillZerobss>

08000f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f64:	3204      	adds	r2, #4

08000f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f68:	d3fb      	bcc.n	8000f62 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f002 fcb9 	bl	80038e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6e:	f7ff fc13 	bl	8000798 <main>
  bx  lr    
 8000f72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f7c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000f80:	08004410 	.word	0x08004410
  ldr r2, =_sbss
 8000f84:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000f88:	200002ac 	.word	0x200002ac

08000f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC_IRQHandler>
	...

08000f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f94:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd0 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd0 <HAL_Init+0x40>)
 8000f9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd0 <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <HAL_Init+0x40>)
 8000fa6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fac:	4b08      	ldr	r3, [pc, #32]	@ (8000fd0 <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a07      	ldr	r2, [pc, #28]	@ (8000fd0 <HAL_Init+0x40>)
 8000fb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 f931 	bl	8001220 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f000 f808 	bl	8000fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc4:	f7ff fe8a 	bl	8000cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023c00 	.word	0x40023c00

08000fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <HAL_InitTick+0x54>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b12      	ldr	r3, [pc, #72]	@ (800102c <HAL_InitTick+0x58>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f93b 	bl	800126e <HAL_SYSTICK_Config>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00e      	b.n	8001020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b0f      	cmp	r3, #15
 8001006:	d80a      	bhi.n	800101e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001008:	2200      	movs	r2, #0
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f000 f911 	bl	8001236 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001014:	4a06      	ldr	r2, [pc, #24]	@ (8001030 <HAL_InitTick+0x5c>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	e000      	b.n	8001020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000004 	.word	0x20000004
 800102c:	2000000c 	.word	0x2000000c
 8001030:	20000008 	.word	0x20000008

08001034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <HAL_IncTick+0x20>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <HAL_IncTick+0x24>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4a04      	ldr	r2, [pc, #16]	@ (8001058 <HAL_IncTick+0x24>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	2000000c 	.word	0x2000000c
 8001058:	20000160 	.word	0x20000160

0800105c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return uwTick;
 8001060:	4b03      	ldr	r3, [pc, #12]	@ (8001070 <HAL_GetTick+0x14>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000160 	.word	0x20000160

08001074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800107c:	f7ff ffee 	bl	800105c <HAL_GetTick>
 8001080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108c:	d005      	beq.n	800109a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108e:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <HAL_Delay+0x44>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4413      	add	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800109a:	bf00      	nop
 800109c:	f7ff ffde 	bl	800105c <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d8f7      	bhi.n	800109c <HAL_Delay+0x28>
  {
  }
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2000000c 	.word	0x2000000c

080010bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010d8:	4013      	ands	r3, r2
 80010da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ee:	4a04      	ldr	r2, [pc, #16]	@ (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	60d3      	str	r3, [r2, #12]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001108:	4b04      	ldr	r3, [pc, #16]	@ (800111c <__NVIC_GetPriorityGrouping+0x18>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	f003 0307 	and.w	r3, r3, #7
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db0a      	blt.n	800114a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	490c      	ldr	r1, [pc, #48]	@ (800116c <__NVIC_SetPriority+0x4c>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	440b      	add	r3, r1
 8001144:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001148:	e00a      	b.n	8001160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4908      	ldr	r1, [pc, #32]	@ (8001170 <__NVIC_SetPriority+0x50>)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	3b04      	subs	r3, #4
 8001158:	0112      	lsls	r2, r2, #4
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	440b      	add	r3, r1
 800115e:	761a      	strb	r2, [r3, #24]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	@ 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f1c3 0307 	rsb	r3, r3, #7
 800118e:	2b04      	cmp	r3, #4
 8001190:	bf28      	it	cs
 8001192:	2304      	movcs	r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3304      	adds	r3, #4
 800119a:	2b06      	cmp	r3, #6
 800119c:	d902      	bls.n	80011a4 <NVIC_EncodePriority+0x30>
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3b03      	subs	r3, #3
 80011a2:	e000      	b.n	80011a6 <NVIC_EncodePriority+0x32>
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43da      	mvns	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	401a      	ands	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011bc:	f04f 31ff 	mov.w	r1, #4294967295
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43d9      	mvns	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	4313      	orrs	r3, r2
         );
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3724      	adds	r7, #36	@ 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011ec:	d301      	bcc.n	80011f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00f      	b.n	8001212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f2:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <SysTick_Config+0x40>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fa:	210f      	movs	r1, #15
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	f7ff ff8e 	bl	8001120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001204:	4b05      	ldr	r3, [pc, #20]	@ (800121c <SysTick_Config+0x40>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120a:	4b04      	ldr	r3, [pc, #16]	@ (800121c <SysTick_Config+0x40>)
 800120c:	2207      	movs	r2, #7
 800120e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	e000e010 	.word	0xe000e010

08001220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff47 	bl	80010bc <__NVIC_SetPriorityGrouping>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001248:	f7ff ff5c 	bl	8001104 <__NVIC_GetPriorityGrouping>
 800124c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	68b9      	ldr	r1, [r7, #8]
 8001252:	6978      	ldr	r0, [r7, #20]
 8001254:	f7ff ff8e 	bl	8001174 <NVIC_EncodePriority>
 8001258:	4602      	mov	r2, r0
 800125a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff5d 	bl	8001120 <__NVIC_SetPriority>
}
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ffb0 	bl	80011dc <SysTick_Config>
 800127c:	4603      	mov	r3, r0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	@ 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
 80012a2:	e159      	b.n	8001558 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012a4:	2201      	movs	r2, #1
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	429a      	cmp	r2, r3
 80012be:	f040 8148 	bne.w	8001552 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 0303 	and.w	r3, r3, #3
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d005      	beq.n	80012da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d130      	bne.n	800133c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	2203      	movs	r2, #3
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	68da      	ldr	r2, [r3, #12]
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001310:	2201      	movs	r2, #1
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	091b      	lsrs	r3, r3, #4
 8001326:	f003 0201 	and.w	r2, r3, #1
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	2b03      	cmp	r3, #3
 8001346:	d017      	beq.n	8001378 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	2203      	movs	r2, #3
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d123      	bne.n	80013cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	08da      	lsrs	r2, r3, #3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3208      	adds	r2, #8
 800138c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	220f      	movs	r2, #15
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	691a      	ldr	r2, [r3, #16]
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	08da      	lsrs	r2, r3, #3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3208      	adds	r2, #8
 80013c6:	69b9      	ldr	r1, [r7, #24]
 80013c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	2203      	movs	r2, #3
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0203 	and.w	r2, r3, #3
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 80a2 	beq.w	8001552 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b57      	ldr	r3, [pc, #348]	@ (8001570 <HAL_GPIO_Init+0x2e8>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001416:	4a56      	ldr	r2, [pc, #344]	@ (8001570 <HAL_GPIO_Init+0x2e8>)
 8001418:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800141c:	6453      	str	r3, [r2, #68]	@ 0x44
 800141e:	4b54      	ldr	r3, [pc, #336]	@ (8001570 <HAL_GPIO_Init+0x2e8>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001422:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800142a:	4a52      	ldr	r2, [pc, #328]	@ (8001574 <HAL_GPIO_Init+0x2ec>)
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	089b      	lsrs	r3, r3, #2
 8001430:	3302      	adds	r3, #2
 8001432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	220f      	movs	r2, #15
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a49      	ldr	r2, [pc, #292]	@ (8001578 <HAL_GPIO_Init+0x2f0>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d019      	beq.n	800148a <HAL_GPIO_Init+0x202>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a48      	ldr	r2, [pc, #288]	@ (800157c <HAL_GPIO_Init+0x2f4>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d013      	beq.n	8001486 <HAL_GPIO_Init+0x1fe>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a47      	ldr	r2, [pc, #284]	@ (8001580 <HAL_GPIO_Init+0x2f8>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d00d      	beq.n	8001482 <HAL_GPIO_Init+0x1fa>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a46      	ldr	r2, [pc, #280]	@ (8001584 <HAL_GPIO_Init+0x2fc>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d007      	beq.n	800147e <HAL_GPIO_Init+0x1f6>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a45      	ldr	r2, [pc, #276]	@ (8001588 <HAL_GPIO_Init+0x300>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d101      	bne.n	800147a <HAL_GPIO_Init+0x1f2>
 8001476:	2304      	movs	r3, #4
 8001478:	e008      	b.n	800148c <HAL_GPIO_Init+0x204>
 800147a:	2307      	movs	r3, #7
 800147c:	e006      	b.n	800148c <HAL_GPIO_Init+0x204>
 800147e:	2303      	movs	r3, #3
 8001480:	e004      	b.n	800148c <HAL_GPIO_Init+0x204>
 8001482:	2302      	movs	r3, #2
 8001484:	e002      	b.n	800148c <HAL_GPIO_Init+0x204>
 8001486:	2301      	movs	r3, #1
 8001488:	e000      	b.n	800148c <HAL_GPIO_Init+0x204>
 800148a:	2300      	movs	r3, #0
 800148c:	69fa      	ldr	r2, [r7, #28]
 800148e:	f002 0203 	and.w	r2, r2, #3
 8001492:	0092      	lsls	r2, r2, #2
 8001494:	4093      	lsls	r3, r2
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800149c:	4935      	ldr	r1, [pc, #212]	@ (8001574 <HAL_GPIO_Init+0x2ec>)
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	089b      	lsrs	r3, r3, #2
 80014a2:	3302      	adds	r3, #2
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014aa:	4b38      	ldr	r3, [pc, #224]	@ (800158c <HAL_GPIO_Init+0x304>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ce:	4a2f      	ldr	r2, [pc, #188]	@ (800158c <HAL_GPIO_Init+0x304>)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014d4:	4b2d      	ldr	r3, [pc, #180]	@ (800158c <HAL_GPIO_Init+0x304>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014f8:	4a24      	ldr	r2, [pc, #144]	@ (800158c <HAL_GPIO_Init+0x304>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014fe:	4b23      	ldr	r3, [pc, #140]	@ (800158c <HAL_GPIO_Init+0x304>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001522:	4a1a      	ldr	r2, [pc, #104]	@ (800158c <HAL_GPIO_Init+0x304>)
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001528:	4b18      	ldr	r3, [pc, #96]	@ (800158c <HAL_GPIO_Init+0x304>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800154c:	4a0f      	ldr	r2, [pc, #60]	@ (800158c <HAL_GPIO_Init+0x304>)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3301      	adds	r3, #1
 8001556:	61fb      	str	r3, [r7, #28]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	2b0f      	cmp	r3, #15
 800155c:	f67f aea2 	bls.w	80012a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	3724      	adds	r7, #36	@ 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	40013800 	.word	0x40013800
 8001578:	40020000 	.word	0x40020000
 800157c:	40020400 	.word	0x40020400
 8001580:	40020800 	.word	0x40020800
 8001584:	40020c00 	.word	0x40020c00
 8001588:	40021000 	.word	0x40021000
 800158c:	40013c00 	.word	0x40013c00

08001590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
 800159c:	4613      	mov	r3, r2
 800159e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015a0:	787b      	ldrb	r3, [r7, #1]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015a6:	887a      	ldrh	r2, [r7, #2]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015ac:	e003      	b.n	80015b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ae:	887b      	ldrh	r3, [r7, #2]
 80015b0:	041a      	lsls	r2, r3, #16
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	619a      	str	r2, [r3, #24]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
	...

080015c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e12b      	b.n	800182e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d106      	bne.n	80015f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff fb9e 	bl	8000d2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2224      	movs	r2, #36	@ 0x24
 80015f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 0201 	bic.w	r2, r2, #1
 8001606:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001616:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001626:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001628:	f001 fc60 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 800162c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	4a81      	ldr	r2, [pc, #516]	@ (8001838 <HAL_I2C_Init+0x274>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d807      	bhi.n	8001648 <HAL_I2C_Init+0x84>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4a80      	ldr	r2, [pc, #512]	@ (800183c <HAL_I2C_Init+0x278>)
 800163c:	4293      	cmp	r3, r2
 800163e:	bf94      	ite	ls
 8001640:	2301      	movls	r3, #1
 8001642:	2300      	movhi	r3, #0
 8001644:	b2db      	uxtb	r3, r3
 8001646:	e006      	b.n	8001656 <HAL_I2C_Init+0x92>
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4a7d      	ldr	r2, [pc, #500]	@ (8001840 <HAL_I2C_Init+0x27c>)
 800164c:	4293      	cmp	r3, r2
 800164e:	bf94      	ite	ls
 8001650:	2301      	movls	r3, #1
 8001652:	2300      	movhi	r3, #0
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e0e7      	b.n	800182e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4a78      	ldr	r2, [pc, #480]	@ (8001844 <HAL_I2C_Init+0x280>)
 8001662:	fba2 2303 	umull	r2, r3, r2, r3
 8001666:	0c9b      	lsrs	r3, r3, #18
 8001668:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	430a      	orrs	r2, r1
 800167c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	4a6a      	ldr	r2, [pc, #424]	@ (8001838 <HAL_I2C_Init+0x274>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d802      	bhi.n	8001698 <HAL_I2C_Init+0xd4>
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	3301      	adds	r3, #1
 8001696:	e009      	b.n	80016ac <HAL_I2C_Init+0xe8>
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800169e:	fb02 f303 	mul.w	r3, r2, r3
 80016a2:	4a69      	ldr	r2, [pc, #420]	@ (8001848 <HAL_I2C_Init+0x284>)
 80016a4:	fba2 2303 	umull	r2, r3, r2, r3
 80016a8:	099b      	lsrs	r3, r3, #6
 80016aa:	3301      	adds	r3, #1
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6812      	ldr	r2, [r2, #0]
 80016b0:	430b      	orrs	r3, r1
 80016b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80016be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	495c      	ldr	r1, [pc, #368]	@ (8001838 <HAL_I2C_Init+0x274>)
 80016c8:	428b      	cmp	r3, r1
 80016ca:	d819      	bhi.n	8001700 <HAL_I2C_Init+0x13c>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	1e59      	subs	r1, r3, #1
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80016da:	1c59      	adds	r1, r3, #1
 80016dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80016e0:	400b      	ands	r3, r1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00a      	beq.n	80016fc <HAL_I2C_Init+0x138>
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	1e59      	subs	r1, r3, #1
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80016f4:	3301      	adds	r3, #1
 80016f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016fa:	e051      	b.n	80017a0 <HAL_I2C_Init+0x1dc>
 80016fc:	2304      	movs	r3, #4
 80016fe:	e04f      	b.n	80017a0 <HAL_I2C_Init+0x1dc>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d111      	bne.n	800172c <HAL_I2C_Init+0x168>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	1e58      	subs	r0, r3, #1
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6859      	ldr	r1, [r3, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	440b      	add	r3, r1
 8001716:	fbb0 f3f3 	udiv	r3, r0, r3
 800171a:	3301      	adds	r3, #1
 800171c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001720:	2b00      	cmp	r3, #0
 8001722:	bf0c      	ite	eq
 8001724:	2301      	moveq	r3, #1
 8001726:	2300      	movne	r3, #0
 8001728:	b2db      	uxtb	r3, r3
 800172a:	e012      	b.n	8001752 <HAL_I2C_Init+0x18e>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	1e58      	subs	r0, r3, #1
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6859      	ldr	r1, [r3, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	440b      	add	r3, r1
 800173a:	0099      	lsls	r1, r3, #2
 800173c:	440b      	add	r3, r1
 800173e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001742:	3301      	adds	r3, #1
 8001744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001748:	2b00      	cmp	r3, #0
 800174a:	bf0c      	ite	eq
 800174c:	2301      	moveq	r3, #1
 800174e:	2300      	movne	r3, #0
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_I2C_Init+0x196>
 8001756:	2301      	movs	r3, #1
 8001758:	e022      	b.n	80017a0 <HAL_I2C_Init+0x1dc>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10e      	bne.n	8001780 <HAL_I2C_Init+0x1bc>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	1e58      	subs	r0, r3, #1
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6859      	ldr	r1, [r3, #4]
 800176a:	460b      	mov	r3, r1
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	440b      	add	r3, r1
 8001770:	fbb0 f3f3 	udiv	r3, r0, r3
 8001774:	3301      	adds	r3, #1
 8001776:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800177a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800177e:	e00f      	b.n	80017a0 <HAL_I2C_Init+0x1dc>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	1e58      	subs	r0, r3, #1
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6859      	ldr	r1, [r3, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	440b      	add	r3, r1
 800178e:	0099      	lsls	r1, r3, #2
 8001790:	440b      	add	r3, r1
 8001792:	fbb0 f3f3 	udiv	r3, r0, r3
 8001796:	3301      	adds	r3, #1
 8001798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800179c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017a0:	6879      	ldr	r1, [r7, #4]
 80017a2:	6809      	ldr	r1, [r1, #0]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69da      	ldr	r2, [r3, #28]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80017ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	6911      	ldr	r1, [r2, #16]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	68d2      	ldr	r2, [r2, #12]
 80017da:	4311      	orrs	r1, r2
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	430b      	orrs	r3, r1
 80017e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	695a      	ldr	r2, [r3, #20]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	431a      	orrs	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0201 	orr.w	r2, r2, #1
 800180e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2220      	movs	r2, #32
 800181a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	000186a0 	.word	0x000186a0
 800183c:	001e847f 	.word	0x001e847f
 8001840:	003d08ff 	.word	0x003d08ff
 8001844:	431bde83 	.word	0x431bde83
 8001848:	10624dd3 	.word	0x10624dd3

0800184c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b088      	sub	sp, #32
 8001850:	af02      	add	r7, sp, #8
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	4608      	mov	r0, r1
 8001856:	4611      	mov	r1, r2
 8001858:	461a      	mov	r2, r3
 800185a:	4603      	mov	r3, r0
 800185c:	817b      	strh	r3, [r7, #10]
 800185e:	460b      	mov	r3, r1
 8001860:	813b      	strh	r3, [r7, #8]
 8001862:	4613      	mov	r3, r2
 8001864:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001866:	f7ff fbf9 	bl	800105c <HAL_GetTick>
 800186a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b20      	cmp	r3, #32
 8001876:	f040 80d9 	bne.w	8001a2c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	2319      	movs	r3, #25
 8001880:	2201      	movs	r2, #1
 8001882:	496d      	ldr	r1, [pc, #436]	@ (8001a38 <HAL_I2C_Mem_Write+0x1ec>)
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f000 fc8b 	bl	80021a0 <I2C_WaitOnFlagUntilTimeout>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001890:	2302      	movs	r3, #2
 8001892:	e0cc      	b.n	8001a2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800189a:	2b01      	cmp	r3, #1
 800189c:	d101      	bne.n	80018a2 <HAL_I2C_Mem_Write+0x56>
 800189e:	2302      	movs	r3, #2
 80018a0:	e0c5      	b.n	8001a2e <HAL_I2C_Mem_Write+0x1e2>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d007      	beq.n	80018c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 0201 	orr.w	r2, r2, #1
 80018c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2221      	movs	r2, #33	@ 0x21
 80018dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2240      	movs	r2, #64	@ 0x40
 80018e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6a3a      	ldr	r2, [r7, #32]
 80018f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80018f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018fe:	b29a      	uxth	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4a4d      	ldr	r2, [pc, #308]	@ (8001a3c <HAL_I2C_Mem_Write+0x1f0>)
 8001908:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800190a:	88f8      	ldrh	r0, [r7, #6]
 800190c:	893a      	ldrh	r2, [r7, #8]
 800190e:	8979      	ldrh	r1, [r7, #10]
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	9301      	str	r3, [sp, #4]
 8001914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	4603      	mov	r3, r0
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f000 fac2 	bl	8001ea4 <I2C_RequestMemoryWrite>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d052      	beq.n	80019cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e081      	b.n	8001a2e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f000 fd50 	bl	80023d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00d      	beq.n	8001956 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	2b04      	cmp	r3, #4
 8001940:	d107      	bne.n	8001952 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001950:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e06b      	b.n	8001a2e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195a:	781a      	ldrb	r2, [r3, #0]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001970:	3b01      	subs	r3, #1
 8001972:	b29a      	uxth	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800197c:	b29b      	uxth	r3, r3
 800197e:	3b01      	subs	r3, #1
 8001980:	b29a      	uxth	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b04      	cmp	r3, #4
 8001992:	d11b      	bne.n	80019cc <HAL_I2C_Mem_Write+0x180>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001998:	2b00      	cmp	r3, #0
 800199a:	d017      	beq.n	80019cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a0:	781a      	ldrb	r2, [r3, #0]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019b6:	3b01      	subs	r3, #1
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	3b01      	subs	r3, #1
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1aa      	bne.n	800192a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f000 fd43 	bl	8002464 <I2C_WaitOnBTFFlagUntilTimeout>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00d      	beq.n	8001a00 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d107      	bne.n	80019fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e016      	b.n	8001a2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2220      	movs	r2, #32
 8001a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	e000      	b.n	8001a2e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001a2c:	2302      	movs	r3, #2
  }
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	00100002 	.word	0x00100002
 8001a3c:	ffff0000 	.word	0xffff0000

08001a40 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08c      	sub	sp, #48	@ 0x30
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	4608      	mov	r0, r1
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4603      	mov	r3, r0
 8001a50:	817b      	strh	r3, [r7, #10]
 8001a52:	460b      	mov	r3, r1
 8001a54:	813b      	strh	r3, [r7, #8]
 8001a56:	4613      	mov	r3, r2
 8001a58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a5a:	f7ff faff 	bl	800105c <HAL_GetTick>
 8001a5e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b20      	cmp	r3, #32
 8001a6a:	f040 8214 	bne.w	8001e96 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	2319      	movs	r3, #25
 8001a74:	2201      	movs	r2, #1
 8001a76:	497b      	ldr	r1, [pc, #492]	@ (8001c64 <HAL_I2C_Mem_Read+0x224>)
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f000 fb91 	bl	80021a0 <I2C_WaitOnFlagUntilTimeout>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001a84:	2302      	movs	r3, #2
 8001a86:	e207      	b.n	8001e98 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d101      	bne.n	8001a96 <HAL_I2C_Mem_Read+0x56>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e200      	b.n	8001e98 <HAL_I2C_Mem_Read+0x458>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d007      	beq.n	8001abc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0201 	orr.w	r2, r2, #1
 8001aba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001aca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2222      	movs	r2, #34	@ 0x22
 8001ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2240      	movs	r2, #64	@ 0x40
 8001ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ae6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001aec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4a5b      	ldr	r2, [pc, #364]	@ (8001c68 <HAL_I2C_Mem_Read+0x228>)
 8001afc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001afe:	88f8      	ldrh	r0, [r7, #6]
 8001b00:	893a      	ldrh	r2, [r7, #8]
 8001b02:	8979      	ldrh	r1, [r7, #10]
 8001b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b06:	9301      	str	r3, [sp, #4]
 8001b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f000 fa5e 	bl	8001fd0 <I2C_RequestMemoryRead>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e1bc      	b.n	8001e98 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d113      	bne.n	8001b4e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b26:	2300      	movs	r3, #0
 8001b28:	623b      	str	r3, [r7, #32]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	623b      	str	r3, [r7, #32]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	623b      	str	r3, [r7, #32]
 8001b3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	e190      	b.n	8001e70 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d11b      	bne.n	8001b8e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	61fb      	str	r3, [r7, #28]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	e170      	b.n	8001e70 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d11b      	bne.n	8001bce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ba4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	61bb      	str	r3, [r7, #24]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	61bb      	str	r3, [r7, #24]
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	e150      	b.n	8001e70 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001be4:	e144      	b.n	8001e70 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	f200 80f1 	bhi.w	8001dd2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d123      	bne.n	8001c40 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bfa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 fc79 	bl	80024f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e145      	b.n	8001e98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	691a      	ldr	r2, [r3, #16]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	3b01      	subs	r3, #1
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001c3e:	e117      	b.n	8001e70 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d14e      	bne.n	8001ce6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c4e:	2200      	movs	r2, #0
 8001c50:	4906      	ldr	r1, [pc, #24]	@ (8001c6c <HAL_I2C_Mem_Read+0x22c>)
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f000 faa4 	bl	80021a0 <I2C_WaitOnFlagUntilTimeout>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d008      	beq.n	8001c70 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e11a      	b.n	8001e98 <HAL_I2C_Mem_Read+0x458>
 8001c62:	bf00      	nop
 8001c64:	00100002 	.word	0x00100002
 8001c68:	ffff0000 	.word	0xffff0000
 8001c6c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	691a      	ldr	r2, [r3, #16]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c92:	1c5a      	adds	r2, r3, #1
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	3b01      	subs	r3, #1
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	691a      	ldr	r2, [r3, #16]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ce4:	e0c4      	b.n	8001e70 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cec:	2200      	movs	r2, #0
 8001cee:	496c      	ldr	r1, [pc, #432]	@ (8001ea0 <HAL_I2C_Mem_Read+0x460>)
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f000 fa55 	bl	80021a0 <I2C_WaitOnFlagUntilTimeout>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e0cb      	b.n	8001e98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	691a      	ldr	r2, [r3, #16]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d22:	1c5a      	adds	r2, r3, #1
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d48:	2200      	movs	r2, #0
 8001d4a:	4955      	ldr	r1, [pc, #340]	@ (8001ea0 <HAL_I2C_Mem_Read+0x460>)
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 fa27 	bl	80021a0 <I2C_WaitOnFlagUntilTimeout>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e09d      	b.n	8001e98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691a      	ldr	r2, [r3, #16]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	3b01      	subs	r3, #1
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	691a      	ldr	r2, [r3, #16]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001dd0:	e04e      	b.n	8001e70 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dd4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f000 fb8c 	bl	80024f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e058      	b.n	8001e98 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e02:	3b01      	subs	r3, #1
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	3b01      	subs	r3, #1
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d124      	bne.n	8001e70 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d107      	bne.n	8001e3e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e3c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f47f aeb6 	bne.w	8001be6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	e000      	b.n	8001e98 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001e96:	2302      	movs	r3, #2
  }
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3728      	adds	r7, #40	@ 0x28
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	00010004 	.word	0x00010004

08001ea4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af02      	add	r7, sp, #8
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	4608      	mov	r0, r1
 8001eae:	4611      	mov	r1, r2
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	817b      	strh	r3, [r7, #10]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	813b      	strh	r3, [r7, #8]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ecc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 f960 	bl	80021a0 <I2C_WaitOnFlagUntilTimeout>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00d      	beq.n	8001f02 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ef4:	d103      	bne.n	8001efe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001efc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e05f      	b.n	8001fc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f02:	897b      	ldrh	r3, [r7, #10]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	461a      	mov	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f14:	6a3a      	ldr	r2, [r7, #32]
 8001f16:	492d      	ldr	r1, [pc, #180]	@ (8001fcc <I2C_RequestMemoryWrite+0x128>)
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f000 f9bb 	bl	8002294 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e04c      	b.n	8001fc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f40:	6a39      	ldr	r1, [r7, #32]
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 fa46 	bl	80023d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00d      	beq.n	8001f6a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d107      	bne.n	8001f66 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e02b      	b.n	8001fc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f6a:	88fb      	ldrh	r3, [r7, #6]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d105      	bne.n	8001f7c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f70:	893b      	ldrh	r3, [r7, #8]
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	611a      	str	r2, [r3, #16]
 8001f7a:	e021      	b.n	8001fc0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f7c:	893b      	ldrh	r3, [r7, #8]
 8001f7e:	0a1b      	lsrs	r3, r3, #8
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f8c:	6a39      	ldr	r1, [r7, #32]
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 fa20 	bl	80023d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00d      	beq.n	8001fb6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d107      	bne.n	8001fb2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e005      	b.n	8001fc2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fb6:	893b      	ldrh	r3, [r7, #8]
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	00010002 	.word	0x00010002

08001fd0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af02      	add	r7, sp, #8
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	4608      	mov	r0, r1
 8001fda:	4611      	mov	r1, r2
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4603      	mov	r3, r0
 8001fe0:	817b      	strh	r3, [r7, #10]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	813b      	strh	r3, [r7, #8]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ff8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002008:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800200a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	6a3b      	ldr	r3, [r7, #32]
 8002010:	2200      	movs	r2, #0
 8002012:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 f8c2 	bl	80021a0 <I2C_WaitOnFlagUntilTimeout>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00d      	beq.n	800203e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800202c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002030:	d103      	bne.n	800203a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002038:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e0aa      	b.n	8002194 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800203e:	897b      	ldrh	r3, [r7, #10]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	461a      	mov	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800204c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002050:	6a3a      	ldr	r2, [r7, #32]
 8002052:	4952      	ldr	r1, [pc, #328]	@ (800219c <I2C_RequestMemoryRead+0x1cc>)
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 f91d 	bl	8002294 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e097      	b.n	8002194 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800207a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800207c:	6a39      	ldr	r1, [r7, #32]
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 f9a8 	bl	80023d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00d      	beq.n	80020a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	2b04      	cmp	r3, #4
 8002090:	d107      	bne.n	80020a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e076      	b.n	8002194 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020a6:	88fb      	ldrh	r3, [r7, #6]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d105      	bne.n	80020b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020ac:	893b      	ldrh	r3, [r7, #8]
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	611a      	str	r2, [r3, #16]
 80020b6:	e021      	b.n	80020fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80020b8:	893b      	ldrh	r3, [r7, #8]
 80020ba:	0a1b      	lsrs	r3, r3, #8
 80020bc:	b29b      	uxth	r3, r3
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020c8:	6a39      	ldr	r1, [r7, #32]
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 f982 	bl	80023d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00d      	beq.n	80020f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d107      	bne.n	80020ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e050      	b.n	8002194 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020f2:	893b      	ldrh	r3, [r7, #8]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020fe:	6a39      	ldr	r1, [r7, #32]
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 f967 	bl	80023d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00d      	beq.n	8002128 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002110:	2b04      	cmp	r3, #4
 8002112:	d107      	bne.n	8002124 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002122:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e035      	b.n	8002194 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002136:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	6a3b      	ldr	r3, [r7, #32]
 800213e:	2200      	movs	r2, #0
 8002140:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f000 f82b 	bl	80021a0 <I2C_WaitOnFlagUntilTimeout>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00d      	beq.n	800216c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800215a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800215e:	d103      	bne.n	8002168 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002166:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e013      	b.n	8002194 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800216c:	897b      	ldrh	r3, [r7, #10]
 800216e:	b2db      	uxtb	r3, r3
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	b2da      	uxtb	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800217c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217e:	6a3a      	ldr	r2, [r7, #32]
 8002180:	4906      	ldr	r1, [pc, #24]	@ (800219c <I2C_RequestMemoryRead+0x1cc>)
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 f886 	bl	8002294 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	00010002 	.word	0x00010002

080021a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	603b      	str	r3, [r7, #0]
 80021ac:	4613      	mov	r3, r2
 80021ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021b0:	e048      	b.n	8002244 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b8:	d044      	beq.n	8002244 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ba:	f7fe ff4f 	bl	800105c <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d302      	bcc.n	80021d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d139      	bne.n	8002244 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	0c1b      	lsrs	r3, r3, #16
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d10d      	bne.n	80021f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	43da      	mvns	r2, r3
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	4013      	ands	r3, r2
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	bf0c      	ite	eq
 80021ec:	2301      	moveq	r3, #1
 80021ee:	2300      	movne	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	461a      	mov	r2, r3
 80021f4:	e00c      	b.n	8002210 <I2C_WaitOnFlagUntilTimeout+0x70>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	43da      	mvns	r2, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	4013      	ands	r3, r2
 8002202:	b29b      	uxth	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	bf0c      	ite	eq
 8002208:	2301      	moveq	r3, #1
 800220a:	2300      	movne	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	461a      	mov	r2, r3
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	429a      	cmp	r2, r3
 8002214:	d116      	bne.n	8002244 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2220      	movs	r2, #32
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002230:	f043 0220 	orr.w	r2, r3, #32
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e023      	b.n	800228c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	0c1b      	lsrs	r3, r3, #16
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b01      	cmp	r3, #1
 800224c:	d10d      	bne.n	800226a <I2C_WaitOnFlagUntilTimeout+0xca>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	43da      	mvns	r2, r3
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	4013      	ands	r3, r2
 800225a:	b29b      	uxth	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	bf0c      	ite	eq
 8002260:	2301      	moveq	r3, #1
 8002262:	2300      	movne	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	461a      	mov	r2, r3
 8002268:	e00c      	b.n	8002284 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	43da      	mvns	r2, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	4013      	ands	r3, r2
 8002276:	b29b      	uxth	r3, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	bf0c      	ite	eq
 800227c:	2301      	moveq	r3, #1
 800227e:	2300      	movne	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	461a      	mov	r2, r3
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	429a      	cmp	r2, r3
 8002288:	d093      	beq.n	80021b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
 80022a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022a2:	e071      	b.n	8002388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022b2:	d123      	bne.n	80022fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80022cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2220      	movs	r2, #32
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e8:	f043 0204 	orr.w	r2, r3, #4
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e067      	b.n	80023cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002302:	d041      	beq.n	8002388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002304:	f7fe feaa 	bl	800105c <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	429a      	cmp	r2, r3
 8002312:	d302      	bcc.n	800231a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d136      	bne.n	8002388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	0c1b      	lsrs	r3, r3, #16
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b01      	cmp	r3, #1
 8002322:	d10c      	bne.n	800233e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	43da      	mvns	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	4013      	ands	r3, r2
 8002330:	b29b      	uxth	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	bf14      	ite	ne
 8002336:	2301      	movne	r3, #1
 8002338:	2300      	moveq	r3, #0
 800233a:	b2db      	uxtb	r3, r3
 800233c:	e00b      	b.n	8002356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	43da      	mvns	r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	4013      	ands	r3, r2
 800234a:	b29b      	uxth	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	bf14      	ite	ne
 8002350:	2301      	movne	r3, #1
 8002352:	2300      	moveq	r3, #0
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d016      	beq.n	8002388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002374:	f043 0220 	orr.w	r2, r3, #32
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e021      	b.n	80023cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	0c1b      	lsrs	r3, r3, #16
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b01      	cmp	r3, #1
 8002390:	d10c      	bne.n	80023ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	43da      	mvns	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	4013      	ands	r3, r2
 800239e:	b29b      	uxth	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	bf14      	ite	ne
 80023a4:	2301      	movne	r3, #1
 80023a6:	2300      	moveq	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	e00b      	b.n	80023c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	43da      	mvns	r2, r3
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	4013      	ands	r3, r2
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	bf14      	ite	ne
 80023be:	2301      	movne	r3, #1
 80023c0:	2300      	moveq	r3, #0
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f47f af6d 	bne.w	80022a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023e0:	e034      	b.n	800244c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 f8e3 	bl	80025ae <I2C_IsAcknowledgeFailed>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e034      	b.n	800245c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f8:	d028      	beq.n	800244c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023fa:	f7fe fe2f 	bl	800105c <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	429a      	cmp	r2, r3
 8002408:	d302      	bcc.n	8002410 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d11d      	bne.n	800244c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800241a:	2b80      	cmp	r3, #128	@ 0x80
 800241c:	d016      	beq.n	800244c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2220      	movs	r2, #32
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002438:	f043 0220 	orr.w	r2, r3, #32
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e007      	b.n	800245c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002456:	2b80      	cmp	r3, #128	@ 0x80
 8002458:	d1c3      	bne.n	80023e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002470:	e034      	b.n	80024dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 f89b 	bl	80025ae <I2C_IsAcknowledgeFailed>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e034      	b.n	80024ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002488:	d028      	beq.n	80024dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800248a:	f7fe fde7 	bl	800105c <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	429a      	cmp	r2, r3
 8002498:	d302      	bcc.n	80024a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d11d      	bne.n	80024dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d016      	beq.n	80024dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2220      	movs	r2, #32
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c8:	f043 0220 	orr.w	r2, r3, #32
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e007      	b.n	80024ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	f003 0304 	and.w	r3, r3, #4
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d1c3      	bne.n	8002472 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002500:	e049      	b.n	8002596 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	f003 0310 	and.w	r3, r3, #16
 800250c:	2b10      	cmp	r3, #16
 800250e:	d119      	bne.n	8002544 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f06f 0210 	mvn.w	r2, #16
 8002518:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2220      	movs	r2, #32
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e030      	b.n	80025a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002544:	f7fe fd8a 	bl	800105c <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	429a      	cmp	r2, r3
 8002552:	d302      	bcc.n	800255a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d11d      	bne.n	8002596 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002564:	2b40      	cmp	r3, #64	@ 0x40
 8002566:	d016      	beq.n	8002596 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002582:	f043 0220 	orr.w	r2, r3, #32
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e007      	b.n	80025a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025a0:	2b40      	cmp	r3, #64	@ 0x40
 80025a2:	d1ae      	bne.n	8002502 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025c4:	d11b      	bne.n	80025fe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025ce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2220      	movs	r2, #32
 80025da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ea:	f043 0204 	orr.w	r2, r3, #4
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e267      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d075      	beq.n	8002716 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800262a:	4b88      	ldr	r3, [pc, #544]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b04      	cmp	r3, #4
 8002634:	d00c      	beq.n	8002650 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002636:	4b85      	ldr	r3, [pc, #532]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800263e:	2b08      	cmp	r3, #8
 8002640:	d112      	bne.n	8002668 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002642:	4b82      	ldr	r3, [pc, #520]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800264a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800264e:	d10b      	bne.n	8002668 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002650:	4b7e      	ldr	r3, [pc, #504]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d05b      	beq.n	8002714 <HAL_RCC_OscConfig+0x108>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d157      	bne.n	8002714 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e242      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002670:	d106      	bne.n	8002680 <HAL_RCC_OscConfig+0x74>
 8002672:	4b76      	ldr	r3, [pc, #472]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a75      	ldr	r2, [pc, #468]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 8002678:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	e01d      	b.n	80026bc <HAL_RCC_OscConfig+0xb0>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002688:	d10c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x98>
 800268a:	4b70      	ldr	r3, [pc, #448]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a6f      	ldr	r2, [pc, #444]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 8002690:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	4b6d      	ldr	r3, [pc, #436]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a6c      	ldr	r2, [pc, #432]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 800269c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	e00b      	b.n	80026bc <HAL_RCC_OscConfig+0xb0>
 80026a4:	4b69      	ldr	r3, [pc, #420]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a68      	ldr	r2, [pc, #416]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 80026aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	4b66      	ldr	r3, [pc, #408]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a65      	ldr	r2, [pc, #404]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 80026b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d013      	beq.n	80026ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7fe fcca 	bl	800105c <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026cc:	f7fe fcc6 	bl	800105c <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b64      	cmp	r3, #100	@ 0x64
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e207      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026de:	4b5b      	ldr	r3, [pc, #364]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0xc0>
 80026ea:	e014      	b.n	8002716 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ec:	f7fe fcb6 	bl	800105c <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f4:	f7fe fcb2 	bl	800105c <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b64      	cmp	r3, #100	@ 0x64
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e1f3      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002706:	4b51      	ldr	r3, [pc, #324]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f0      	bne.n	80026f4 <HAL_RCC_OscConfig+0xe8>
 8002712:	e000      	b.n	8002716 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d063      	beq.n	80027ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002722:	4b4a      	ldr	r3, [pc, #296]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 030c 	and.w	r3, r3, #12
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00b      	beq.n	8002746 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800272e:	4b47      	ldr	r3, [pc, #284]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002736:	2b08      	cmp	r3, #8
 8002738:	d11c      	bne.n	8002774 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800273a:	4b44      	ldr	r3, [pc, #272]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d116      	bne.n	8002774 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002746:	4b41      	ldr	r3, [pc, #260]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d005      	beq.n	800275e <HAL_RCC_OscConfig+0x152>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d001      	beq.n	800275e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e1c7      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275e:	4b3b      	ldr	r3, [pc, #236]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4937      	ldr	r1, [pc, #220]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002772:	e03a      	b.n	80027ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d020      	beq.n	80027be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800277c:	4b34      	ldr	r3, [pc, #208]	@ (8002850 <HAL_RCC_OscConfig+0x244>)
 800277e:	2201      	movs	r2, #1
 8002780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002782:	f7fe fc6b 	bl	800105c <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800278a:	f7fe fc67 	bl	800105c <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e1a8      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279c:	4b2b      	ldr	r3, [pc, #172]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a8:	4b28      	ldr	r3, [pc, #160]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4925      	ldr	r1, [pc, #148]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	600b      	str	r3, [r1, #0]
 80027bc:	e015      	b.n	80027ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027be:	4b24      	ldr	r3, [pc, #144]	@ (8002850 <HAL_RCC_OscConfig+0x244>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7fe fc4a 	bl	800105c <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027cc:	f7fe fc46 	bl	800105c <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e187      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027de:	4b1b      	ldr	r3, [pc, #108]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d036      	beq.n	8002864 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d016      	beq.n	800282c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027fe:	4b15      	ldr	r3, [pc, #84]	@ (8002854 <HAL_RCC_OscConfig+0x248>)
 8002800:	2201      	movs	r2, #1
 8002802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002804:	f7fe fc2a 	bl	800105c <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800280c:	f7fe fc26 	bl	800105c <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e167      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281e:	4b0b      	ldr	r3, [pc, #44]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 8002820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0x200>
 800282a:	e01b      	b.n	8002864 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800282c:	4b09      	ldr	r3, [pc, #36]	@ (8002854 <HAL_RCC_OscConfig+0x248>)
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002832:	f7fe fc13 	bl	800105c <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002838:	e00e      	b.n	8002858 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800283a:	f7fe fc0f 	bl	800105c <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d907      	bls.n	8002858 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e150      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
 800284c:	40023800 	.word	0x40023800
 8002850:	42470000 	.word	0x42470000
 8002854:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002858:	4b88      	ldr	r3, [pc, #544]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 800285a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1ea      	bne.n	800283a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 8097 	beq.w	80029a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002872:	2300      	movs	r3, #0
 8002874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002876:	4b81      	ldr	r3, [pc, #516]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10f      	bne.n	80028a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	4b7d      	ldr	r3, [pc, #500]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	4a7c      	ldr	r2, [pc, #496]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 800288c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002890:	6413      	str	r3, [r2, #64]	@ 0x40
 8002892:	4b7a      	ldr	r3, [pc, #488]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800289e:	2301      	movs	r3, #1
 80028a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a2:	4b77      	ldr	r3, [pc, #476]	@ (8002a80 <HAL_RCC_OscConfig+0x474>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d118      	bne.n	80028e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ae:	4b74      	ldr	r3, [pc, #464]	@ (8002a80 <HAL_RCC_OscConfig+0x474>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a73      	ldr	r2, [pc, #460]	@ (8002a80 <HAL_RCC_OscConfig+0x474>)
 80028b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ba:	f7fe fbcf 	bl	800105c <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c2:	f7fe fbcb 	bl	800105c <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e10c      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002a80 <HAL_RCC_OscConfig+0x474>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0f0      	beq.n	80028c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d106      	bne.n	80028f6 <HAL_RCC_OscConfig+0x2ea>
 80028e8:	4b64      	ldr	r3, [pc, #400]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ec:	4a63      	ldr	r2, [pc, #396]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028f4:	e01c      	b.n	8002930 <HAL_RCC_OscConfig+0x324>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b05      	cmp	r3, #5
 80028fc:	d10c      	bne.n	8002918 <HAL_RCC_OscConfig+0x30c>
 80028fe:	4b5f      	ldr	r3, [pc, #380]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002902:	4a5e      	ldr	r2, [pc, #376]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002904:	f043 0304 	orr.w	r3, r3, #4
 8002908:	6713      	str	r3, [r2, #112]	@ 0x70
 800290a:	4b5c      	ldr	r3, [pc, #368]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 800290c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800290e:	4a5b      	ldr	r2, [pc, #364]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	6713      	str	r3, [r2, #112]	@ 0x70
 8002916:	e00b      	b.n	8002930 <HAL_RCC_OscConfig+0x324>
 8002918:	4b58      	ldr	r3, [pc, #352]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 800291a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291c:	4a57      	ldr	r2, [pc, #348]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 800291e:	f023 0301 	bic.w	r3, r3, #1
 8002922:	6713      	str	r3, [r2, #112]	@ 0x70
 8002924:	4b55      	ldr	r3, [pc, #340]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002928:	4a54      	ldr	r2, [pc, #336]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 800292a:	f023 0304 	bic.w	r3, r3, #4
 800292e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d015      	beq.n	8002964 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002938:	f7fe fb90 	bl	800105c <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293e:	e00a      	b.n	8002956 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002940:	f7fe fb8c 	bl	800105c <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800294e:	4293      	cmp	r3, r2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e0cb      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002956:	4b49      	ldr	r3, [pc, #292]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0ee      	beq.n	8002940 <HAL_RCC_OscConfig+0x334>
 8002962:	e014      	b.n	800298e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002964:	f7fe fb7a 	bl	800105c <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296a:	e00a      	b.n	8002982 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800296c:	f7fe fb76 	bl	800105c <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800297a:	4293      	cmp	r3, r2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e0b5      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002982:	4b3e      	ldr	r3, [pc, #248]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1ee      	bne.n	800296c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800298e:	7dfb      	ldrb	r3, [r7, #23]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d105      	bne.n	80029a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002994:	4b39      	ldr	r3, [pc, #228]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002998:	4a38      	ldr	r2, [pc, #224]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 800299a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800299e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 80a1 	beq.w	8002aec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029aa:	4b34      	ldr	r3, [pc, #208]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d05c      	beq.n	8002a70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d141      	bne.n	8002a42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029be:	4b31      	ldr	r3, [pc, #196]	@ (8002a84 <HAL_RCC_OscConfig+0x478>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c4:	f7fe fb4a 	bl	800105c <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029cc:	f7fe fb46 	bl	800105c <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e087      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029de:	4b27      	ldr	r3, [pc, #156]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69da      	ldr	r2, [r3, #28]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f8:	019b      	lsls	r3, r3, #6
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a00:	085b      	lsrs	r3, r3, #1
 8002a02:	3b01      	subs	r3, #1
 8002a04:	041b      	lsls	r3, r3, #16
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0c:	061b      	lsls	r3, r3, #24
 8002a0e:	491b      	ldr	r1, [pc, #108]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a14:	4b1b      	ldr	r3, [pc, #108]	@ (8002a84 <HAL_RCC_OscConfig+0x478>)
 8002a16:	2201      	movs	r2, #1
 8002a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7fe fb1f 	bl	800105c <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a22:	f7fe fb1b 	bl	800105c <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e05c      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a34:	4b11      	ldr	r3, [pc, #68]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x416>
 8002a40:	e054      	b.n	8002aec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a42:	4b10      	ldr	r3, [pc, #64]	@ (8002a84 <HAL_RCC_OscConfig+0x478>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a48:	f7fe fb08 	bl	800105c <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a50:	f7fe fb04 	bl	800105c <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e045      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a62:	4b06      	ldr	r3, [pc, #24]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0x444>
 8002a6e:	e03d      	b.n	8002aec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d107      	bne.n	8002a88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e038      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40007000 	.word	0x40007000
 8002a84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a88:	4b1b      	ldr	r3, [pc, #108]	@ (8002af8 <HAL_RCC_OscConfig+0x4ec>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d028      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d121      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d11a      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ab8:	4013      	ands	r3, r2
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002abe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d111      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ace:	085b      	lsrs	r3, r3, #1
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d107      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e000      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40023800 	.word	0x40023800

08002afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0cc      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b10:	4b68      	ldr	r3, [pc, #416]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d90c      	bls.n	8002b38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	4b65      	ldr	r3, [pc, #404]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b26:	4b63      	ldr	r3, [pc, #396]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0b8      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d020      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d005      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b50:	4b59      	ldr	r3, [pc, #356]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	4a58      	ldr	r2, [pc, #352]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b68:	4b53      	ldr	r3, [pc, #332]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	4a52      	ldr	r2, [pc, #328]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b74:	4b50      	ldr	r3, [pc, #320]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	494d      	ldr	r1, [pc, #308]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d044      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d107      	bne.n	8002baa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9a:	4b47      	ldr	r3, [pc, #284]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d119      	bne.n	8002bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e07f      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d003      	beq.n	8002bba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	d107      	bne.n	8002bca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bba:	4b3f      	ldr	r3, [pc, #252]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d109      	bne.n	8002bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e06f      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bca:	4b3b      	ldr	r3, [pc, #236]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e067      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bda:	4b37      	ldr	r3, [pc, #220]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f023 0203 	bic.w	r2, r3, #3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	4934      	ldr	r1, [pc, #208]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bec:	f7fe fa36 	bl	800105c <HAL_GetTick>
 8002bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf2:	e00a      	b.n	8002c0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf4:	f7fe fa32 	bl	800105c <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e04f      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0a:	4b2b      	ldr	r3, [pc, #172]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 020c 	and.w	r2, r3, #12
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d1eb      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c1c:	4b25      	ldr	r3, [pc, #148]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d20c      	bcs.n	8002c44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2a:	4b22      	ldr	r3, [pc, #136]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c32:	4b20      	ldr	r3, [pc, #128]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e032      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d008      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c50:	4b19      	ldr	r3, [pc, #100]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4916      	ldr	r1, [pc, #88]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d009      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c6e:	4b12      	ldr	r3, [pc, #72]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	490e      	ldr	r1, [pc, #56]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c82:	f000 f821 	bl	8002cc8 <HAL_RCC_GetSysClockFreq>
 8002c86:	4602      	mov	r2, r0
 8002c88:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	091b      	lsrs	r3, r3, #4
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	490a      	ldr	r1, [pc, #40]	@ (8002cbc <HAL_RCC_ClockConfig+0x1c0>)
 8002c94:	5ccb      	ldrb	r3, [r1, r3]
 8002c96:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9a:	4a09      	ldr	r2, [pc, #36]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c9e:	4b09      	ldr	r3, [pc, #36]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fe f996 	bl	8000fd4 <HAL_InitTick>

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40023c00 	.word	0x40023c00
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	080042b4 	.word	0x080042b4
 8002cc0:	20000004 	.word	0x20000004
 8002cc4:	20000008 	.word	0x20000008

08002cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ccc:	b094      	sub	sp, #80	@ 0x50
 8002cce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cd8:	2300      	movs	r3, #0
 8002cda:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ce0:	4b79      	ldr	r3, [pc, #484]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 030c 	and.w	r3, r3, #12
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d00d      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x40>
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	f200 80e1 	bhi.w	8002eb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <HAL_RCC_GetSysClockFreq+0x34>
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d003      	beq.n	8002d02 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cfa:	e0db      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cfc:	4b73      	ldr	r3, [pc, #460]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0x204>)
 8002cfe:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002d00:	e0db      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d02:	4b73      	ldr	r3, [pc, #460]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d06:	e0d8      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d08:	4b6f      	ldr	r3, [pc, #444]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d10:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d12:	4b6d      	ldr	r3, [pc, #436]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d063      	beq.n	8002de6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1e:	4b6a      	ldr	r3, [pc, #424]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	099b      	lsrs	r3, r3, #6
 8002d24:	2200      	movs	r2, #0
 8002d26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d30:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d32:	2300      	movs	r3, #0
 8002d34:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d3a:	4622      	mov	r2, r4
 8002d3c:	462b      	mov	r3, r5
 8002d3e:	f04f 0000 	mov.w	r0, #0
 8002d42:	f04f 0100 	mov.w	r1, #0
 8002d46:	0159      	lsls	r1, r3, #5
 8002d48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d4c:	0150      	lsls	r0, r2, #5
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4621      	mov	r1, r4
 8002d54:	1a51      	subs	r1, r2, r1
 8002d56:	6139      	str	r1, [r7, #16]
 8002d58:	4629      	mov	r1, r5
 8002d5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d6c:	4659      	mov	r1, fp
 8002d6e:	018b      	lsls	r3, r1, #6
 8002d70:	4651      	mov	r1, sl
 8002d72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d76:	4651      	mov	r1, sl
 8002d78:	018a      	lsls	r2, r1, #6
 8002d7a:	4651      	mov	r1, sl
 8002d7c:	ebb2 0801 	subs.w	r8, r2, r1
 8002d80:	4659      	mov	r1, fp
 8002d82:	eb63 0901 	sbc.w	r9, r3, r1
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d9a:	4690      	mov	r8, r2
 8002d9c:	4699      	mov	r9, r3
 8002d9e:	4623      	mov	r3, r4
 8002da0:	eb18 0303 	adds.w	r3, r8, r3
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	462b      	mov	r3, r5
 8002da8:	eb49 0303 	adc.w	r3, r9, r3
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dba:	4629      	mov	r1, r5
 8002dbc:	024b      	lsls	r3, r1, #9
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	024a      	lsls	r2, r1, #9
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4619      	mov	r1, r3
 8002dcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dce:	2200      	movs	r2, #0
 8002dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002dd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002dd8:	f7fd fa52 	bl	8000280 <__aeabi_uldivmod>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4613      	mov	r3, r2
 8002de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002de4:	e058      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de6:	4b38      	ldr	r3, [pc, #224]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	099b      	lsrs	r3, r3, #6
 8002dec:	2200      	movs	r2, #0
 8002dee:	4618      	mov	r0, r3
 8002df0:	4611      	mov	r1, r2
 8002df2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002df6:	623b      	str	r3, [r7, #32]
 8002df8:	2300      	movs	r3, #0
 8002dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dfc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e00:	4642      	mov	r2, r8
 8002e02:	464b      	mov	r3, r9
 8002e04:	f04f 0000 	mov.w	r0, #0
 8002e08:	f04f 0100 	mov.w	r1, #0
 8002e0c:	0159      	lsls	r1, r3, #5
 8002e0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e12:	0150      	lsls	r0, r2, #5
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4641      	mov	r1, r8
 8002e1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e1e:	4649      	mov	r1, r9
 8002e20:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e38:	ebb2 040a 	subs.w	r4, r2, sl
 8002e3c:	eb63 050b 	sbc.w	r5, r3, fp
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	00eb      	lsls	r3, r5, #3
 8002e4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e4e:	00e2      	lsls	r2, r4, #3
 8002e50:	4614      	mov	r4, r2
 8002e52:	461d      	mov	r5, r3
 8002e54:	4643      	mov	r3, r8
 8002e56:	18e3      	adds	r3, r4, r3
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	464b      	mov	r3, r9
 8002e5c:	eb45 0303 	adc.w	r3, r5, r3
 8002e60:	607b      	str	r3, [r7, #4]
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e6e:	4629      	mov	r1, r5
 8002e70:	028b      	lsls	r3, r1, #10
 8002e72:	4621      	mov	r1, r4
 8002e74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e78:	4621      	mov	r1, r4
 8002e7a:	028a      	lsls	r2, r1, #10
 8002e7c:	4610      	mov	r0, r2
 8002e7e:	4619      	mov	r1, r3
 8002e80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e82:	2200      	movs	r2, #0
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	61fa      	str	r2, [r7, #28]
 8002e88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e8c:	f7fd f9f8 	bl	8000280 <__aeabi_uldivmod>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4613      	mov	r3, r2
 8002e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e98:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	0c1b      	lsrs	r3, r3, #16
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002ea8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002eaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eb2:	e002      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0x204>)
 8002eb6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3750      	adds	r7, #80	@ 0x50
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	00f42400 	.word	0x00f42400
 8002ed0:	007a1200 	.word	0x007a1200

08002ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed8:	4b03      	ldr	r3, [pc, #12]	@ (8002ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eda:	681b      	ldr	r3, [r3, #0]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	20000004 	.word	0x20000004

08002eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ef0:	f7ff fff0 	bl	8002ed4 <HAL_RCC_GetHCLKFreq>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	4b05      	ldr	r3, [pc, #20]	@ (8002f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	0a9b      	lsrs	r3, r3, #10
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	4903      	ldr	r1, [pc, #12]	@ (8002f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f02:	5ccb      	ldrb	r3, [r1, r3]
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	080042c4 	.word	0x080042c4

08002f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f18:	f7ff ffdc 	bl	8002ed4 <HAL_RCC_GetHCLKFreq>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	4b05      	ldr	r3, [pc, #20]	@ (8002f34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	0b5b      	lsrs	r3, r3, #13
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	4903      	ldr	r1, [pc, #12]	@ (8002f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f2a:	5ccb      	ldrb	r3, [r1, r3]
 8002f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40023800 	.word	0x40023800
 8002f38:	080042c4 	.word	0x080042c4

08002f3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e042      	b.n	8002fd4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7fd ff2a 	bl	8000dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2224      	movs	r2, #36	@ 0x24
 8002f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f973 	bl	800326c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695a      	ldr	r2, [r3, #20]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002fa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b08a      	sub	sp, #40	@ 0x28
 8002fe0:	af02      	add	r7, sp, #8
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	603b      	str	r3, [r7, #0]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d175      	bne.n	80030e8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <HAL_UART_Transmit+0x2c>
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e06e      	b.n	80030ea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2221      	movs	r2, #33	@ 0x21
 8003016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800301a:	f7fe f81f 	bl	800105c <HAL_GetTick>
 800301e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	88fa      	ldrh	r2, [r7, #6]
 8003024:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	88fa      	ldrh	r2, [r7, #6]
 800302a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003034:	d108      	bne.n	8003048 <HAL_UART_Transmit+0x6c>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d104      	bne.n	8003048 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800303e:	2300      	movs	r3, #0
 8003040:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	61bb      	str	r3, [r7, #24]
 8003046:	e003      	b.n	8003050 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800304c:	2300      	movs	r3, #0
 800304e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003050:	e02e      	b.n	80030b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2200      	movs	r2, #0
 800305a:	2180      	movs	r1, #128	@ 0x80
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 f848 	bl	80030f2 <UART_WaitOnFlagUntilTimeout>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e03a      	b.n	80030ea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10b      	bne.n	8003092 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003088:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	3302      	adds	r3, #2
 800308e:	61bb      	str	r3, [r7, #24]
 8003090:	e007      	b.n	80030a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	781a      	ldrb	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	3301      	adds	r3, #1
 80030a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1cb      	bne.n	8003052 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2200      	movs	r2, #0
 80030c2:	2140      	movs	r1, #64	@ 0x40
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f814 	bl	80030f2 <UART_WaitOnFlagUntilTimeout>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e006      	b.n	80030ea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	e000      	b.n	80030ea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80030e8:	2302      	movs	r3, #2
  }
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3720      	adds	r7, #32
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b086      	sub	sp, #24
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	603b      	str	r3, [r7, #0]
 80030fe:	4613      	mov	r3, r2
 8003100:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003102:	e03b      	b.n	800317c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310a:	d037      	beq.n	800317c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800310c:	f7fd ffa6 	bl	800105c <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	6a3a      	ldr	r2, [r7, #32]
 8003118:	429a      	cmp	r2, r3
 800311a:	d302      	bcc.n	8003122 <UART_WaitOnFlagUntilTimeout+0x30>
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e03a      	b.n	800319c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d023      	beq.n	800317c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2b80      	cmp	r3, #128	@ 0x80
 8003138:	d020      	beq.n	800317c <UART_WaitOnFlagUntilTimeout+0x8a>
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b40      	cmp	r3, #64	@ 0x40
 800313e:	d01d      	beq.n	800317c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0308 	and.w	r3, r3, #8
 800314a:	2b08      	cmp	r3, #8
 800314c:	d116      	bne.n	800317c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f81d 	bl	80031a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2208      	movs	r2, #8
 800316e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e00f      	b.n	800319c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	4013      	ands	r3, r2
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	429a      	cmp	r2, r3
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	79fb      	ldrb	r3, [r7, #7]
 8003196:	429a      	cmp	r2, r3
 8003198:	d0b4      	beq.n	8003104 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b095      	sub	sp, #84	@ 0x54
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	330c      	adds	r3, #12
 80031b2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031b6:	e853 3f00 	ldrex	r3, [r3]
 80031ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	330c      	adds	r3, #12
 80031ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031cc:	643a      	str	r2, [r7, #64]	@ 0x40
 80031ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031d4:	e841 2300 	strex	r3, r2, [r1]
 80031d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1e5      	bne.n	80031ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3314      	adds	r3, #20
 80031e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	e853 3f00 	ldrex	r3, [r3]
 80031ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f023 0301 	bic.w	r3, r3, #1
 80031f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3314      	adds	r3, #20
 80031fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003200:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003202:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003204:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003206:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003208:	e841 2300 	strex	r3, r2, [r1]
 800320c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800320e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1e5      	bne.n	80031e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003218:	2b01      	cmp	r3, #1
 800321a:	d119      	bne.n	8003250 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	330c      	adds	r3, #12
 8003222:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	e853 3f00 	ldrex	r3, [r3]
 800322a:	60bb      	str	r3, [r7, #8]
   return(result);
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f023 0310 	bic.w	r3, r3, #16
 8003232:	647b      	str	r3, [r7, #68]	@ 0x44
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	330c      	adds	r3, #12
 800323a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800323c:	61ba      	str	r2, [r7, #24]
 800323e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003240:	6979      	ldr	r1, [r7, #20]
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	e841 2300 	strex	r3, r2, [r1]
 8003248:	613b      	str	r3, [r7, #16]
   return(result);
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1e5      	bne.n	800321c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800325e:	bf00      	nop
 8003260:	3754      	adds	r7, #84	@ 0x54
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
	...

0800326c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800326c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003270:	b0c0      	sub	sp, #256	@ 0x100
 8003272:	af00      	add	r7, sp, #0
 8003274:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003288:	68d9      	ldr	r1, [r3, #12]
 800328a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	ea40 0301 	orr.w	r3, r0, r1
 8003294:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	431a      	orrs	r2, r3
 80032ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80032c4:	f021 010c 	bic.w	r1, r1, #12
 80032c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80032d2:	430b      	orrs	r3, r1
 80032d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80032e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e6:	6999      	ldr	r1, [r3, #24]
 80032e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	ea40 0301 	orr.w	r3, r0, r1
 80032f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	4b8f      	ldr	r3, [pc, #572]	@ (8003538 <UART_SetConfig+0x2cc>)
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d005      	beq.n	800330c <UART_SetConfig+0xa0>
 8003300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	4b8d      	ldr	r3, [pc, #564]	@ (800353c <UART_SetConfig+0x2d0>)
 8003308:	429a      	cmp	r2, r3
 800330a:	d104      	bne.n	8003316 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800330c:	f7ff fe02 	bl	8002f14 <HAL_RCC_GetPCLK2Freq>
 8003310:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003314:	e003      	b.n	800331e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003316:	f7ff fde9 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 800331a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800331e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003328:	f040 810c 	bne.w	8003544 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800332c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003330:	2200      	movs	r2, #0
 8003332:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003336:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800333a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800333e:	4622      	mov	r2, r4
 8003340:	462b      	mov	r3, r5
 8003342:	1891      	adds	r1, r2, r2
 8003344:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003346:	415b      	adcs	r3, r3
 8003348:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800334a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800334e:	4621      	mov	r1, r4
 8003350:	eb12 0801 	adds.w	r8, r2, r1
 8003354:	4629      	mov	r1, r5
 8003356:	eb43 0901 	adc.w	r9, r3, r1
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003366:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800336a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800336e:	4690      	mov	r8, r2
 8003370:	4699      	mov	r9, r3
 8003372:	4623      	mov	r3, r4
 8003374:	eb18 0303 	adds.w	r3, r8, r3
 8003378:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800337c:	462b      	mov	r3, r5
 800337e:	eb49 0303 	adc.w	r3, r9, r3
 8003382:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003392:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003396:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800339a:	460b      	mov	r3, r1
 800339c:	18db      	adds	r3, r3, r3
 800339e:	653b      	str	r3, [r7, #80]	@ 0x50
 80033a0:	4613      	mov	r3, r2
 80033a2:	eb42 0303 	adc.w	r3, r2, r3
 80033a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80033a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80033ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80033b0:	f7fc ff66 	bl	8000280 <__aeabi_uldivmod>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4b61      	ldr	r3, [pc, #388]	@ (8003540 <UART_SetConfig+0x2d4>)
 80033ba:	fba3 2302 	umull	r2, r3, r3, r2
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	011c      	lsls	r4, r3, #4
 80033c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033c6:	2200      	movs	r2, #0
 80033c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80033d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80033d4:	4642      	mov	r2, r8
 80033d6:	464b      	mov	r3, r9
 80033d8:	1891      	adds	r1, r2, r2
 80033da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80033dc:	415b      	adcs	r3, r3
 80033de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80033e4:	4641      	mov	r1, r8
 80033e6:	eb12 0a01 	adds.w	sl, r2, r1
 80033ea:	4649      	mov	r1, r9
 80033ec:	eb43 0b01 	adc.w	fp, r3, r1
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003400:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003404:	4692      	mov	sl, r2
 8003406:	469b      	mov	fp, r3
 8003408:	4643      	mov	r3, r8
 800340a:	eb1a 0303 	adds.w	r3, sl, r3
 800340e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003412:	464b      	mov	r3, r9
 8003414:	eb4b 0303 	adc.w	r3, fp, r3
 8003418:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800341c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003428:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800342c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003430:	460b      	mov	r3, r1
 8003432:	18db      	adds	r3, r3, r3
 8003434:	643b      	str	r3, [r7, #64]	@ 0x40
 8003436:	4613      	mov	r3, r2
 8003438:	eb42 0303 	adc.w	r3, r2, r3
 800343c:	647b      	str	r3, [r7, #68]	@ 0x44
 800343e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003442:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003446:	f7fc ff1b 	bl	8000280 <__aeabi_uldivmod>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4611      	mov	r1, r2
 8003450:	4b3b      	ldr	r3, [pc, #236]	@ (8003540 <UART_SetConfig+0x2d4>)
 8003452:	fba3 2301 	umull	r2, r3, r3, r1
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	2264      	movs	r2, #100	@ 0x64
 800345a:	fb02 f303 	mul.w	r3, r2, r3
 800345e:	1acb      	subs	r3, r1, r3
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003466:	4b36      	ldr	r3, [pc, #216]	@ (8003540 <UART_SetConfig+0x2d4>)
 8003468:	fba3 2302 	umull	r2, r3, r3, r2
 800346c:	095b      	lsrs	r3, r3, #5
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003474:	441c      	add	r4, r3
 8003476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800347a:	2200      	movs	r2, #0
 800347c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003480:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003484:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003488:	4642      	mov	r2, r8
 800348a:	464b      	mov	r3, r9
 800348c:	1891      	adds	r1, r2, r2
 800348e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003490:	415b      	adcs	r3, r3
 8003492:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003494:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003498:	4641      	mov	r1, r8
 800349a:	1851      	adds	r1, r2, r1
 800349c:	6339      	str	r1, [r7, #48]	@ 0x30
 800349e:	4649      	mov	r1, r9
 80034a0:	414b      	adcs	r3, r1
 80034a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80034b0:	4659      	mov	r1, fp
 80034b2:	00cb      	lsls	r3, r1, #3
 80034b4:	4651      	mov	r1, sl
 80034b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ba:	4651      	mov	r1, sl
 80034bc:	00ca      	lsls	r2, r1, #3
 80034be:	4610      	mov	r0, r2
 80034c0:	4619      	mov	r1, r3
 80034c2:	4603      	mov	r3, r0
 80034c4:	4642      	mov	r2, r8
 80034c6:	189b      	adds	r3, r3, r2
 80034c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034cc:	464b      	mov	r3, r9
 80034ce:	460a      	mov	r2, r1
 80034d0:	eb42 0303 	adc.w	r3, r2, r3
 80034d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80034e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80034e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80034ec:	460b      	mov	r3, r1
 80034ee:	18db      	adds	r3, r3, r3
 80034f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034f2:	4613      	mov	r3, r2
 80034f4:	eb42 0303 	adc.w	r3, r2, r3
 80034f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003502:	f7fc febd 	bl	8000280 <__aeabi_uldivmod>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	4b0d      	ldr	r3, [pc, #52]	@ (8003540 <UART_SetConfig+0x2d4>)
 800350c:	fba3 1302 	umull	r1, r3, r3, r2
 8003510:	095b      	lsrs	r3, r3, #5
 8003512:	2164      	movs	r1, #100	@ 0x64
 8003514:	fb01 f303 	mul.w	r3, r1, r3
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	3332      	adds	r3, #50	@ 0x32
 800351e:	4a08      	ldr	r2, [pc, #32]	@ (8003540 <UART_SetConfig+0x2d4>)
 8003520:	fba2 2303 	umull	r2, r3, r2, r3
 8003524:	095b      	lsrs	r3, r3, #5
 8003526:	f003 0207 	and.w	r2, r3, #7
 800352a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4422      	add	r2, r4
 8003532:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003534:	e106      	b.n	8003744 <UART_SetConfig+0x4d8>
 8003536:	bf00      	nop
 8003538:	40011000 	.word	0x40011000
 800353c:	40011400 	.word	0x40011400
 8003540:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003544:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003548:	2200      	movs	r2, #0
 800354a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800354e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003552:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003556:	4642      	mov	r2, r8
 8003558:	464b      	mov	r3, r9
 800355a:	1891      	adds	r1, r2, r2
 800355c:	6239      	str	r1, [r7, #32]
 800355e:	415b      	adcs	r3, r3
 8003560:	627b      	str	r3, [r7, #36]	@ 0x24
 8003562:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003566:	4641      	mov	r1, r8
 8003568:	1854      	adds	r4, r2, r1
 800356a:	4649      	mov	r1, r9
 800356c:	eb43 0501 	adc.w	r5, r3, r1
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	00eb      	lsls	r3, r5, #3
 800357a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800357e:	00e2      	lsls	r2, r4, #3
 8003580:	4614      	mov	r4, r2
 8003582:	461d      	mov	r5, r3
 8003584:	4643      	mov	r3, r8
 8003586:	18e3      	adds	r3, r4, r3
 8003588:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800358c:	464b      	mov	r3, r9
 800358e:	eb45 0303 	adc.w	r3, r5, r3
 8003592:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80035a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80035b2:	4629      	mov	r1, r5
 80035b4:	008b      	lsls	r3, r1, #2
 80035b6:	4621      	mov	r1, r4
 80035b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035bc:	4621      	mov	r1, r4
 80035be:	008a      	lsls	r2, r1, #2
 80035c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80035c4:	f7fc fe5c 	bl	8000280 <__aeabi_uldivmod>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4b60      	ldr	r3, [pc, #384]	@ (8003750 <UART_SetConfig+0x4e4>)
 80035ce:	fba3 2302 	umull	r2, r3, r3, r2
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	011c      	lsls	r4, r3, #4
 80035d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035da:	2200      	movs	r2, #0
 80035dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80035e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80035e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80035e8:	4642      	mov	r2, r8
 80035ea:	464b      	mov	r3, r9
 80035ec:	1891      	adds	r1, r2, r2
 80035ee:	61b9      	str	r1, [r7, #24]
 80035f0:	415b      	adcs	r3, r3
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035f8:	4641      	mov	r1, r8
 80035fa:	1851      	adds	r1, r2, r1
 80035fc:	6139      	str	r1, [r7, #16]
 80035fe:	4649      	mov	r1, r9
 8003600:	414b      	adcs	r3, r1
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003610:	4659      	mov	r1, fp
 8003612:	00cb      	lsls	r3, r1, #3
 8003614:	4651      	mov	r1, sl
 8003616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800361a:	4651      	mov	r1, sl
 800361c:	00ca      	lsls	r2, r1, #3
 800361e:	4610      	mov	r0, r2
 8003620:	4619      	mov	r1, r3
 8003622:	4603      	mov	r3, r0
 8003624:	4642      	mov	r2, r8
 8003626:	189b      	adds	r3, r3, r2
 8003628:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800362c:	464b      	mov	r3, r9
 800362e:	460a      	mov	r2, r1
 8003630:	eb42 0303 	adc.w	r3, r2, r3
 8003634:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003642:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003650:	4649      	mov	r1, r9
 8003652:	008b      	lsls	r3, r1, #2
 8003654:	4641      	mov	r1, r8
 8003656:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800365a:	4641      	mov	r1, r8
 800365c:	008a      	lsls	r2, r1, #2
 800365e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003662:	f7fc fe0d 	bl	8000280 <__aeabi_uldivmod>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4611      	mov	r1, r2
 800366c:	4b38      	ldr	r3, [pc, #224]	@ (8003750 <UART_SetConfig+0x4e4>)
 800366e:	fba3 2301 	umull	r2, r3, r3, r1
 8003672:	095b      	lsrs	r3, r3, #5
 8003674:	2264      	movs	r2, #100	@ 0x64
 8003676:	fb02 f303 	mul.w	r3, r2, r3
 800367a:	1acb      	subs	r3, r1, r3
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	3332      	adds	r3, #50	@ 0x32
 8003680:	4a33      	ldr	r2, [pc, #204]	@ (8003750 <UART_SetConfig+0x4e4>)
 8003682:	fba2 2303 	umull	r2, r3, r2, r3
 8003686:	095b      	lsrs	r3, r3, #5
 8003688:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800368c:	441c      	add	r4, r3
 800368e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003692:	2200      	movs	r2, #0
 8003694:	673b      	str	r3, [r7, #112]	@ 0x70
 8003696:	677a      	str	r2, [r7, #116]	@ 0x74
 8003698:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800369c:	4642      	mov	r2, r8
 800369e:	464b      	mov	r3, r9
 80036a0:	1891      	adds	r1, r2, r2
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	415b      	adcs	r3, r3
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036ac:	4641      	mov	r1, r8
 80036ae:	1851      	adds	r1, r2, r1
 80036b0:	6039      	str	r1, [r7, #0]
 80036b2:	4649      	mov	r1, r9
 80036b4:	414b      	adcs	r3, r1
 80036b6:	607b      	str	r3, [r7, #4]
 80036b8:	f04f 0200 	mov.w	r2, #0
 80036bc:	f04f 0300 	mov.w	r3, #0
 80036c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036c4:	4659      	mov	r1, fp
 80036c6:	00cb      	lsls	r3, r1, #3
 80036c8:	4651      	mov	r1, sl
 80036ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036ce:	4651      	mov	r1, sl
 80036d0:	00ca      	lsls	r2, r1, #3
 80036d2:	4610      	mov	r0, r2
 80036d4:	4619      	mov	r1, r3
 80036d6:	4603      	mov	r3, r0
 80036d8:	4642      	mov	r2, r8
 80036da:	189b      	adds	r3, r3, r2
 80036dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036de:	464b      	mov	r3, r9
 80036e0:	460a      	mov	r2, r1
 80036e2:	eb42 0303 	adc.w	r3, r2, r3
 80036e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80036f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	f04f 0300 	mov.w	r3, #0
 80036fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003700:	4649      	mov	r1, r9
 8003702:	008b      	lsls	r3, r1, #2
 8003704:	4641      	mov	r1, r8
 8003706:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800370a:	4641      	mov	r1, r8
 800370c:	008a      	lsls	r2, r1, #2
 800370e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003712:	f7fc fdb5 	bl	8000280 <__aeabi_uldivmod>
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	4b0d      	ldr	r3, [pc, #52]	@ (8003750 <UART_SetConfig+0x4e4>)
 800371c:	fba3 1302 	umull	r1, r3, r3, r2
 8003720:	095b      	lsrs	r3, r3, #5
 8003722:	2164      	movs	r1, #100	@ 0x64
 8003724:	fb01 f303 	mul.w	r3, r1, r3
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	3332      	adds	r3, #50	@ 0x32
 800372e:	4a08      	ldr	r2, [pc, #32]	@ (8003750 <UART_SetConfig+0x4e4>)
 8003730:	fba2 2303 	umull	r2, r3, r2, r3
 8003734:	095b      	lsrs	r3, r3, #5
 8003736:	f003 020f 	and.w	r2, r3, #15
 800373a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4422      	add	r2, r4
 8003742:	609a      	str	r2, [r3, #8]
}
 8003744:	bf00      	nop
 8003746:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800374a:	46bd      	mov	sp, r7
 800374c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003750:	51eb851f 	.word	0x51eb851f

08003754 <_strtol_l.constprop.0>:
 8003754:	2b24      	cmp	r3, #36	@ 0x24
 8003756:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800375a:	4686      	mov	lr, r0
 800375c:	4690      	mov	r8, r2
 800375e:	d801      	bhi.n	8003764 <_strtol_l.constprop.0+0x10>
 8003760:	2b01      	cmp	r3, #1
 8003762:	d106      	bne.n	8003772 <_strtol_l.constprop.0+0x1e>
 8003764:	f000 f8b6 	bl	80038d4 <__errno>
 8003768:	2316      	movs	r3, #22
 800376a:	6003      	str	r3, [r0, #0]
 800376c:	2000      	movs	r0, #0
 800376e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003772:	4834      	ldr	r0, [pc, #208]	@ (8003844 <_strtol_l.constprop.0+0xf0>)
 8003774:	460d      	mov	r5, r1
 8003776:	462a      	mov	r2, r5
 8003778:	f815 4b01 	ldrb.w	r4, [r5], #1
 800377c:	5d06      	ldrb	r6, [r0, r4]
 800377e:	f016 0608 	ands.w	r6, r6, #8
 8003782:	d1f8      	bne.n	8003776 <_strtol_l.constprop.0+0x22>
 8003784:	2c2d      	cmp	r4, #45	@ 0x2d
 8003786:	d12d      	bne.n	80037e4 <_strtol_l.constprop.0+0x90>
 8003788:	782c      	ldrb	r4, [r5, #0]
 800378a:	2601      	movs	r6, #1
 800378c:	1c95      	adds	r5, r2, #2
 800378e:	f033 0210 	bics.w	r2, r3, #16
 8003792:	d109      	bne.n	80037a8 <_strtol_l.constprop.0+0x54>
 8003794:	2c30      	cmp	r4, #48	@ 0x30
 8003796:	d12a      	bne.n	80037ee <_strtol_l.constprop.0+0x9a>
 8003798:	782a      	ldrb	r2, [r5, #0]
 800379a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800379e:	2a58      	cmp	r2, #88	@ 0x58
 80037a0:	d125      	bne.n	80037ee <_strtol_l.constprop.0+0x9a>
 80037a2:	786c      	ldrb	r4, [r5, #1]
 80037a4:	2310      	movs	r3, #16
 80037a6:	3502      	adds	r5, #2
 80037a8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80037ac:	f10c 3cff 	add.w	ip, ip, #4294967295
 80037b0:	2200      	movs	r2, #0
 80037b2:	fbbc f9f3 	udiv	r9, ip, r3
 80037b6:	4610      	mov	r0, r2
 80037b8:	fb03 ca19 	mls	sl, r3, r9, ip
 80037bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80037c0:	2f09      	cmp	r7, #9
 80037c2:	d81b      	bhi.n	80037fc <_strtol_l.constprop.0+0xa8>
 80037c4:	463c      	mov	r4, r7
 80037c6:	42a3      	cmp	r3, r4
 80037c8:	dd27      	ble.n	800381a <_strtol_l.constprop.0+0xc6>
 80037ca:	1c57      	adds	r7, r2, #1
 80037cc:	d007      	beq.n	80037de <_strtol_l.constprop.0+0x8a>
 80037ce:	4581      	cmp	r9, r0
 80037d0:	d320      	bcc.n	8003814 <_strtol_l.constprop.0+0xc0>
 80037d2:	d101      	bne.n	80037d8 <_strtol_l.constprop.0+0x84>
 80037d4:	45a2      	cmp	sl, r4
 80037d6:	db1d      	blt.n	8003814 <_strtol_l.constprop.0+0xc0>
 80037d8:	fb00 4003 	mla	r0, r0, r3, r4
 80037dc:	2201      	movs	r2, #1
 80037de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80037e2:	e7eb      	b.n	80037bc <_strtol_l.constprop.0+0x68>
 80037e4:	2c2b      	cmp	r4, #43	@ 0x2b
 80037e6:	bf04      	itt	eq
 80037e8:	782c      	ldrbeq	r4, [r5, #0]
 80037ea:	1c95      	addeq	r5, r2, #2
 80037ec:	e7cf      	b.n	800378e <_strtol_l.constprop.0+0x3a>
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1da      	bne.n	80037a8 <_strtol_l.constprop.0+0x54>
 80037f2:	2c30      	cmp	r4, #48	@ 0x30
 80037f4:	bf0c      	ite	eq
 80037f6:	2308      	moveq	r3, #8
 80037f8:	230a      	movne	r3, #10
 80037fa:	e7d5      	b.n	80037a8 <_strtol_l.constprop.0+0x54>
 80037fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003800:	2f19      	cmp	r7, #25
 8003802:	d801      	bhi.n	8003808 <_strtol_l.constprop.0+0xb4>
 8003804:	3c37      	subs	r4, #55	@ 0x37
 8003806:	e7de      	b.n	80037c6 <_strtol_l.constprop.0+0x72>
 8003808:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800380c:	2f19      	cmp	r7, #25
 800380e:	d804      	bhi.n	800381a <_strtol_l.constprop.0+0xc6>
 8003810:	3c57      	subs	r4, #87	@ 0x57
 8003812:	e7d8      	b.n	80037c6 <_strtol_l.constprop.0+0x72>
 8003814:	f04f 32ff 	mov.w	r2, #4294967295
 8003818:	e7e1      	b.n	80037de <_strtol_l.constprop.0+0x8a>
 800381a:	1c53      	adds	r3, r2, #1
 800381c:	d108      	bne.n	8003830 <_strtol_l.constprop.0+0xdc>
 800381e:	2322      	movs	r3, #34	@ 0x22
 8003820:	f8ce 3000 	str.w	r3, [lr]
 8003824:	4660      	mov	r0, ip
 8003826:	f1b8 0f00 	cmp.w	r8, #0
 800382a:	d0a0      	beq.n	800376e <_strtol_l.constprop.0+0x1a>
 800382c:	1e69      	subs	r1, r5, #1
 800382e:	e006      	b.n	800383e <_strtol_l.constprop.0+0xea>
 8003830:	b106      	cbz	r6, 8003834 <_strtol_l.constprop.0+0xe0>
 8003832:	4240      	negs	r0, r0
 8003834:	f1b8 0f00 	cmp.w	r8, #0
 8003838:	d099      	beq.n	800376e <_strtol_l.constprop.0+0x1a>
 800383a:	2a00      	cmp	r2, #0
 800383c:	d1f6      	bne.n	800382c <_strtol_l.constprop.0+0xd8>
 800383e:	f8c8 1000 	str.w	r1, [r8]
 8003842:	e794      	b.n	800376e <_strtol_l.constprop.0+0x1a>
 8003844:	080042cd 	.word	0x080042cd

08003848 <strtol>:
 8003848:	4613      	mov	r3, r2
 800384a:	460a      	mov	r2, r1
 800384c:	4601      	mov	r1, r0
 800384e:	4802      	ldr	r0, [pc, #8]	@ (8003858 <strtol+0x10>)
 8003850:	6800      	ldr	r0, [r0, #0]
 8003852:	f7ff bf7f 	b.w	8003754 <_strtol_l.constprop.0>
 8003856:	bf00      	nop
 8003858:	20000010 	.word	0x20000010

0800385c <sniprintf>:
 800385c:	b40c      	push	{r2, r3}
 800385e:	b530      	push	{r4, r5, lr}
 8003860:	4b17      	ldr	r3, [pc, #92]	@ (80038c0 <sniprintf+0x64>)
 8003862:	1e0c      	subs	r4, r1, #0
 8003864:	681d      	ldr	r5, [r3, #0]
 8003866:	b09d      	sub	sp, #116	@ 0x74
 8003868:	da08      	bge.n	800387c <sniprintf+0x20>
 800386a:	238b      	movs	r3, #139	@ 0x8b
 800386c:	602b      	str	r3, [r5, #0]
 800386e:	f04f 30ff 	mov.w	r0, #4294967295
 8003872:	b01d      	add	sp, #116	@ 0x74
 8003874:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003878:	b002      	add	sp, #8
 800387a:	4770      	bx	lr
 800387c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003880:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003884:	bf14      	ite	ne
 8003886:	f104 33ff 	addne.w	r3, r4, #4294967295
 800388a:	4623      	moveq	r3, r4
 800388c:	9304      	str	r3, [sp, #16]
 800388e:	9307      	str	r3, [sp, #28]
 8003890:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003894:	9002      	str	r0, [sp, #8]
 8003896:	9006      	str	r0, [sp, #24]
 8003898:	f8ad 3016 	strh.w	r3, [sp, #22]
 800389c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800389e:	ab21      	add	r3, sp, #132	@ 0x84
 80038a0:	a902      	add	r1, sp, #8
 80038a2:	4628      	mov	r0, r5
 80038a4:	9301      	str	r3, [sp, #4]
 80038a6:	f000 f995 	bl	8003bd4 <_svfiprintf_r>
 80038aa:	1c43      	adds	r3, r0, #1
 80038ac:	bfbc      	itt	lt
 80038ae:	238b      	movlt	r3, #139	@ 0x8b
 80038b0:	602b      	strlt	r3, [r5, #0]
 80038b2:	2c00      	cmp	r4, #0
 80038b4:	d0dd      	beq.n	8003872 <sniprintf+0x16>
 80038b6:	9b02      	ldr	r3, [sp, #8]
 80038b8:	2200      	movs	r2, #0
 80038ba:	701a      	strb	r2, [r3, #0]
 80038bc:	e7d9      	b.n	8003872 <sniprintf+0x16>
 80038be:	bf00      	nop
 80038c0:	20000010 	.word	0x20000010

080038c4 <memset>:
 80038c4:	4402      	add	r2, r0
 80038c6:	4603      	mov	r3, r0
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d100      	bne.n	80038ce <memset+0xa>
 80038cc:	4770      	bx	lr
 80038ce:	f803 1b01 	strb.w	r1, [r3], #1
 80038d2:	e7f9      	b.n	80038c8 <memset+0x4>

080038d4 <__errno>:
 80038d4:	4b01      	ldr	r3, [pc, #4]	@ (80038dc <__errno+0x8>)
 80038d6:	6818      	ldr	r0, [r3, #0]
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	20000010 	.word	0x20000010

080038e0 <__libc_init_array>:
 80038e0:	b570      	push	{r4, r5, r6, lr}
 80038e2:	4d0d      	ldr	r5, [pc, #52]	@ (8003918 <__libc_init_array+0x38>)
 80038e4:	4c0d      	ldr	r4, [pc, #52]	@ (800391c <__libc_init_array+0x3c>)
 80038e6:	1b64      	subs	r4, r4, r5
 80038e8:	10a4      	asrs	r4, r4, #2
 80038ea:	2600      	movs	r6, #0
 80038ec:	42a6      	cmp	r6, r4
 80038ee:	d109      	bne.n	8003904 <__libc_init_array+0x24>
 80038f0:	4d0b      	ldr	r5, [pc, #44]	@ (8003920 <__libc_init_array+0x40>)
 80038f2:	4c0c      	ldr	r4, [pc, #48]	@ (8003924 <__libc_init_array+0x44>)
 80038f4:	f000 fc66 	bl	80041c4 <_init>
 80038f8:	1b64      	subs	r4, r4, r5
 80038fa:	10a4      	asrs	r4, r4, #2
 80038fc:	2600      	movs	r6, #0
 80038fe:	42a6      	cmp	r6, r4
 8003900:	d105      	bne.n	800390e <__libc_init_array+0x2e>
 8003902:	bd70      	pop	{r4, r5, r6, pc}
 8003904:	f855 3b04 	ldr.w	r3, [r5], #4
 8003908:	4798      	blx	r3
 800390a:	3601      	adds	r6, #1
 800390c:	e7ee      	b.n	80038ec <__libc_init_array+0xc>
 800390e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003912:	4798      	blx	r3
 8003914:	3601      	adds	r6, #1
 8003916:	e7f2      	b.n	80038fe <__libc_init_array+0x1e>
 8003918:	08004408 	.word	0x08004408
 800391c:	08004408 	.word	0x08004408
 8003920:	08004408 	.word	0x08004408
 8003924:	0800440c 	.word	0x0800440c

08003928 <__retarget_lock_acquire_recursive>:
 8003928:	4770      	bx	lr

0800392a <__retarget_lock_release_recursive>:
 800392a:	4770      	bx	lr

0800392c <_free_r>:
 800392c:	b538      	push	{r3, r4, r5, lr}
 800392e:	4605      	mov	r5, r0
 8003930:	2900      	cmp	r1, #0
 8003932:	d041      	beq.n	80039b8 <_free_r+0x8c>
 8003934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003938:	1f0c      	subs	r4, r1, #4
 800393a:	2b00      	cmp	r3, #0
 800393c:	bfb8      	it	lt
 800393e:	18e4      	addlt	r4, r4, r3
 8003940:	f000 f8e0 	bl	8003b04 <__malloc_lock>
 8003944:	4a1d      	ldr	r2, [pc, #116]	@ (80039bc <_free_r+0x90>)
 8003946:	6813      	ldr	r3, [r2, #0]
 8003948:	b933      	cbnz	r3, 8003958 <_free_r+0x2c>
 800394a:	6063      	str	r3, [r4, #4]
 800394c:	6014      	str	r4, [r2, #0]
 800394e:	4628      	mov	r0, r5
 8003950:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003954:	f000 b8dc 	b.w	8003b10 <__malloc_unlock>
 8003958:	42a3      	cmp	r3, r4
 800395a:	d908      	bls.n	800396e <_free_r+0x42>
 800395c:	6820      	ldr	r0, [r4, #0]
 800395e:	1821      	adds	r1, r4, r0
 8003960:	428b      	cmp	r3, r1
 8003962:	bf01      	itttt	eq
 8003964:	6819      	ldreq	r1, [r3, #0]
 8003966:	685b      	ldreq	r3, [r3, #4]
 8003968:	1809      	addeq	r1, r1, r0
 800396a:	6021      	streq	r1, [r4, #0]
 800396c:	e7ed      	b.n	800394a <_free_r+0x1e>
 800396e:	461a      	mov	r2, r3
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	b10b      	cbz	r3, 8003978 <_free_r+0x4c>
 8003974:	42a3      	cmp	r3, r4
 8003976:	d9fa      	bls.n	800396e <_free_r+0x42>
 8003978:	6811      	ldr	r1, [r2, #0]
 800397a:	1850      	adds	r0, r2, r1
 800397c:	42a0      	cmp	r0, r4
 800397e:	d10b      	bne.n	8003998 <_free_r+0x6c>
 8003980:	6820      	ldr	r0, [r4, #0]
 8003982:	4401      	add	r1, r0
 8003984:	1850      	adds	r0, r2, r1
 8003986:	4283      	cmp	r3, r0
 8003988:	6011      	str	r1, [r2, #0]
 800398a:	d1e0      	bne.n	800394e <_free_r+0x22>
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	6053      	str	r3, [r2, #4]
 8003992:	4408      	add	r0, r1
 8003994:	6010      	str	r0, [r2, #0]
 8003996:	e7da      	b.n	800394e <_free_r+0x22>
 8003998:	d902      	bls.n	80039a0 <_free_r+0x74>
 800399a:	230c      	movs	r3, #12
 800399c:	602b      	str	r3, [r5, #0]
 800399e:	e7d6      	b.n	800394e <_free_r+0x22>
 80039a0:	6820      	ldr	r0, [r4, #0]
 80039a2:	1821      	adds	r1, r4, r0
 80039a4:	428b      	cmp	r3, r1
 80039a6:	bf04      	itt	eq
 80039a8:	6819      	ldreq	r1, [r3, #0]
 80039aa:	685b      	ldreq	r3, [r3, #4]
 80039ac:	6063      	str	r3, [r4, #4]
 80039ae:	bf04      	itt	eq
 80039b0:	1809      	addeq	r1, r1, r0
 80039b2:	6021      	streq	r1, [r4, #0]
 80039b4:	6054      	str	r4, [r2, #4]
 80039b6:	e7ca      	b.n	800394e <_free_r+0x22>
 80039b8:	bd38      	pop	{r3, r4, r5, pc}
 80039ba:	bf00      	nop
 80039bc:	200002a8 	.word	0x200002a8

080039c0 <sbrk_aligned>:
 80039c0:	b570      	push	{r4, r5, r6, lr}
 80039c2:	4e0f      	ldr	r6, [pc, #60]	@ (8003a00 <sbrk_aligned+0x40>)
 80039c4:	460c      	mov	r4, r1
 80039c6:	6831      	ldr	r1, [r6, #0]
 80039c8:	4605      	mov	r5, r0
 80039ca:	b911      	cbnz	r1, 80039d2 <sbrk_aligned+0x12>
 80039cc:	f000 fba6 	bl	800411c <_sbrk_r>
 80039d0:	6030      	str	r0, [r6, #0]
 80039d2:	4621      	mov	r1, r4
 80039d4:	4628      	mov	r0, r5
 80039d6:	f000 fba1 	bl	800411c <_sbrk_r>
 80039da:	1c43      	adds	r3, r0, #1
 80039dc:	d103      	bne.n	80039e6 <sbrk_aligned+0x26>
 80039de:	f04f 34ff 	mov.w	r4, #4294967295
 80039e2:	4620      	mov	r0, r4
 80039e4:	bd70      	pop	{r4, r5, r6, pc}
 80039e6:	1cc4      	adds	r4, r0, #3
 80039e8:	f024 0403 	bic.w	r4, r4, #3
 80039ec:	42a0      	cmp	r0, r4
 80039ee:	d0f8      	beq.n	80039e2 <sbrk_aligned+0x22>
 80039f0:	1a21      	subs	r1, r4, r0
 80039f2:	4628      	mov	r0, r5
 80039f4:	f000 fb92 	bl	800411c <_sbrk_r>
 80039f8:	3001      	adds	r0, #1
 80039fa:	d1f2      	bne.n	80039e2 <sbrk_aligned+0x22>
 80039fc:	e7ef      	b.n	80039de <sbrk_aligned+0x1e>
 80039fe:	bf00      	nop
 8003a00:	200002a4 	.word	0x200002a4

08003a04 <_malloc_r>:
 8003a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a08:	1ccd      	adds	r5, r1, #3
 8003a0a:	f025 0503 	bic.w	r5, r5, #3
 8003a0e:	3508      	adds	r5, #8
 8003a10:	2d0c      	cmp	r5, #12
 8003a12:	bf38      	it	cc
 8003a14:	250c      	movcc	r5, #12
 8003a16:	2d00      	cmp	r5, #0
 8003a18:	4606      	mov	r6, r0
 8003a1a:	db01      	blt.n	8003a20 <_malloc_r+0x1c>
 8003a1c:	42a9      	cmp	r1, r5
 8003a1e:	d904      	bls.n	8003a2a <_malloc_r+0x26>
 8003a20:	230c      	movs	r3, #12
 8003a22:	6033      	str	r3, [r6, #0]
 8003a24:	2000      	movs	r0, #0
 8003a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b00 <_malloc_r+0xfc>
 8003a2e:	f000 f869 	bl	8003b04 <__malloc_lock>
 8003a32:	f8d8 3000 	ldr.w	r3, [r8]
 8003a36:	461c      	mov	r4, r3
 8003a38:	bb44      	cbnz	r4, 8003a8c <_malloc_r+0x88>
 8003a3a:	4629      	mov	r1, r5
 8003a3c:	4630      	mov	r0, r6
 8003a3e:	f7ff ffbf 	bl	80039c0 <sbrk_aligned>
 8003a42:	1c43      	adds	r3, r0, #1
 8003a44:	4604      	mov	r4, r0
 8003a46:	d158      	bne.n	8003afa <_malloc_r+0xf6>
 8003a48:	f8d8 4000 	ldr.w	r4, [r8]
 8003a4c:	4627      	mov	r7, r4
 8003a4e:	2f00      	cmp	r7, #0
 8003a50:	d143      	bne.n	8003ada <_malloc_r+0xd6>
 8003a52:	2c00      	cmp	r4, #0
 8003a54:	d04b      	beq.n	8003aee <_malloc_r+0xea>
 8003a56:	6823      	ldr	r3, [r4, #0]
 8003a58:	4639      	mov	r1, r7
 8003a5a:	4630      	mov	r0, r6
 8003a5c:	eb04 0903 	add.w	r9, r4, r3
 8003a60:	f000 fb5c 	bl	800411c <_sbrk_r>
 8003a64:	4581      	cmp	r9, r0
 8003a66:	d142      	bne.n	8003aee <_malloc_r+0xea>
 8003a68:	6821      	ldr	r1, [r4, #0]
 8003a6a:	1a6d      	subs	r5, r5, r1
 8003a6c:	4629      	mov	r1, r5
 8003a6e:	4630      	mov	r0, r6
 8003a70:	f7ff ffa6 	bl	80039c0 <sbrk_aligned>
 8003a74:	3001      	adds	r0, #1
 8003a76:	d03a      	beq.n	8003aee <_malloc_r+0xea>
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	442b      	add	r3, r5
 8003a7c:	6023      	str	r3, [r4, #0]
 8003a7e:	f8d8 3000 	ldr.w	r3, [r8]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	bb62      	cbnz	r2, 8003ae0 <_malloc_r+0xdc>
 8003a86:	f8c8 7000 	str.w	r7, [r8]
 8003a8a:	e00f      	b.n	8003aac <_malloc_r+0xa8>
 8003a8c:	6822      	ldr	r2, [r4, #0]
 8003a8e:	1b52      	subs	r2, r2, r5
 8003a90:	d420      	bmi.n	8003ad4 <_malloc_r+0xd0>
 8003a92:	2a0b      	cmp	r2, #11
 8003a94:	d917      	bls.n	8003ac6 <_malloc_r+0xc2>
 8003a96:	1961      	adds	r1, r4, r5
 8003a98:	42a3      	cmp	r3, r4
 8003a9a:	6025      	str	r5, [r4, #0]
 8003a9c:	bf18      	it	ne
 8003a9e:	6059      	strne	r1, [r3, #4]
 8003aa0:	6863      	ldr	r3, [r4, #4]
 8003aa2:	bf08      	it	eq
 8003aa4:	f8c8 1000 	streq.w	r1, [r8]
 8003aa8:	5162      	str	r2, [r4, r5]
 8003aaa:	604b      	str	r3, [r1, #4]
 8003aac:	4630      	mov	r0, r6
 8003aae:	f000 f82f 	bl	8003b10 <__malloc_unlock>
 8003ab2:	f104 000b 	add.w	r0, r4, #11
 8003ab6:	1d23      	adds	r3, r4, #4
 8003ab8:	f020 0007 	bic.w	r0, r0, #7
 8003abc:	1ac2      	subs	r2, r0, r3
 8003abe:	bf1c      	itt	ne
 8003ac0:	1a1b      	subne	r3, r3, r0
 8003ac2:	50a3      	strne	r3, [r4, r2]
 8003ac4:	e7af      	b.n	8003a26 <_malloc_r+0x22>
 8003ac6:	6862      	ldr	r2, [r4, #4]
 8003ac8:	42a3      	cmp	r3, r4
 8003aca:	bf0c      	ite	eq
 8003acc:	f8c8 2000 	streq.w	r2, [r8]
 8003ad0:	605a      	strne	r2, [r3, #4]
 8003ad2:	e7eb      	b.n	8003aac <_malloc_r+0xa8>
 8003ad4:	4623      	mov	r3, r4
 8003ad6:	6864      	ldr	r4, [r4, #4]
 8003ad8:	e7ae      	b.n	8003a38 <_malloc_r+0x34>
 8003ada:	463c      	mov	r4, r7
 8003adc:	687f      	ldr	r7, [r7, #4]
 8003ade:	e7b6      	b.n	8003a4e <_malloc_r+0x4a>
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	42a3      	cmp	r3, r4
 8003ae6:	d1fb      	bne.n	8003ae0 <_malloc_r+0xdc>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	6053      	str	r3, [r2, #4]
 8003aec:	e7de      	b.n	8003aac <_malloc_r+0xa8>
 8003aee:	230c      	movs	r3, #12
 8003af0:	6033      	str	r3, [r6, #0]
 8003af2:	4630      	mov	r0, r6
 8003af4:	f000 f80c 	bl	8003b10 <__malloc_unlock>
 8003af8:	e794      	b.n	8003a24 <_malloc_r+0x20>
 8003afa:	6005      	str	r5, [r0, #0]
 8003afc:	e7d6      	b.n	8003aac <_malloc_r+0xa8>
 8003afe:	bf00      	nop
 8003b00:	200002a8 	.word	0x200002a8

08003b04 <__malloc_lock>:
 8003b04:	4801      	ldr	r0, [pc, #4]	@ (8003b0c <__malloc_lock+0x8>)
 8003b06:	f7ff bf0f 	b.w	8003928 <__retarget_lock_acquire_recursive>
 8003b0a:	bf00      	nop
 8003b0c:	200002a0 	.word	0x200002a0

08003b10 <__malloc_unlock>:
 8003b10:	4801      	ldr	r0, [pc, #4]	@ (8003b18 <__malloc_unlock+0x8>)
 8003b12:	f7ff bf0a 	b.w	800392a <__retarget_lock_release_recursive>
 8003b16:	bf00      	nop
 8003b18:	200002a0 	.word	0x200002a0

08003b1c <__ssputs_r>:
 8003b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b20:	688e      	ldr	r6, [r1, #8]
 8003b22:	461f      	mov	r7, r3
 8003b24:	42be      	cmp	r6, r7
 8003b26:	680b      	ldr	r3, [r1, #0]
 8003b28:	4682      	mov	sl, r0
 8003b2a:	460c      	mov	r4, r1
 8003b2c:	4690      	mov	r8, r2
 8003b2e:	d82d      	bhi.n	8003b8c <__ssputs_r+0x70>
 8003b30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003b38:	d026      	beq.n	8003b88 <__ssputs_r+0x6c>
 8003b3a:	6965      	ldr	r5, [r4, #20]
 8003b3c:	6909      	ldr	r1, [r1, #16]
 8003b3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b42:	eba3 0901 	sub.w	r9, r3, r1
 8003b46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b4a:	1c7b      	adds	r3, r7, #1
 8003b4c:	444b      	add	r3, r9
 8003b4e:	106d      	asrs	r5, r5, #1
 8003b50:	429d      	cmp	r5, r3
 8003b52:	bf38      	it	cc
 8003b54:	461d      	movcc	r5, r3
 8003b56:	0553      	lsls	r3, r2, #21
 8003b58:	d527      	bpl.n	8003baa <__ssputs_r+0x8e>
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	f7ff ff52 	bl	8003a04 <_malloc_r>
 8003b60:	4606      	mov	r6, r0
 8003b62:	b360      	cbz	r0, 8003bbe <__ssputs_r+0xa2>
 8003b64:	6921      	ldr	r1, [r4, #16]
 8003b66:	464a      	mov	r2, r9
 8003b68:	f000 fae8 	bl	800413c <memcpy>
 8003b6c:	89a3      	ldrh	r3, [r4, #12]
 8003b6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b76:	81a3      	strh	r3, [r4, #12]
 8003b78:	6126      	str	r6, [r4, #16]
 8003b7a:	6165      	str	r5, [r4, #20]
 8003b7c:	444e      	add	r6, r9
 8003b7e:	eba5 0509 	sub.w	r5, r5, r9
 8003b82:	6026      	str	r6, [r4, #0]
 8003b84:	60a5      	str	r5, [r4, #8]
 8003b86:	463e      	mov	r6, r7
 8003b88:	42be      	cmp	r6, r7
 8003b8a:	d900      	bls.n	8003b8e <__ssputs_r+0x72>
 8003b8c:	463e      	mov	r6, r7
 8003b8e:	6820      	ldr	r0, [r4, #0]
 8003b90:	4632      	mov	r2, r6
 8003b92:	4641      	mov	r1, r8
 8003b94:	f000 faa8 	bl	80040e8 <memmove>
 8003b98:	68a3      	ldr	r3, [r4, #8]
 8003b9a:	1b9b      	subs	r3, r3, r6
 8003b9c:	60a3      	str	r3, [r4, #8]
 8003b9e:	6823      	ldr	r3, [r4, #0]
 8003ba0:	4433      	add	r3, r6
 8003ba2:	6023      	str	r3, [r4, #0]
 8003ba4:	2000      	movs	r0, #0
 8003ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003baa:	462a      	mov	r2, r5
 8003bac:	f000 fad4 	bl	8004158 <_realloc_r>
 8003bb0:	4606      	mov	r6, r0
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	d1e0      	bne.n	8003b78 <__ssputs_r+0x5c>
 8003bb6:	6921      	ldr	r1, [r4, #16]
 8003bb8:	4650      	mov	r0, sl
 8003bba:	f7ff feb7 	bl	800392c <_free_r>
 8003bbe:	230c      	movs	r3, #12
 8003bc0:	f8ca 3000 	str.w	r3, [sl]
 8003bc4:	89a3      	ldrh	r3, [r4, #12]
 8003bc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bca:	81a3      	strh	r3, [r4, #12]
 8003bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd0:	e7e9      	b.n	8003ba6 <__ssputs_r+0x8a>
	...

08003bd4 <_svfiprintf_r>:
 8003bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd8:	4698      	mov	r8, r3
 8003bda:	898b      	ldrh	r3, [r1, #12]
 8003bdc:	061b      	lsls	r3, r3, #24
 8003bde:	b09d      	sub	sp, #116	@ 0x74
 8003be0:	4607      	mov	r7, r0
 8003be2:	460d      	mov	r5, r1
 8003be4:	4614      	mov	r4, r2
 8003be6:	d510      	bpl.n	8003c0a <_svfiprintf_r+0x36>
 8003be8:	690b      	ldr	r3, [r1, #16]
 8003bea:	b973      	cbnz	r3, 8003c0a <_svfiprintf_r+0x36>
 8003bec:	2140      	movs	r1, #64	@ 0x40
 8003bee:	f7ff ff09 	bl	8003a04 <_malloc_r>
 8003bf2:	6028      	str	r0, [r5, #0]
 8003bf4:	6128      	str	r0, [r5, #16]
 8003bf6:	b930      	cbnz	r0, 8003c06 <_svfiprintf_r+0x32>
 8003bf8:	230c      	movs	r3, #12
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003c00:	b01d      	add	sp, #116	@ 0x74
 8003c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c06:	2340      	movs	r3, #64	@ 0x40
 8003c08:	616b      	str	r3, [r5, #20]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c0e:	2320      	movs	r3, #32
 8003c10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003c14:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c18:	2330      	movs	r3, #48	@ 0x30
 8003c1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003db8 <_svfiprintf_r+0x1e4>
 8003c1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c22:	f04f 0901 	mov.w	r9, #1
 8003c26:	4623      	mov	r3, r4
 8003c28:	469a      	mov	sl, r3
 8003c2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c2e:	b10a      	cbz	r2, 8003c34 <_svfiprintf_r+0x60>
 8003c30:	2a25      	cmp	r2, #37	@ 0x25
 8003c32:	d1f9      	bne.n	8003c28 <_svfiprintf_r+0x54>
 8003c34:	ebba 0b04 	subs.w	fp, sl, r4
 8003c38:	d00b      	beq.n	8003c52 <_svfiprintf_r+0x7e>
 8003c3a:	465b      	mov	r3, fp
 8003c3c:	4622      	mov	r2, r4
 8003c3e:	4629      	mov	r1, r5
 8003c40:	4638      	mov	r0, r7
 8003c42:	f7ff ff6b 	bl	8003b1c <__ssputs_r>
 8003c46:	3001      	adds	r0, #1
 8003c48:	f000 80a7 	beq.w	8003d9a <_svfiprintf_r+0x1c6>
 8003c4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c4e:	445a      	add	r2, fp
 8003c50:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c52:	f89a 3000 	ldrb.w	r3, [sl]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 809f 	beq.w	8003d9a <_svfiprintf_r+0x1c6>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c66:	f10a 0a01 	add.w	sl, sl, #1
 8003c6a:	9304      	str	r3, [sp, #16]
 8003c6c:	9307      	str	r3, [sp, #28]
 8003c6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c72:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c74:	4654      	mov	r4, sl
 8003c76:	2205      	movs	r2, #5
 8003c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c7c:	484e      	ldr	r0, [pc, #312]	@ (8003db8 <_svfiprintf_r+0x1e4>)
 8003c7e:	f7fc faaf 	bl	80001e0 <memchr>
 8003c82:	9a04      	ldr	r2, [sp, #16]
 8003c84:	b9d8      	cbnz	r0, 8003cbe <_svfiprintf_r+0xea>
 8003c86:	06d0      	lsls	r0, r2, #27
 8003c88:	bf44      	itt	mi
 8003c8a:	2320      	movmi	r3, #32
 8003c8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c90:	0711      	lsls	r1, r2, #28
 8003c92:	bf44      	itt	mi
 8003c94:	232b      	movmi	r3, #43	@ 0x2b
 8003c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c9a:	f89a 3000 	ldrb.w	r3, [sl]
 8003c9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ca0:	d015      	beq.n	8003cce <_svfiprintf_r+0xfa>
 8003ca2:	9a07      	ldr	r2, [sp, #28]
 8003ca4:	4654      	mov	r4, sl
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	f04f 0c0a 	mov.w	ip, #10
 8003cac:	4621      	mov	r1, r4
 8003cae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cb2:	3b30      	subs	r3, #48	@ 0x30
 8003cb4:	2b09      	cmp	r3, #9
 8003cb6:	d94b      	bls.n	8003d50 <_svfiprintf_r+0x17c>
 8003cb8:	b1b0      	cbz	r0, 8003ce8 <_svfiprintf_r+0x114>
 8003cba:	9207      	str	r2, [sp, #28]
 8003cbc:	e014      	b.n	8003ce8 <_svfiprintf_r+0x114>
 8003cbe:	eba0 0308 	sub.w	r3, r0, r8
 8003cc2:	fa09 f303 	lsl.w	r3, r9, r3
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	9304      	str	r3, [sp, #16]
 8003cca:	46a2      	mov	sl, r4
 8003ccc:	e7d2      	b.n	8003c74 <_svfiprintf_r+0xa0>
 8003cce:	9b03      	ldr	r3, [sp, #12]
 8003cd0:	1d19      	adds	r1, r3, #4
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	9103      	str	r1, [sp, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	bfbb      	ittet	lt
 8003cda:	425b      	neglt	r3, r3
 8003cdc:	f042 0202 	orrlt.w	r2, r2, #2
 8003ce0:	9307      	strge	r3, [sp, #28]
 8003ce2:	9307      	strlt	r3, [sp, #28]
 8003ce4:	bfb8      	it	lt
 8003ce6:	9204      	strlt	r2, [sp, #16]
 8003ce8:	7823      	ldrb	r3, [r4, #0]
 8003cea:	2b2e      	cmp	r3, #46	@ 0x2e
 8003cec:	d10a      	bne.n	8003d04 <_svfiprintf_r+0x130>
 8003cee:	7863      	ldrb	r3, [r4, #1]
 8003cf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cf2:	d132      	bne.n	8003d5a <_svfiprintf_r+0x186>
 8003cf4:	9b03      	ldr	r3, [sp, #12]
 8003cf6:	1d1a      	adds	r2, r3, #4
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	9203      	str	r2, [sp, #12]
 8003cfc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003d00:	3402      	adds	r4, #2
 8003d02:	9305      	str	r3, [sp, #20]
 8003d04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003dc8 <_svfiprintf_r+0x1f4>
 8003d08:	7821      	ldrb	r1, [r4, #0]
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	4650      	mov	r0, sl
 8003d0e:	f7fc fa67 	bl	80001e0 <memchr>
 8003d12:	b138      	cbz	r0, 8003d24 <_svfiprintf_r+0x150>
 8003d14:	9b04      	ldr	r3, [sp, #16]
 8003d16:	eba0 000a 	sub.w	r0, r0, sl
 8003d1a:	2240      	movs	r2, #64	@ 0x40
 8003d1c:	4082      	lsls	r2, r0
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	3401      	adds	r4, #1
 8003d22:	9304      	str	r3, [sp, #16]
 8003d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d28:	4824      	ldr	r0, [pc, #144]	@ (8003dbc <_svfiprintf_r+0x1e8>)
 8003d2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d2e:	2206      	movs	r2, #6
 8003d30:	f7fc fa56 	bl	80001e0 <memchr>
 8003d34:	2800      	cmp	r0, #0
 8003d36:	d036      	beq.n	8003da6 <_svfiprintf_r+0x1d2>
 8003d38:	4b21      	ldr	r3, [pc, #132]	@ (8003dc0 <_svfiprintf_r+0x1ec>)
 8003d3a:	bb1b      	cbnz	r3, 8003d84 <_svfiprintf_r+0x1b0>
 8003d3c:	9b03      	ldr	r3, [sp, #12]
 8003d3e:	3307      	adds	r3, #7
 8003d40:	f023 0307 	bic.w	r3, r3, #7
 8003d44:	3308      	adds	r3, #8
 8003d46:	9303      	str	r3, [sp, #12]
 8003d48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d4a:	4433      	add	r3, r6
 8003d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d4e:	e76a      	b.n	8003c26 <_svfiprintf_r+0x52>
 8003d50:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d54:	460c      	mov	r4, r1
 8003d56:	2001      	movs	r0, #1
 8003d58:	e7a8      	b.n	8003cac <_svfiprintf_r+0xd8>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	3401      	adds	r4, #1
 8003d5e:	9305      	str	r3, [sp, #20]
 8003d60:	4619      	mov	r1, r3
 8003d62:	f04f 0c0a 	mov.w	ip, #10
 8003d66:	4620      	mov	r0, r4
 8003d68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d6c:	3a30      	subs	r2, #48	@ 0x30
 8003d6e:	2a09      	cmp	r2, #9
 8003d70:	d903      	bls.n	8003d7a <_svfiprintf_r+0x1a6>
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0c6      	beq.n	8003d04 <_svfiprintf_r+0x130>
 8003d76:	9105      	str	r1, [sp, #20]
 8003d78:	e7c4      	b.n	8003d04 <_svfiprintf_r+0x130>
 8003d7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d7e:	4604      	mov	r4, r0
 8003d80:	2301      	movs	r3, #1
 8003d82:	e7f0      	b.n	8003d66 <_svfiprintf_r+0x192>
 8003d84:	ab03      	add	r3, sp, #12
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	462a      	mov	r2, r5
 8003d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8003dc4 <_svfiprintf_r+0x1f0>)
 8003d8c:	a904      	add	r1, sp, #16
 8003d8e:	4638      	mov	r0, r7
 8003d90:	f3af 8000 	nop.w
 8003d94:	1c42      	adds	r2, r0, #1
 8003d96:	4606      	mov	r6, r0
 8003d98:	d1d6      	bne.n	8003d48 <_svfiprintf_r+0x174>
 8003d9a:	89ab      	ldrh	r3, [r5, #12]
 8003d9c:	065b      	lsls	r3, r3, #25
 8003d9e:	f53f af2d 	bmi.w	8003bfc <_svfiprintf_r+0x28>
 8003da2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003da4:	e72c      	b.n	8003c00 <_svfiprintf_r+0x2c>
 8003da6:	ab03      	add	r3, sp, #12
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	462a      	mov	r2, r5
 8003dac:	4b05      	ldr	r3, [pc, #20]	@ (8003dc4 <_svfiprintf_r+0x1f0>)
 8003dae:	a904      	add	r1, sp, #16
 8003db0:	4638      	mov	r0, r7
 8003db2:	f000 f879 	bl	8003ea8 <_printf_i>
 8003db6:	e7ed      	b.n	8003d94 <_svfiprintf_r+0x1c0>
 8003db8:	080043cd 	.word	0x080043cd
 8003dbc:	080043d7 	.word	0x080043d7
 8003dc0:	00000000 	.word	0x00000000
 8003dc4:	08003b1d 	.word	0x08003b1d
 8003dc8:	080043d3 	.word	0x080043d3

08003dcc <_printf_common>:
 8003dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dd0:	4616      	mov	r6, r2
 8003dd2:	4698      	mov	r8, r3
 8003dd4:	688a      	ldr	r2, [r1, #8]
 8003dd6:	690b      	ldr	r3, [r1, #16]
 8003dd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	bfb8      	it	lt
 8003de0:	4613      	movlt	r3, r2
 8003de2:	6033      	str	r3, [r6, #0]
 8003de4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003de8:	4607      	mov	r7, r0
 8003dea:	460c      	mov	r4, r1
 8003dec:	b10a      	cbz	r2, 8003df2 <_printf_common+0x26>
 8003dee:	3301      	adds	r3, #1
 8003df0:	6033      	str	r3, [r6, #0]
 8003df2:	6823      	ldr	r3, [r4, #0]
 8003df4:	0699      	lsls	r1, r3, #26
 8003df6:	bf42      	ittt	mi
 8003df8:	6833      	ldrmi	r3, [r6, #0]
 8003dfa:	3302      	addmi	r3, #2
 8003dfc:	6033      	strmi	r3, [r6, #0]
 8003dfe:	6825      	ldr	r5, [r4, #0]
 8003e00:	f015 0506 	ands.w	r5, r5, #6
 8003e04:	d106      	bne.n	8003e14 <_printf_common+0x48>
 8003e06:	f104 0a19 	add.w	sl, r4, #25
 8003e0a:	68e3      	ldr	r3, [r4, #12]
 8003e0c:	6832      	ldr	r2, [r6, #0]
 8003e0e:	1a9b      	subs	r3, r3, r2
 8003e10:	42ab      	cmp	r3, r5
 8003e12:	dc26      	bgt.n	8003e62 <_printf_common+0x96>
 8003e14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e18:	6822      	ldr	r2, [r4, #0]
 8003e1a:	3b00      	subs	r3, #0
 8003e1c:	bf18      	it	ne
 8003e1e:	2301      	movne	r3, #1
 8003e20:	0692      	lsls	r2, r2, #26
 8003e22:	d42b      	bmi.n	8003e7c <_printf_common+0xb0>
 8003e24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e28:	4641      	mov	r1, r8
 8003e2a:	4638      	mov	r0, r7
 8003e2c:	47c8      	blx	r9
 8003e2e:	3001      	adds	r0, #1
 8003e30:	d01e      	beq.n	8003e70 <_printf_common+0xa4>
 8003e32:	6823      	ldr	r3, [r4, #0]
 8003e34:	6922      	ldr	r2, [r4, #16]
 8003e36:	f003 0306 	and.w	r3, r3, #6
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	bf02      	ittt	eq
 8003e3e:	68e5      	ldreq	r5, [r4, #12]
 8003e40:	6833      	ldreq	r3, [r6, #0]
 8003e42:	1aed      	subeq	r5, r5, r3
 8003e44:	68a3      	ldr	r3, [r4, #8]
 8003e46:	bf0c      	ite	eq
 8003e48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e4c:	2500      	movne	r5, #0
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	bfc4      	itt	gt
 8003e52:	1a9b      	subgt	r3, r3, r2
 8003e54:	18ed      	addgt	r5, r5, r3
 8003e56:	2600      	movs	r6, #0
 8003e58:	341a      	adds	r4, #26
 8003e5a:	42b5      	cmp	r5, r6
 8003e5c:	d11a      	bne.n	8003e94 <_printf_common+0xc8>
 8003e5e:	2000      	movs	r0, #0
 8003e60:	e008      	b.n	8003e74 <_printf_common+0xa8>
 8003e62:	2301      	movs	r3, #1
 8003e64:	4652      	mov	r2, sl
 8003e66:	4641      	mov	r1, r8
 8003e68:	4638      	mov	r0, r7
 8003e6a:	47c8      	blx	r9
 8003e6c:	3001      	adds	r0, #1
 8003e6e:	d103      	bne.n	8003e78 <_printf_common+0xac>
 8003e70:	f04f 30ff 	mov.w	r0, #4294967295
 8003e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e78:	3501      	adds	r5, #1
 8003e7a:	e7c6      	b.n	8003e0a <_printf_common+0x3e>
 8003e7c:	18e1      	adds	r1, r4, r3
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	2030      	movs	r0, #48	@ 0x30
 8003e82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e86:	4422      	add	r2, r4
 8003e88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e90:	3302      	adds	r3, #2
 8003e92:	e7c7      	b.n	8003e24 <_printf_common+0x58>
 8003e94:	2301      	movs	r3, #1
 8003e96:	4622      	mov	r2, r4
 8003e98:	4641      	mov	r1, r8
 8003e9a:	4638      	mov	r0, r7
 8003e9c:	47c8      	blx	r9
 8003e9e:	3001      	adds	r0, #1
 8003ea0:	d0e6      	beq.n	8003e70 <_printf_common+0xa4>
 8003ea2:	3601      	adds	r6, #1
 8003ea4:	e7d9      	b.n	8003e5a <_printf_common+0x8e>
	...

08003ea8 <_printf_i>:
 8003ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003eac:	7e0f      	ldrb	r7, [r1, #24]
 8003eae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003eb0:	2f78      	cmp	r7, #120	@ 0x78
 8003eb2:	4691      	mov	r9, r2
 8003eb4:	4680      	mov	r8, r0
 8003eb6:	460c      	mov	r4, r1
 8003eb8:	469a      	mov	sl, r3
 8003eba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ebe:	d807      	bhi.n	8003ed0 <_printf_i+0x28>
 8003ec0:	2f62      	cmp	r7, #98	@ 0x62
 8003ec2:	d80a      	bhi.n	8003eda <_printf_i+0x32>
 8003ec4:	2f00      	cmp	r7, #0
 8003ec6:	f000 80d2 	beq.w	800406e <_printf_i+0x1c6>
 8003eca:	2f58      	cmp	r7, #88	@ 0x58
 8003ecc:	f000 80b9 	beq.w	8004042 <_printf_i+0x19a>
 8003ed0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ed4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ed8:	e03a      	b.n	8003f50 <_printf_i+0xa8>
 8003eda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003ede:	2b15      	cmp	r3, #21
 8003ee0:	d8f6      	bhi.n	8003ed0 <_printf_i+0x28>
 8003ee2:	a101      	add	r1, pc, #4	@ (adr r1, 8003ee8 <_printf_i+0x40>)
 8003ee4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ee8:	08003f41 	.word	0x08003f41
 8003eec:	08003f55 	.word	0x08003f55
 8003ef0:	08003ed1 	.word	0x08003ed1
 8003ef4:	08003ed1 	.word	0x08003ed1
 8003ef8:	08003ed1 	.word	0x08003ed1
 8003efc:	08003ed1 	.word	0x08003ed1
 8003f00:	08003f55 	.word	0x08003f55
 8003f04:	08003ed1 	.word	0x08003ed1
 8003f08:	08003ed1 	.word	0x08003ed1
 8003f0c:	08003ed1 	.word	0x08003ed1
 8003f10:	08003ed1 	.word	0x08003ed1
 8003f14:	08004055 	.word	0x08004055
 8003f18:	08003f7f 	.word	0x08003f7f
 8003f1c:	0800400f 	.word	0x0800400f
 8003f20:	08003ed1 	.word	0x08003ed1
 8003f24:	08003ed1 	.word	0x08003ed1
 8003f28:	08004077 	.word	0x08004077
 8003f2c:	08003ed1 	.word	0x08003ed1
 8003f30:	08003f7f 	.word	0x08003f7f
 8003f34:	08003ed1 	.word	0x08003ed1
 8003f38:	08003ed1 	.word	0x08003ed1
 8003f3c:	08004017 	.word	0x08004017
 8003f40:	6833      	ldr	r3, [r6, #0]
 8003f42:	1d1a      	adds	r2, r3, #4
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6032      	str	r2, [r6, #0]
 8003f48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f50:	2301      	movs	r3, #1
 8003f52:	e09d      	b.n	8004090 <_printf_i+0x1e8>
 8003f54:	6833      	ldr	r3, [r6, #0]
 8003f56:	6820      	ldr	r0, [r4, #0]
 8003f58:	1d19      	adds	r1, r3, #4
 8003f5a:	6031      	str	r1, [r6, #0]
 8003f5c:	0606      	lsls	r6, r0, #24
 8003f5e:	d501      	bpl.n	8003f64 <_printf_i+0xbc>
 8003f60:	681d      	ldr	r5, [r3, #0]
 8003f62:	e003      	b.n	8003f6c <_printf_i+0xc4>
 8003f64:	0645      	lsls	r5, r0, #25
 8003f66:	d5fb      	bpl.n	8003f60 <_printf_i+0xb8>
 8003f68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f6c:	2d00      	cmp	r5, #0
 8003f6e:	da03      	bge.n	8003f78 <_printf_i+0xd0>
 8003f70:	232d      	movs	r3, #45	@ 0x2d
 8003f72:	426d      	negs	r5, r5
 8003f74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f78:	4859      	ldr	r0, [pc, #356]	@ (80040e0 <_printf_i+0x238>)
 8003f7a:	230a      	movs	r3, #10
 8003f7c:	e011      	b.n	8003fa2 <_printf_i+0xfa>
 8003f7e:	6821      	ldr	r1, [r4, #0]
 8003f80:	6833      	ldr	r3, [r6, #0]
 8003f82:	0608      	lsls	r0, r1, #24
 8003f84:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f88:	d402      	bmi.n	8003f90 <_printf_i+0xe8>
 8003f8a:	0649      	lsls	r1, r1, #25
 8003f8c:	bf48      	it	mi
 8003f8e:	b2ad      	uxthmi	r5, r5
 8003f90:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f92:	4853      	ldr	r0, [pc, #332]	@ (80040e0 <_printf_i+0x238>)
 8003f94:	6033      	str	r3, [r6, #0]
 8003f96:	bf14      	ite	ne
 8003f98:	230a      	movne	r3, #10
 8003f9a:	2308      	moveq	r3, #8
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003fa2:	6866      	ldr	r6, [r4, #4]
 8003fa4:	60a6      	str	r6, [r4, #8]
 8003fa6:	2e00      	cmp	r6, #0
 8003fa8:	bfa2      	ittt	ge
 8003faa:	6821      	ldrge	r1, [r4, #0]
 8003fac:	f021 0104 	bicge.w	r1, r1, #4
 8003fb0:	6021      	strge	r1, [r4, #0]
 8003fb2:	b90d      	cbnz	r5, 8003fb8 <_printf_i+0x110>
 8003fb4:	2e00      	cmp	r6, #0
 8003fb6:	d04b      	beq.n	8004050 <_printf_i+0x1a8>
 8003fb8:	4616      	mov	r6, r2
 8003fba:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fbe:	fb03 5711 	mls	r7, r3, r1, r5
 8003fc2:	5dc7      	ldrb	r7, [r0, r7]
 8003fc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fc8:	462f      	mov	r7, r5
 8003fca:	42bb      	cmp	r3, r7
 8003fcc:	460d      	mov	r5, r1
 8003fce:	d9f4      	bls.n	8003fba <_printf_i+0x112>
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	d10b      	bne.n	8003fec <_printf_i+0x144>
 8003fd4:	6823      	ldr	r3, [r4, #0]
 8003fd6:	07df      	lsls	r7, r3, #31
 8003fd8:	d508      	bpl.n	8003fec <_printf_i+0x144>
 8003fda:	6923      	ldr	r3, [r4, #16]
 8003fdc:	6861      	ldr	r1, [r4, #4]
 8003fde:	4299      	cmp	r1, r3
 8003fe0:	bfde      	ittt	le
 8003fe2:	2330      	movle	r3, #48	@ 0x30
 8003fe4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fe8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003fec:	1b92      	subs	r2, r2, r6
 8003fee:	6122      	str	r2, [r4, #16]
 8003ff0:	f8cd a000 	str.w	sl, [sp]
 8003ff4:	464b      	mov	r3, r9
 8003ff6:	aa03      	add	r2, sp, #12
 8003ff8:	4621      	mov	r1, r4
 8003ffa:	4640      	mov	r0, r8
 8003ffc:	f7ff fee6 	bl	8003dcc <_printf_common>
 8004000:	3001      	adds	r0, #1
 8004002:	d14a      	bne.n	800409a <_printf_i+0x1f2>
 8004004:	f04f 30ff 	mov.w	r0, #4294967295
 8004008:	b004      	add	sp, #16
 800400a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	f043 0320 	orr.w	r3, r3, #32
 8004014:	6023      	str	r3, [r4, #0]
 8004016:	4833      	ldr	r0, [pc, #204]	@ (80040e4 <_printf_i+0x23c>)
 8004018:	2778      	movs	r7, #120	@ 0x78
 800401a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800401e:	6823      	ldr	r3, [r4, #0]
 8004020:	6831      	ldr	r1, [r6, #0]
 8004022:	061f      	lsls	r7, r3, #24
 8004024:	f851 5b04 	ldr.w	r5, [r1], #4
 8004028:	d402      	bmi.n	8004030 <_printf_i+0x188>
 800402a:	065f      	lsls	r7, r3, #25
 800402c:	bf48      	it	mi
 800402e:	b2ad      	uxthmi	r5, r5
 8004030:	6031      	str	r1, [r6, #0]
 8004032:	07d9      	lsls	r1, r3, #31
 8004034:	bf44      	itt	mi
 8004036:	f043 0320 	orrmi.w	r3, r3, #32
 800403a:	6023      	strmi	r3, [r4, #0]
 800403c:	b11d      	cbz	r5, 8004046 <_printf_i+0x19e>
 800403e:	2310      	movs	r3, #16
 8004040:	e7ac      	b.n	8003f9c <_printf_i+0xf4>
 8004042:	4827      	ldr	r0, [pc, #156]	@ (80040e0 <_printf_i+0x238>)
 8004044:	e7e9      	b.n	800401a <_printf_i+0x172>
 8004046:	6823      	ldr	r3, [r4, #0]
 8004048:	f023 0320 	bic.w	r3, r3, #32
 800404c:	6023      	str	r3, [r4, #0]
 800404e:	e7f6      	b.n	800403e <_printf_i+0x196>
 8004050:	4616      	mov	r6, r2
 8004052:	e7bd      	b.n	8003fd0 <_printf_i+0x128>
 8004054:	6833      	ldr	r3, [r6, #0]
 8004056:	6825      	ldr	r5, [r4, #0]
 8004058:	6961      	ldr	r1, [r4, #20]
 800405a:	1d18      	adds	r0, r3, #4
 800405c:	6030      	str	r0, [r6, #0]
 800405e:	062e      	lsls	r6, r5, #24
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	d501      	bpl.n	8004068 <_printf_i+0x1c0>
 8004064:	6019      	str	r1, [r3, #0]
 8004066:	e002      	b.n	800406e <_printf_i+0x1c6>
 8004068:	0668      	lsls	r0, r5, #25
 800406a:	d5fb      	bpl.n	8004064 <_printf_i+0x1bc>
 800406c:	8019      	strh	r1, [r3, #0]
 800406e:	2300      	movs	r3, #0
 8004070:	6123      	str	r3, [r4, #16]
 8004072:	4616      	mov	r6, r2
 8004074:	e7bc      	b.n	8003ff0 <_printf_i+0x148>
 8004076:	6833      	ldr	r3, [r6, #0]
 8004078:	1d1a      	adds	r2, r3, #4
 800407a:	6032      	str	r2, [r6, #0]
 800407c:	681e      	ldr	r6, [r3, #0]
 800407e:	6862      	ldr	r2, [r4, #4]
 8004080:	2100      	movs	r1, #0
 8004082:	4630      	mov	r0, r6
 8004084:	f7fc f8ac 	bl	80001e0 <memchr>
 8004088:	b108      	cbz	r0, 800408e <_printf_i+0x1e6>
 800408a:	1b80      	subs	r0, r0, r6
 800408c:	6060      	str	r0, [r4, #4]
 800408e:	6863      	ldr	r3, [r4, #4]
 8004090:	6123      	str	r3, [r4, #16]
 8004092:	2300      	movs	r3, #0
 8004094:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004098:	e7aa      	b.n	8003ff0 <_printf_i+0x148>
 800409a:	6923      	ldr	r3, [r4, #16]
 800409c:	4632      	mov	r2, r6
 800409e:	4649      	mov	r1, r9
 80040a0:	4640      	mov	r0, r8
 80040a2:	47d0      	blx	sl
 80040a4:	3001      	adds	r0, #1
 80040a6:	d0ad      	beq.n	8004004 <_printf_i+0x15c>
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	079b      	lsls	r3, r3, #30
 80040ac:	d413      	bmi.n	80040d6 <_printf_i+0x22e>
 80040ae:	68e0      	ldr	r0, [r4, #12]
 80040b0:	9b03      	ldr	r3, [sp, #12]
 80040b2:	4298      	cmp	r0, r3
 80040b4:	bfb8      	it	lt
 80040b6:	4618      	movlt	r0, r3
 80040b8:	e7a6      	b.n	8004008 <_printf_i+0x160>
 80040ba:	2301      	movs	r3, #1
 80040bc:	4632      	mov	r2, r6
 80040be:	4649      	mov	r1, r9
 80040c0:	4640      	mov	r0, r8
 80040c2:	47d0      	blx	sl
 80040c4:	3001      	adds	r0, #1
 80040c6:	d09d      	beq.n	8004004 <_printf_i+0x15c>
 80040c8:	3501      	adds	r5, #1
 80040ca:	68e3      	ldr	r3, [r4, #12]
 80040cc:	9903      	ldr	r1, [sp, #12]
 80040ce:	1a5b      	subs	r3, r3, r1
 80040d0:	42ab      	cmp	r3, r5
 80040d2:	dcf2      	bgt.n	80040ba <_printf_i+0x212>
 80040d4:	e7eb      	b.n	80040ae <_printf_i+0x206>
 80040d6:	2500      	movs	r5, #0
 80040d8:	f104 0619 	add.w	r6, r4, #25
 80040dc:	e7f5      	b.n	80040ca <_printf_i+0x222>
 80040de:	bf00      	nop
 80040e0:	080043de 	.word	0x080043de
 80040e4:	080043ef 	.word	0x080043ef

080040e8 <memmove>:
 80040e8:	4288      	cmp	r0, r1
 80040ea:	b510      	push	{r4, lr}
 80040ec:	eb01 0402 	add.w	r4, r1, r2
 80040f0:	d902      	bls.n	80040f8 <memmove+0x10>
 80040f2:	4284      	cmp	r4, r0
 80040f4:	4623      	mov	r3, r4
 80040f6:	d807      	bhi.n	8004108 <memmove+0x20>
 80040f8:	1e43      	subs	r3, r0, #1
 80040fa:	42a1      	cmp	r1, r4
 80040fc:	d008      	beq.n	8004110 <memmove+0x28>
 80040fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004102:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004106:	e7f8      	b.n	80040fa <memmove+0x12>
 8004108:	4402      	add	r2, r0
 800410a:	4601      	mov	r1, r0
 800410c:	428a      	cmp	r2, r1
 800410e:	d100      	bne.n	8004112 <memmove+0x2a>
 8004110:	bd10      	pop	{r4, pc}
 8004112:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004116:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800411a:	e7f7      	b.n	800410c <memmove+0x24>

0800411c <_sbrk_r>:
 800411c:	b538      	push	{r3, r4, r5, lr}
 800411e:	4d06      	ldr	r5, [pc, #24]	@ (8004138 <_sbrk_r+0x1c>)
 8004120:	2300      	movs	r3, #0
 8004122:	4604      	mov	r4, r0
 8004124:	4608      	mov	r0, r1
 8004126:	602b      	str	r3, [r5, #0]
 8004128:	f7fc fec0 	bl	8000eac <_sbrk>
 800412c:	1c43      	adds	r3, r0, #1
 800412e:	d102      	bne.n	8004136 <_sbrk_r+0x1a>
 8004130:	682b      	ldr	r3, [r5, #0]
 8004132:	b103      	cbz	r3, 8004136 <_sbrk_r+0x1a>
 8004134:	6023      	str	r3, [r4, #0]
 8004136:	bd38      	pop	{r3, r4, r5, pc}
 8004138:	2000029c 	.word	0x2000029c

0800413c <memcpy>:
 800413c:	440a      	add	r2, r1
 800413e:	4291      	cmp	r1, r2
 8004140:	f100 33ff 	add.w	r3, r0, #4294967295
 8004144:	d100      	bne.n	8004148 <memcpy+0xc>
 8004146:	4770      	bx	lr
 8004148:	b510      	push	{r4, lr}
 800414a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800414e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004152:	4291      	cmp	r1, r2
 8004154:	d1f9      	bne.n	800414a <memcpy+0xe>
 8004156:	bd10      	pop	{r4, pc}

08004158 <_realloc_r>:
 8004158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800415c:	4680      	mov	r8, r0
 800415e:	4615      	mov	r5, r2
 8004160:	460c      	mov	r4, r1
 8004162:	b921      	cbnz	r1, 800416e <_realloc_r+0x16>
 8004164:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004168:	4611      	mov	r1, r2
 800416a:	f7ff bc4b 	b.w	8003a04 <_malloc_r>
 800416e:	b92a      	cbnz	r2, 800417c <_realloc_r+0x24>
 8004170:	f7ff fbdc 	bl	800392c <_free_r>
 8004174:	2400      	movs	r4, #0
 8004176:	4620      	mov	r0, r4
 8004178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800417c:	f000 f81a 	bl	80041b4 <_malloc_usable_size_r>
 8004180:	4285      	cmp	r5, r0
 8004182:	4606      	mov	r6, r0
 8004184:	d802      	bhi.n	800418c <_realloc_r+0x34>
 8004186:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800418a:	d8f4      	bhi.n	8004176 <_realloc_r+0x1e>
 800418c:	4629      	mov	r1, r5
 800418e:	4640      	mov	r0, r8
 8004190:	f7ff fc38 	bl	8003a04 <_malloc_r>
 8004194:	4607      	mov	r7, r0
 8004196:	2800      	cmp	r0, #0
 8004198:	d0ec      	beq.n	8004174 <_realloc_r+0x1c>
 800419a:	42b5      	cmp	r5, r6
 800419c:	462a      	mov	r2, r5
 800419e:	4621      	mov	r1, r4
 80041a0:	bf28      	it	cs
 80041a2:	4632      	movcs	r2, r6
 80041a4:	f7ff ffca 	bl	800413c <memcpy>
 80041a8:	4621      	mov	r1, r4
 80041aa:	4640      	mov	r0, r8
 80041ac:	f7ff fbbe 	bl	800392c <_free_r>
 80041b0:	463c      	mov	r4, r7
 80041b2:	e7e0      	b.n	8004176 <_realloc_r+0x1e>

080041b4 <_malloc_usable_size_r>:
 80041b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041b8:	1f18      	subs	r0, r3, #4
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	bfbc      	itt	lt
 80041be:	580b      	ldrlt	r3, [r1, r0]
 80041c0:	18c0      	addlt	r0, r0, r3
 80041c2:	4770      	bx	lr

080041c4 <_init>:
 80041c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c6:	bf00      	nop
 80041c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ca:	bc08      	pop	{r3}
 80041cc:	469e      	mov	lr, r3
 80041ce:	4770      	bx	lr

080041d0 <_fini>:
 80041d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d2:	bf00      	nop
 80041d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041d6:	bc08      	pop	{r3}
 80041d8:	469e      	mov	lr, r3
 80041da:	4770      	bx	lr
